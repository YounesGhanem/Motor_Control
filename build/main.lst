ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.section	.rodata
  17              		.align	2
  18              	.LC0:
  19 0000 6D656469 		.ascii	"mediumFrequency\000"
  19      756D4672 
  19      65717565 
  19      6E637900 
  20              		.align	2
  21              	.LC2:
  22 0010 73616665 		.ascii	"safety\000"
  22      747900
  23              		.text
  24              	.Ltext0:
  25              		.cfi_sections	.debug_frame
  26              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  27              		.align	2
  30              	OFFSET_TAB_CCMRx:
  31 0000 00000000 		.ascii	"\000\000\000\000\004\004\004<<"
  31      0404043C 
  31      3C
  32              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  33              		.align	2
  36              	SHIFT_TAB_OCxx:
  37 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\010"
  37      00000800 
  37      08
  38              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  39              		.align	2
  42              	SHIFT_TAB_ICxx:
  43 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000"
  43      00000800 
  43      00
  44              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  45              		.align	2
  48              	SHIFT_TAB_CCxP:
  49 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\020\024"
  49      080A0C10 
  49      14
  50              		.section	.rodata.SHIFT_TAB_OISx,"a"
  51              		.align	2
  54              	SHIFT_TAB_OISx:
  55 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\010\012"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 2


  55      04050608 
  55      0A
  56              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
  57              		.align	2
  60              	CHANNEL_OFFSET_TAB:
  61 0000 081C3044 		.ascii	"\010\0340DXl\200"
  61      586C80
  62              		.global	hadc1
  63              		.section	.bss.hadc1,"aw",%nobits
  64              		.align	2
  67              	hadc1:
  68 0000 00000000 		.space	100
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.global	hadc2
  70              		.section	.bss.hadc2,"aw",%nobits
  71              		.align	2
  74              	hadc2:
  75 0000 00000000 		.space	100
  75      00000000 
  75      00000000 
  75      00000000 
  75      00000000 
  76              		.global	hdma_adc2
  77              		.section	.bss.hdma_adc2,"aw",%nobits
  78              		.align	2
  81              	hdma_adc2:
  82 0000 00000000 		.space	72
  82      00000000 
  82      00000000 
  82      00000000 
  82      00000000 
  83              		.global	htim1
  84              		.section	.bss.htim1,"aw",%nobits
  85              		.align	2
  88              	htim1:
  89 0000 00000000 		.space	76
  89      00000000 
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.global	htim3
  91              		.section	.bss.htim3,"aw",%nobits
  92              		.align	2
  95              	htim3:
  96 0000 00000000 		.space	76
  96      00000000 
  96      00000000 
  96      00000000 
  96      00000000 
  97              		.global	htim4
  98              		.section	.bss.htim4,"aw",%nobits
  99              		.align	2
 102              	htim4:
 103 0000 00000000 		.space	76
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 3


 103      00000000 
 103      00000000 
 103      00000000 
 103      00000000 
 104              		.global	huart2
 105              		.section	.bss.huart2,"aw",%nobits
 106              		.align	2
 109              	huart2:
 110 0000 00000000 		.space	136
 110      00000000 
 110      00000000 
 110      00000000 
 110      00000000 
 111              		.global	hdma_usart2_rx
 112              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 113              		.align	2
 116              	hdma_usart2_rx:
 117 0000 00000000 		.space	72
 117      00000000 
 117      00000000 
 117      00000000 
 117      00000000 
 118              		.global	hdma_usart2_tx
 119              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 120              		.align	2
 123              	hdma_usart2_tx:
 124 0000 00000000 		.space	72
 124      00000000 
 124      00000000 
 124      00000000 
 124      00000000 
 125              		.global	mediumFrequencyHandle
 126              		.section	.bss.mediumFrequencyHandle,"aw",%nobits
 127              		.align	2
 130              	mediumFrequencyHandle:
 131 0000 00000000 		.space	4
 132              		.global	safetyHandle
 133              		.section	.bss.safetyHandle,"aw",%nobits
 134              		.align	2
 137              	safetyHandle:
 138 0000 00000000 		.space	4
 139              		.section	.rodata
 140 0017 00       		.align	2
 141              	.LC4:
 142 0018 00000000 		.word	.LC0
 143 001c 00000000 		.word	startMediumFrequencyTask
 144 0020 0000     		.short	0
 145 0022 0000     		.space	2
 146 0024 00000000 		.word	0
 147 0028 80000000 		.word	128
 148 002c 00000000 		.word	0
 149 0030 00000000 		.word	0
 150              		.align	2
 151              	.LC5:
 152 0034 10000000 		.word	.LC2
 153 0038 00000000 		.word	StartSafetyTask
 154 003c 0100     		.short	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 4


 155 003e 0000     		.space	2
 156 0040 00000000 		.word	0
 157 0044 80000000 		.word	128
 158 0048 00000000 		.word	0
 159 004c 00000000 		.word	0
 160              		.section	.text.main,"ax",%progbits
 161              		.align	1
 162              		.global	main
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 167              	main:
 168              	.LFB1095:
 169              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2024 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "cmsis_os.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  24:Src/main.c    **** /* USER CODE BEGIN Includes */
  25:Src/main.c    **** 
  26:Src/main.c    **** /* USER CODE END Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  29:Src/main.c    **** /* USER CODE BEGIN PTD */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* USER CODE END PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  34:Src/main.c    **** /* USER CODE BEGIN PD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* USER CODE END PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PM */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 5


  44:Src/main.c    **** ADC_HandleTypeDef hadc1;
  45:Src/main.c    **** ADC_HandleTypeDef hadc2;
  46:Src/main.c    **** DMA_HandleTypeDef hdma_adc2;
  47:Src/main.c    **** 
  48:Src/main.c    **** TIM_HandleTypeDef htim1;
  49:Src/main.c    **** TIM_HandleTypeDef htim3;
  50:Src/main.c    **** TIM_HandleTypeDef htim4;
  51:Src/main.c    **** 
  52:Src/main.c    **** UART_HandleTypeDef huart2;
  53:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_rx;
  54:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_tx;
  55:Src/main.c    **** 
  56:Src/main.c    **** osThreadId mediumFrequencyHandle;
  57:Src/main.c    **** osThreadId safetyHandle;
  58:Src/main.c    **** /* USER CODE BEGIN PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  63:Src/main.c    **** void SystemClock_Config(void);
  64:Src/main.c    **** static void MX_GPIO_Init(void);
  65:Src/main.c    **** static void MX_DMA_Init(void);
  66:Src/main.c    **** static void MX_ADC1_Init(void);
  67:Src/main.c    **** static void MX_TIM1_Init(void);
  68:Src/main.c    **** static void MX_TIM3_Init(void);
  69:Src/main.c    **** static void MX_USART2_UART_Init(void);
  70:Src/main.c    **** static void MX_ADC2_Init(void);
  71:Src/main.c    **** static void MX_TIM4_Init(void);
  72:Src/main.c    **** void startMediumFrequencyTask(void const * argument);
  73:Src/main.c    **** extern void StartSafetyTask(void const * argument);
  74:Src/main.c    **** static void MX_ADC2_Calibration(void);
  75:Src/main.c    **** 
  76:Src/main.c    **** static void MX_NVIC_Init(void);
  77:Src/main.c    **** 
  78:Src/main.c    **** // Inclure les définitions nécessaires
  79:Src/main.c    **** 
  80:Src/main.c    **** 
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE BEGIN PFP */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END PFP */
  85:Src/main.c    **** 
  86:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  87:Src/main.c    **** /* USER CODE BEGIN 0 */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END 0 */
  90:Src/main.c    **** 
  91:Src/main.c    **** /**
  92:Src/main.c    ****   * @brief  The application entry point.
  93:Src/main.c    ****   * @retval int
  94:Src/main.c    ****   */
  95:Src/main.c    **** int main(void)
  96:Src/main.c    **** {
 170              		.loc 1 96 1
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 56
 173              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 6


 174 0000 B0B5     		push	{r4, r5, r7, lr}
 175              	.LCFI0:
 176              		.cfi_def_cfa_offset 16
 177              		.cfi_offset 4, -16
 178              		.cfi_offset 5, -12
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 8EB0     		sub	sp, sp, #56
 182              	.LCFI1:
 183              		.cfi_def_cfa_offset 72
 184 0004 00AF     		add	r7, sp, #0
 185              	.LCFI2:
 186              		.cfi_def_cfa_register 7
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE BEGIN 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE END 1 */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:Src/main.c    ****   HAL_Init();
 187              		.loc 1 105 3
 188 0006 FFF7FEFF 		bl	HAL_Init
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE BEGIN Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE END Init */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* Configure the system clock */
 112:Src/main.c    ****   SystemClock_Config();
 189              		.loc 1 112 3
 190 000a FFF7FEFF 		bl	SystemClock_Config
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE END SysInit */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* Initialize all configured peripherals */
 119:Src/main.c    ****   MX_GPIO_Init();
 191              		.loc 1 119 3
 192 000e FFF7FEFF 		bl	MX_GPIO_Init
 120:Src/main.c    ****   MX_DMA_Init();
 193              		.loc 1 120 3
 194 0012 FFF7FEFF 		bl	MX_DMA_Init
 121:Src/main.c    ****   MX_ADC1_Init();
 195              		.loc 1 121 3
 196 0016 FFF7FEFF 		bl	MX_ADC1_Init
 122:Src/main.c    ****   MX_TIM1_Init();
 197              		.loc 1 122 3
 198 001a FFF7FEFF 		bl	MX_TIM1_Init
 123:Src/main.c    ****   MX_TIM3_Init();
 199              		.loc 1 123 3
 200 001e FFF7FEFF 		bl	MX_TIM3_Init
 124:Src/main.c    ****   MX_USART2_UART_Init();
 201              		.loc 1 124 3
 202 0022 FFF7FEFF 		bl	MX_USART2_UART_Init
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 7


 125:Src/main.c    ****   MX_MotorControl_Init();
 203              		.loc 1 125 3
 204 0026 FFF7FEFF 		bl	MX_MotorControl_Init
 126:Src/main.c    ****   //Read_VREF();
 127:Src/main.c    ****   MX_ADC2_Init();
 205              		.loc 1 127 3
 206 002a FFF7FEFF 		bl	MX_ADC2_Init
 128:Src/main.c    ****   MX_TIM4_Init();
 207              		.loc 1 128 3
 208 002e FFF7FEFF 		bl	MX_TIM4_Init
 129:Src/main.c    **** 
 130:Src/main.c    ****   MX_ADC2_Calibration();
 209              		.loc 1 130 3
 210 0032 FFF7FEFF 		bl	MX_ADC2_Calibration
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* Initialize interrupts */
 133:Src/main.c    ****   MX_NVIC_Init();
 211              		.loc 1 133 3
 212 0036 FFF7FEFF 		bl	MX_NVIC_Init
 134:Src/main.c    ****   /* USER CODE BEGIN 2 */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE END 2 */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 139:Src/main.c    ****   /* add mutexes, ... */
 140:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 143:Src/main.c    ****   /* add semaphores, ... */
 144:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 145:Src/main.c    **** 
 146:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 147:Src/main.c    ****   /* start timers, add new ones, ... */
 148:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 151:Src/main.c    ****   /* add queues, ... */
 152:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Create the thread(s) */
 155:Src/main.c    ****   /* definition and creation of mediumFrequency */
 156:Src/main.c    ****   osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 213              		.loc 1 156 3
 214 003a 134B     		ldr	r3, .L3
 215 003c 07F11C04 		add	r4, r7, #28
 216 0040 1D46     		mov	r5, r3
 217 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 218 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 219 0046 95E80700 		ldm	r5, {r0, r1, r2}
 220 004a 84E80700 		stm	r4, {r0, r1, r2}
 157:Src/main.c    ****   mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 221              		.loc 1 157 27
 222 004e 07F11C03 		add	r3, r7, #28
 223 0052 0021     		movs	r1, #0
 224 0054 1846     		mov	r0, r3
 225 0056 FFF7FEFF 		bl	osThreadCreate
 226 005a 0346     		mov	r3, r0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 8


 227              		.loc 1 157 25
 228 005c 0B4A     		ldr	r2, .L3+4
 229 005e 1360     		str	r3, [r2]
 158:Src/main.c    **** 
 159:Src/main.c    ****   /* definition and creation of safety */
 160:Src/main.c    ****   osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 230              		.loc 1 160 3
 231 0060 0B4B     		ldr	r3, .L3+8
 232 0062 3C46     		mov	r4, r7
 233 0064 1D46     		mov	r5, r3
 234 0066 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 235 0068 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 236 006a 95E80700 		ldm	r5, {r0, r1, r2}
 237 006e 84E80700 		stm	r4, {r0, r1, r2}
 161:Src/main.c    ****   safetyHandle = osThreadCreate(osThread(safety), NULL);
 238              		.loc 1 161 18
 239 0072 3B46     		mov	r3, r7
 240 0074 0021     		movs	r1, #0
 241 0076 1846     		mov	r0, r3
 242 0078 FFF7FEFF 		bl	osThreadCreate
 243 007c 0346     		mov	r3, r0
 244              		.loc 1 161 16
 245 007e 054A     		ldr	r2, .L3+12
 246 0080 1360     		str	r3, [r2]
 162:Src/main.c    **** 
 163:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 164:Src/main.c    ****   /* add threads, ... */
 165:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* Start scheduler */
 168:Src/main.c    ****   osKernelStart();
 247              		.loc 1 168 3
 248 0082 FFF7FEFF 		bl	osKernelStart
 249              	.L2:
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 171:Src/main.c    **** 
 172:Src/main.c    ****   /* Infinite loop */
 173:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 174:Src/main.c    ****   while (1)
 250              		.loc 1 174 9 discriminator 1
 251 0086 FEE7     		b	.L2
 252              	.L4:
 253              		.align	2
 254              	.L3:
 255 0088 18000000 		.word	.LC4
 256 008c 00000000 		.word	mediumFrequencyHandle
 257 0090 34000000 		.word	.LC5
 258 0094 00000000 		.word	safetyHandle
 259              		.cfi_endproc
 260              	.LFE1095:
 262              		.section	.text.SystemClock_Config,"ax",%progbits
 263              		.align	1
 264              		.global	SystemClock_Config
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 9


 269              	SystemClock_Config:
 270              	.LFB1096:
 175:Src/main.c    ****   {
 176:Src/main.c    ****     /* USER CODE END WHILE */
 177:Src/main.c    **** 
 178:Src/main.c    ****     /* USER CODE BEGIN 3 */
 179:Src/main.c    ****   }
 180:Src/main.c    ****   /* USER CODE END 3 */
 181:Src/main.c    **** }
 182:Src/main.c    **** 
 183:Src/main.c    **** /**
 184:Src/main.c    ****   * @brief System Clock Configuration
 185:Src/main.c    ****   * @retval None
 186:Src/main.c    ****   */
 187:Src/main.c    **** void SystemClock_Config(void)
 188:Src/main.c    **** {
 271              		.loc 1 188 1
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 88
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0000 80B5     		push	{r7, lr}
 276              	.LCFI3:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 96B0     		sub	sp, sp, #88
 281              	.LCFI4:
 282              		.cfi_def_cfa_offset 96
 283 0004 00AF     		add	r7, sp, #0
 284              	.LCFI5:
 285              		.cfi_def_cfa_register 7
 189:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 286              		.loc 1 189 22
 287 0006 07F11403 		add	r3, r7, #20
 288 000a 4422     		movs	r2, #68
 289 000c 0021     		movs	r1, #0
 290 000e 1846     		mov	r0, r3
 291 0010 FFF7FEFF 		bl	memset
 190:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 292              		.loc 1 190 22
 293 0014 3B46     		mov	r3, r7
 294 0016 0022     		movs	r2, #0
 295 0018 1A60     		str	r2, [r3]
 296 001a 5A60     		str	r2, [r3, #4]
 297 001c 9A60     		str	r2, [r3, #8]
 298 001e DA60     		str	r2, [r3, #12]
 299 0020 1A61     		str	r2, [r3, #16]
 191:Src/main.c    **** 
 192:Src/main.c    ****   /** Configure the main internal regulator output voltage
 193:Src/main.c    ****   */
 194:Src/main.c    ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 300              		.loc 1 194 7
 301 0022 4FF40070 		mov	r0, #512
 302 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 303 002a 0346     		mov	r3, r0
 304              		.loc 1 194 6
 305 002c 002B     		cmp	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 10


 306 002e 01D0     		beq	.L6
 195:Src/main.c    ****   {
 196:Src/main.c    ****     Error_Handler();
 307              		.loc 1 196 5
 308 0030 FFF7FEFF 		bl	Error_Handler
 309              	.L6:
 197:Src/main.c    ****   }
 198:Src/main.c    **** 
 199:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 200:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 201:Src/main.c    ****   */
 202:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 310              		.loc 1 202 36
 311 0034 0223     		movs	r3, #2
 312 0036 7B61     		str	r3, [r7, #20]
 203:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 313              		.loc 1 203 30
 314 0038 4FF48073 		mov	r3, #256
 315 003c 3B62     		str	r3, [r7, #32]
 204:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 316              		.loc 1 204 41
 317 003e 1023     		movs	r3, #16
 318 0040 7B62     		str	r3, [r7, #36]
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 319              		.loc 1 205 34
 320 0042 0223     		movs	r3, #2
 321 0044 FB63     		str	r3, [r7, #60]
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 322              		.loc 1 206 35
 323 0046 0223     		movs	r3, #2
 324 0048 3B64     		str	r3, [r7, #64]
 207:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 2;
 325              		.loc 1 207 30
 326 004a 0223     		movs	r3, #2
 327 004c 7B64     		str	r3, [r7, #68]
 208:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 20;
 328              		.loc 1 208 30
 329 004e 1423     		movs	r3, #20
 330 0050 BB64     		str	r3, [r7, #72]
 209:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 331              		.loc 1 209 30
 332 0052 0723     		movs	r3, #7
 333 0054 FB64     		str	r3, [r7, #76]
 210:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 334              		.loc 1 210 30
 335 0056 0223     		movs	r3, #2
 336 0058 3B65     		str	r3, [r7, #80]
 211:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 337              		.loc 1 211 30
 338 005a 0223     		movs	r3, #2
 339 005c 7B65     		str	r3, [r7, #84]
 212:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 340              		.loc 1 212 7
 341 005e 07F11403 		add	r3, r7, #20
 342 0062 1846     		mov	r0, r3
 343 0064 FFF7FEFF 		bl	HAL_RCC_OscConfig
 344 0068 0346     		mov	r3, r0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 11


 345              		.loc 1 212 6
 346 006a 002B     		cmp	r3, #0
 347 006c 01D0     		beq	.L7
 213:Src/main.c    ****   {
 214:Src/main.c    ****     Error_Handler();
 348              		.loc 1 214 5
 349 006e FFF7FEFF 		bl	Error_Handler
 350              	.L7:
 215:Src/main.c    ****   }
 216:Src/main.c    **** 
 217:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 218:Src/main.c    ****   */
 219:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 351              		.loc 1 219 31
 352 0072 0F23     		movs	r3, #15
 353 0074 3B60     		str	r3, [r7]
 220:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 221:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 354              		.loc 1 221 34
 355 0076 0323     		movs	r3, #3
 356 0078 7B60     		str	r3, [r7, #4]
 222:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 357              		.loc 1 222 35
 358 007a 0023     		movs	r3, #0
 359 007c BB60     		str	r3, [r7, #8]
 223:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 360              		.loc 1 223 36
 361 007e 0023     		movs	r3, #0
 362 0080 FB60     		str	r3, [r7, #12]
 224:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 363              		.loc 1 224 36
 364 0082 0023     		movs	r3, #0
 365 0084 3B61     		str	r3, [r7, #16]
 225:Src/main.c    **** 
 226:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 366              		.loc 1 226 7
 367 0086 3B46     		mov	r3, r7
 368 0088 0421     		movs	r1, #4
 369 008a 1846     		mov	r0, r3
 370 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 371 0090 0346     		mov	r3, r0
 372              		.loc 1 226 6
 373 0092 002B     		cmp	r3, #0
 374 0094 01D0     		beq	.L9
 227:Src/main.c    ****   {
 228:Src/main.c    ****     Error_Handler();
 375              		.loc 1 228 5
 376 0096 FFF7FEFF 		bl	Error_Handler
 377              	.L9:
 229:Src/main.c    ****   }
 230:Src/main.c    **** }
 378              		.loc 1 230 1
 379 009a 00BF     		nop
 380 009c 5837     		adds	r7, r7, #88
 381              	.LCFI6:
 382              		.cfi_def_cfa_offset 8
 383 009e BD46     		mov	sp, r7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 12


 384              	.LCFI7:
 385              		.cfi_def_cfa_register 13
 386              		@ sp needed
 387 00a0 80BD     		pop	{r7, pc}
 388              		.cfi_endproc
 389              	.LFE1096:
 391              		.section	.text.MX_NVIC_Init,"ax",%progbits
 392              		.align	1
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	MX_NVIC_Init:
 398              	.LFB1097:
 231:Src/main.c    **** 
 232:Src/main.c    **** /**
 233:Src/main.c    ****   * @brief NVIC Configuration.
 234:Src/main.c    ****   * @retval None
 235:Src/main.c    ****   */
 236:Src/main.c    **** static void MX_NVIC_Init(void)
 237:Src/main.c    **** {
 399              		.loc 1 237 1
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 1, uses_anonymous_args = 0
 403 0000 80B5     		push	{r7, lr}
 404              	.LCFI8:
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 00AF     		add	r7, sp, #0
 409              	.LCFI9:
 410              		.cfi_def_cfa_register 7
 238:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
 239:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 411              		.loc 1 239 3
 412 0004 0022     		movs	r2, #0
 413 0006 0321     		movs	r1, #3
 414 0008 2620     		movs	r0, #38
 415 000a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 240:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 416              		.loc 1 240 3
 417 000e 2620     		movs	r0, #38
 418 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 241:Src/main.c    ****   /* DMA1_Channel6_IRQn interrupt configuration */
 242:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 419              		.loc 1 242 3
 420 0014 0022     		movs	r2, #0
 421 0016 0321     		movs	r1, #3
 422 0018 1020     		movs	r0, #16
 423 001a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 243:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 424              		.loc 1 243 3
 425 001e 1020     		movs	r0, #16
 426 0020 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244:Src/main.c    ****   /* TIM1_BRK_TIM15_IRQn interrupt configuration */
 245:Src/main.c    ****   HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 0);
 427              		.loc 1 245 3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 13


 428 0024 0022     		movs	r2, #0
 429 0026 0421     		movs	r1, #4
 430 0028 1820     		movs	r0, #24
 431 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 246:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 432              		.loc 1 246 3
 433 002e 1820     		movs	r0, #24
 434 0030 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 247:Src/main.c    ****   /* TIM1_UP_TIM16_IRQn interrupt configuration */
 248:Src/main.c    ****   HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 435              		.loc 1 248 3
 436 0034 0022     		movs	r2, #0
 437 0036 0021     		movs	r1, #0
 438 0038 1920     		movs	r0, #25
 439 003a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 249:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 440              		.loc 1 249 3
 441 003e 1920     		movs	r0, #25
 442 0040 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 250:Src/main.c    ****   /* ADC1_2_IRQn interrupt configuration */
 251:Src/main.c    ****   HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 443              		.loc 1 251 3
 444 0044 0022     		movs	r2, #0
 445 0046 0221     		movs	r1, #2
 446 0048 1220     		movs	r0, #18
 447 004a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 252:Src/main.c    ****   HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 448              		.loc 1 252 3
 449 004e 1220     		movs	r0, #18
 450 0050 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 253:Src/main.c    ****   /* TIM3_IRQn interrupt configuration */
 254:Src/main.c    ****   HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 451              		.loc 1 254 3
 452 0054 0022     		movs	r2, #0
 453 0056 0321     		movs	r1, #3
 454 0058 1D20     		movs	r0, #29
 455 005a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 255:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 456              		.loc 1 255 3
 457 005e 1D20     		movs	r0, #29
 458 0060 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 256:Src/main.c    ****   /* EXTI15_10_IRQn interrupt configuration */
 257:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 459              		.loc 1 257 3
 460 0064 0022     		movs	r2, #0
 461 0066 0321     		movs	r1, #3
 462 0068 2820     		movs	r0, #40
 463 006a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 258:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 464              		.loc 1 258 3
 465 006e 2820     		movs	r0, #40
 466 0070 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 259:Src/main.c    **** }
 467              		.loc 1 259 1
 468 0074 00BF     		nop
 469 0076 80BD     		pop	{r7, pc}
 470              		.cfi_endproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 14


 471              	.LFE1097:
 473              		.section	.text.MX_ADC1_Init,"ax",%progbits
 474              		.align	1
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 479              	MX_ADC1_Init:
 480              	.LFB1098:
 260:Src/main.c    **** 
 261:Src/main.c    **** /**
 262:Src/main.c    ****   * @brief ADC1 Initialization Function
 263:Src/main.c    ****   * @param None
 264:Src/main.c    ****   * @retval None
 265:Src/main.c    ****   */
 266:Src/main.c    **** static void MX_ADC1_Init(void)
 267:Src/main.c    **** {
 481              		.loc 1 267 1
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 88
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 80B5     		push	{r7, lr}
 486              	.LCFI10:
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0002 96B0     		sub	sp, sp, #88
 491              	.LCFI11:
 492              		.cfi_def_cfa_offset 96
 493 0004 00AF     		add	r7, sp, #0
 494              	.LCFI12:
 495              		.cfi_def_cfa_register 7
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 270:Src/main.c    **** 
 271:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 272:Src/main.c    **** 
 273:Src/main.c    ****   ADC_MultiModeTypeDef multimode = {0};
 496              		.loc 1 273 24
 497 0006 07F14C03 		add	r3, r7, #76
 498 000a 0022     		movs	r2, #0
 499 000c 1A60     		str	r2, [r3]
 500 000e 5A60     		str	r2, [r3, #4]
 501 0010 9A60     		str	r2, [r3, #8]
 274:Src/main.c    ****   ADC_InjectionConfTypeDef sConfigInjected = {0};
 502              		.loc 1 274 28
 503 0012 07F11803 		add	r3, r7, #24
 504 0016 3422     		movs	r2, #52
 505 0018 0021     		movs	r1, #0
 506 001a 1846     		mov	r0, r3
 507 001c FFF7FEFF 		bl	memset
 275:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 508              		.loc 1 275 26
 509 0020 3B46     		mov	r3, r7
 510 0022 0022     		movs	r2, #0
 511 0024 1A60     		str	r2, [r3]
 512 0026 5A60     		str	r2, [r3, #4]
 513 0028 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 15


 514 002a DA60     		str	r2, [r3, #12]
 515 002c 1A61     		str	r2, [r3, #16]
 516 002e 5A61     		str	r2, [r3, #20]
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 278:Src/main.c    **** 
 279:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 280:Src/main.c    **** 
 281:Src/main.c    ****   /** Common config
 282:Src/main.c    ****   */
 283:Src/main.c    ****   hadc1.Instance = ADC1;
 517              		.loc 1 283 18
 518 0030 5C4B     		ldr	r3, .L20
 519 0032 5D4A     		ldr	r2, .L20+4
 520 0034 1A60     		str	r2, [r3]
 284:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 521              		.loc 1 284 29
 522 0036 5B4B     		ldr	r3, .L20
 523 0038 0022     		movs	r2, #0
 524 003a 5A60     		str	r2, [r3, #4]
 285:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 525              		.loc 1 285 25
 526 003c 594B     		ldr	r3, .L20
 527 003e 0022     		movs	r2, #0
 528 0040 9A60     		str	r2, [r3, #8]
 286:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 529              		.loc 1 286 24
 530 0042 584B     		ldr	r3, .L20
 531 0044 2022     		movs	r2, #32
 532 0046 DA60     		str	r2, [r3, #12]
 287:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 533              		.loc 1 287 27
 534 0048 564B     		ldr	r3, .L20
 535 004a 0122     		movs	r2, #1
 536 004c 1A61     		str	r2, [r3, #16]
 288:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 537              		.loc 1 288 27
 538 004e 554B     		ldr	r3, .L20
 539 0050 0422     		movs	r2, #4
 540 0052 5A61     		str	r2, [r3, #20]
 289:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 541              		.loc 1 289 31
 542 0054 534B     		ldr	r3, .L20
 543 0056 0022     		movs	r2, #0
 544 0058 1A76     		strb	r2, [r3, #24]
 290:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 545              		.loc 1 290 33
 546 005a 524B     		ldr	r3, .L20
 547 005c 0022     		movs	r2, #0
 548 005e 5A76     		strb	r2, [r3, #25]
 291:Src/main.c    ****   hadc1.Init.NbrOfConversion = 2;
 549              		.loc 1 291 30
 550 0060 504B     		ldr	r3, .L20
 551 0062 0222     		movs	r2, #2
 552 0064 DA61     		str	r2, [r3, #28]
 292:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 553              		.loc 1 292 36
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 16


 554 0066 4F4B     		ldr	r3, .L20
 555 0068 0022     		movs	r2, #0
 556 006a 83F82020 		strb	r2, [r3, #32]
 293:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 557              		.loc 1 293 31
 558 006e 4D4B     		ldr	r3, .L20
 559 0070 0022     		movs	r2, #0
 560 0072 9A62     		str	r2, [r3, #40]
 294:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 561              		.loc 1 294 35
 562 0074 4B4B     		ldr	r3, .L20
 563 0076 0022     		movs	r2, #0
 564 0078 DA62     		str	r2, [r3, #44]
 295:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 565              		.loc 1 295 36
 566 007a 4A4B     		ldr	r3, .L20
 567 007c 0022     		movs	r2, #0
 568 007e 83F83020 		strb	r2, [r3, #48]
 296:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 569              		.loc 1 296 22
 570 0082 484B     		ldr	r3, .L20
 571 0084 0022     		movs	r2, #0
 572 0086 5A63     		str	r2, [r3, #52]
 297:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 573              		.loc 1 297 31
 574 0088 464B     		ldr	r3, .L20
 575 008a 0022     		movs	r2, #0
 576 008c 83F83820 		strb	r2, [r3, #56]
 298:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 577              		.loc 1 298 7
 578 0090 4448     		ldr	r0, .L20
 579 0092 FFF7FEFF 		bl	HAL_ADC_Init
 580 0096 0346     		mov	r3, r0
 581              		.loc 1 298 6
 582 0098 002B     		cmp	r3, #0
 583 009a 01D0     		beq	.L12
 299:Src/main.c    ****   {
 300:Src/main.c    ****     Error_Handler();
 584              		.loc 1 300 5
 585 009c FFF7FEFF 		bl	Error_Handler
 586              	.L12:
 301:Src/main.c    ****   }
 302:Src/main.c    **** 
 303:Src/main.c    ****   /** Configure the ADC multi-mode
 304:Src/main.c    ****   */
 305:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 587              		.loc 1 305 18
 588 00a0 0023     		movs	r3, #0
 589 00a2 FB64     		str	r3, [r7, #76]
 306:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 590              		.loc 1 306 7
 591 00a4 07F14C03 		add	r3, r7, #76
 592 00a8 1946     		mov	r1, r3
 593 00aa 3E48     		ldr	r0, .L20
 594 00ac FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 595 00b0 0346     		mov	r3, r0
 596              		.loc 1 306 6
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 17


 597 00b2 002B     		cmp	r3, #0
 598 00b4 01D0     		beq	.L13
 307:Src/main.c    ****   {
 308:Src/main.c    ****     Error_Handler();
 599              		.loc 1 308 5
 600 00b6 FFF7FEFF 		bl	Error_Handler
 601              	.L13:
 309:Src/main.c    ****   }
 310:Src/main.c    **** 
 311:Src/main.c    ****   /** Disable Injected Queue
 312:Src/main.c    ****   */
 313:Src/main.c    ****   HAL_ADCEx_DisableInjectedQueue(&hadc1);
 602              		.loc 1 313 3
 603 00ba 3A48     		ldr	r0, .L20
 604 00bc FFF7FEFF 		bl	HAL_ADCEx_DisableInjectedQueue
 314:Src/main.c    **** 
 315:Src/main.c    ****   /** Configure Injected Channel
 316:Src/main.c    ****   */
 317:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 605              		.loc 1 317 35
 606 00c0 3A4B     		ldr	r3, .L20+8
 607 00c2 BB61     		str	r3, [r7, #24]
 318:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 608              		.loc 1 318 32
 609 00c4 0823     		movs	r3, #8
 610 00c6 FB61     		str	r3, [r7, #28]
 319:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 611              		.loc 1 319 40
 612 00c8 0223     		movs	r3, #2
 613 00ca 3B62     		str	r3, [r7, #32]
 320:Src/main.c    ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 614              		.loc 1 320 38
 615 00cc 7F23     		movs	r3, #127
 616 00ce 7B62     		str	r3, [r7, #36]
 321:Src/main.c    ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 617              		.loc 1 321 40
 618 00d0 0423     		movs	r3, #4
 619 00d2 BB62     		str	r3, [r7, #40]
 322:Src/main.c    ****   sConfigInjected.InjectedOffset = 0;
 620              		.loc 1 322 34
 621 00d4 0023     		movs	r3, #0
 622 00d6 FB62     		str	r3, [r7, #44]
 323:Src/main.c    ****   sConfigInjected.InjectedNbrOfConversion = 3;
 623              		.loc 1 323 43
 624 00d8 0323     		movs	r3, #3
 625 00da 3B63     		str	r3, [r7, #48]
 324:Src/main.c    ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 626              		.loc 1 324 49
 627 00dc 0023     		movs	r3, #0
 628 00de 87F83430 		strb	r3, [r7, #52]
 325:Src/main.c    ****   sConfigInjected.AutoInjectedConv = DISABLE;
 629              		.loc 1 325 36
 630 00e2 0023     		movs	r3, #0
 631 00e4 87F83530 		strb	r3, [r7, #53]
 326:Src/main.c    ****   sConfigInjected.QueueInjectedContext = DISABLE;
 632              		.loc 1 326 40
 633 00e8 0023     		movs	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 18


 634 00ea 87F83630 		strb	r3, [r7, #54]
 327:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 635              		.loc 1 327 41
 636 00ee 4023     		movs	r3, #64
 637 00f0 BB63     		str	r3, [r7, #56]
 328:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 638              		.loc 1 328 45
 639 00f2 4023     		movs	r3, #64
 640 00f4 FB63     		str	r3, [r7, #60]
 329:Src/main.c    ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 641              		.loc 1 329 41
 642 00f6 0023     		movs	r3, #0
 643 00f8 87F84030 		strb	r3, [r7, #64]
 330:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 644              		.loc 1 330 7
 645 00fc 07F11803 		add	r3, r7, #24
 646 0100 1946     		mov	r1, r3
 647 0102 2848     		ldr	r0, .L20
 648 0104 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 649 0108 0346     		mov	r3, r0
 650              		.loc 1 330 6
 651 010a 002B     		cmp	r3, #0
 652 010c 01D0     		beq	.L14
 331:Src/main.c    ****   {
 332:Src/main.c    ****     Error_Handler();
 653              		.loc 1 332 5
 654 010e FFF7FEFF 		bl	Error_Handler
 655              	.L14:
 333:Src/main.c    ****   }
 334:Src/main.c    **** 
 335:Src/main.c    ****   /** Configure Injected Channel
 336:Src/main.c    ****   */
 337:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_16;
 656              		.loc 1 337 35
 657 0112 274B     		ldr	r3, .L20+12
 658 0114 BB61     		str	r3, [r7, #24]
 338:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 659              		.loc 1 338 32
 660 0116 4FF48773 		mov	r3, #270
 661 011a FB61     		str	r3, [r7, #28]
 339:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 662              		.loc 1 339 7
 663 011c 07F11803 		add	r3, r7, #24
 664 0120 1946     		mov	r1, r3
 665 0122 2048     		ldr	r0, .L20
 666 0124 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 667 0128 0346     		mov	r3, r0
 668              		.loc 1 339 6
 669 012a 002B     		cmp	r3, #0
 670 012c 01D0     		beq	.L15
 340:Src/main.c    ****   {
 341:Src/main.c    ****     Error_Handler();
 671              		.loc 1 341 5
 672 012e FFF7FEFF 		bl	Error_Handler
 673              	.L15:
 342:Src/main.c    ****   }
 343:Src/main.c    **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 19


 344:Src/main.c    ****   /** Configure Injected Channel
 345:Src/main.c    ****   */
 346:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 674              		.loc 1 346 35
 675 0132 204B     		ldr	r3, .L20+16
 676 0134 BB61     		str	r3, [r7, #24]
 347:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 677              		.loc 1 347 32
 678 0136 4FF40573 		mov	r3, #532
 679 013a FB61     		str	r3, [r7, #28]
 348:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 680              		.loc 1 348 7
 681 013c 07F11803 		add	r3, r7, #24
 682 0140 1946     		mov	r1, r3
 683 0142 1848     		ldr	r0, .L20
 684 0144 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 685 0148 0346     		mov	r3, r0
 686              		.loc 1 348 6
 687 014a 002B     		cmp	r3, #0
 688 014c 01D0     		beq	.L16
 349:Src/main.c    ****   {
 350:Src/main.c    ****     Error_Handler();
 689              		.loc 1 350 5
 690 014e FFF7FEFF 		bl	Error_Handler
 691              	.L16:
 351:Src/main.c    ****   }
 352:Src/main.c    **** 
 353:Src/main.c    ****   /** Configure Regular Channel
 354:Src/main.c    ****   */
 355:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 692              		.loc 1 355 19
 693 0152 194B     		ldr	r3, .L20+20
 694 0154 3B60     		str	r3, [r7]
 356:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 695              		.loc 1 356 16
 696 0156 0623     		movs	r3, #6
 697 0158 7B60     		str	r3, [r7, #4]
 357:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 698              		.loc 1 357 24
 699 015a 0523     		movs	r3, #5
 700 015c BB60     		str	r3, [r7, #8]
 358:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 701              		.loc 1 358 22
 702 015e 7F23     		movs	r3, #127
 703 0160 FB60     		str	r3, [r7, #12]
 359:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 704              		.loc 1 359 24
 705 0162 0423     		movs	r3, #4
 706 0164 3B61     		str	r3, [r7, #16]
 360:Src/main.c    ****   sConfig.Offset = 0;
 707              		.loc 1 360 18
 708 0166 0023     		movs	r3, #0
 709 0168 7B61     		str	r3, [r7, #20]
 361:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 710              		.loc 1 361 7
 711 016a 3B46     		mov	r3, r7
 712 016c 1946     		mov	r1, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 20


 713 016e 0D48     		ldr	r0, .L20
 714 0170 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 715 0174 0346     		mov	r3, r0
 716              		.loc 1 361 6
 717 0176 002B     		cmp	r3, #0
 718 0178 01D0     		beq	.L17
 362:Src/main.c    ****   {
 363:Src/main.c    ****     Error_Handler();
 719              		.loc 1 363 5
 720 017a FFF7FEFF 		bl	Error_Handler
 721              	.L17:
 364:Src/main.c    ****   }
 365:Src/main.c    **** 
 366:Src/main.c    ****   /** Configure Regular Channel
 367:Src/main.c    ****   */
 368:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_13;
 722              		.loc 1 368 19
 723 017e 0F4B     		ldr	r3, .L20+24
 724 0180 3B60     		str	r3, [r7]
 369:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 725              		.loc 1 369 16
 726 0182 0C23     		movs	r3, #12
 727 0184 7B60     		str	r3, [r7, #4]
 370:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 728              		.loc 1 370 7
 729 0186 3B46     		mov	r3, r7
 730 0188 1946     		mov	r1, r3
 731 018a 0648     		ldr	r0, .L20
 732 018c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 733 0190 0346     		mov	r3, r0
 734              		.loc 1 370 6
 735 0192 002B     		cmp	r3, #0
 736 0194 01D0     		beq	.L19
 371:Src/main.c    ****   {
 372:Src/main.c    ****     Error_Handler();
 737              		.loc 1 372 5
 738 0196 FFF7FEFF 		bl	Error_Handler
 739              	.L19:
 373:Src/main.c    ****   }
 374:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 375:Src/main.c    **** 
 376:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 377:Src/main.c    **** 
 378:Src/main.c    **** }
 740              		.loc 1 378 1
 741 019a 00BF     		nop
 742 019c 5837     		adds	r7, r7, #88
 743              	.LCFI13:
 744              		.cfi_def_cfa_offset 8
 745 019e BD46     		mov	sp, r7
 746              	.LCFI14:
 747              		.cfi_def_cfa_register 13
 748              		@ sp needed
 749 01a0 80BD     		pop	{r7, pc}
 750              	.L21:
 751 01a2 00BF     		.align	2
 752              	.L20:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 21


 753 01a4 00000000 		.word	hadc1
 754 01a8 00000450 		.word	1342439424
 755 01ac 40002019 		.word	421527616
 756 01b0 00002143 		.word	1126236160
 757 01b4 0080F03E 		.word	1055948800
 758 01b8 2000F014 		.word	351272992
 759 01bc 00209036 		.word	915415040
 760              		.cfi_endproc
 761              	.LFE1098:
 763              		.section	.text.MX_ADC2_Calibration,"ax",%progbits
 764              		.align	1
 765              		.syntax unified
 766              		.thumb
 767              		.thumb_func
 769              	MX_ADC2_Calibration:
 770              	.LFB1099:
 379:Src/main.c    **** 
 380:Src/main.c    **** static void MX_ADC2_Calibration(void)
 381:Src/main.c    **** {
 771              		.loc 1 381 1
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              	.LCFI15:
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 7, -8
 779              		.cfi_offset 14, -4
 780 0002 00AF     		add	r7, sp, #0
 781              	.LCFI16:
 782              		.cfi_def_cfa_register 7
 382:Src/main.c    ****     // Calibrer l'ADC2 avant de démarrer les conversions
 383:Src/main.c    ****     if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 783              		.loc 1 383 9
 784 0004 7F21     		movs	r1, #127
 785 0006 0548     		ldr	r0, .L25
 786 0008 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 787 000c 0346     		mov	r3, r0
 788              		.loc 1 383 8
 789 000e 002B     		cmp	r3, #0
 790 0010 01D0     		beq	.L24
 384:Src/main.c    ****     {
 385:Src/main.c    ****         // Gestion de l'erreur
 386:Src/main.c    ****         Error_Handler();
 791              		.loc 1 386 9
 792 0012 FFF7FEFF 		bl	Error_Handler
 793              	.L24:
 387:Src/main.c    ****     }
 388:Src/main.c    **** }
 794              		.loc 1 388 1
 795 0016 00BF     		nop
 796 0018 80BD     		pop	{r7, pc}
 797              	.L26:
 798 001a 00BF     		.align	2
 799              	.L25:
 800 001c 00000000 		.word	hadc2
 801              		.cfi_endproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 22


 802              	.LFE1099:
 804              		.section	.text.MX_ADC2_Init,"ax",%progbits
 805              		.align	1
 806              		.syntax unified
 807              		.thumb
 808              		.thumb_func
 810              	MX_ADC2_Init:
 811              	.LFB1100:
 389:Src/main.c    **** 
 390:Src/main.c    **** /**
 391:Src/main.c    ****   * @brief ADC2 Initialization Function
 392:Src/main.c    ****   * @param None
 393:Src/main.c    ****   * @retval None
 394:Src/main.c    ****   */
 395:Src/main.c    **** static void MX_ADC2_Init(void)
 396:Src/main.c    **** {
 812              		.loc 1 396 1
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 24
 815              		@ frame_needed = 1, uses_anonymous_args = 0
 816 0000 80B5     		push	{r7, lr}
 817              	.LCFI17:
 818              		.cfi_def_cfa_offset 8
 819              		.cfi_offset 7, -8
 820              		.cfi_offset 14, -4
 821 0002 86B0     		sub	sp, sp, #24
 822              	.LCFI18:
 823              		.cfi_def_cfa_offset 32
 824 0004 00AF     		add	r7, sp, #0
 825              	.LCFI19:
 826              		.cfi_def_cfa_register 7
 397:Src/main.c    **** 
 398:Src/main.c    ****   //static int32_t adcValues[3] = {0};
 399:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 0 */
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* USER CODE END ADC2_Init 0 */
 402:Src/main.c    **** 
 403:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 827              		.loc 1 403 26
 828 0006 3B46     		mov	r3, r7
 829 0008 0022     		movs	r2, #0
 830 000a 1A60     		str	r2, [r3]
 831 000c 5A60     		str	r2, [r3, #4]
 832 000e 9A60     		str	r2, [r3, #8]
 833 0010 DA60     		str	r2, [r3, #12]
 834 0012 1A61     		str	r2, [r3, #16]
 835 0014 5A61     		str	r2, [r3, #20]
 404:Src/main.c    **** 
 405:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 1 */
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* USER CODE END ADC2_Init 1 */
 408:Src/main.c    **** 
 409:Src/main.c    ****   /** Common config
 410:Src/main.c    ****   */
 411:Src/main.c    ****   hadc2.Instance = ADC2;
 836              		.loc 1 411 18
 837 0016 3B4B     		ldr	r3, .L34
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 23


 838 0018 3B4A     		ldr	r2, .L34+4
 839 001a 1A60     		str	r2, [r3]
 412:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 840              		.loc 1 412 29
 841 001c 394B     		ldr	r3, .L34
 842 001e 0022     		movs	r2, #0
 843 0020 5A60     		str	r2, [r3, #4]
 413:Src/main.c    ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 844              		.loc 1 413 25
 845 0022 384B     		ldr	r3, .L34
 846 0024 0022     		movs	r2, #0
 847 0026 9A60     		str	r2, [r3, #8]
 414:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 848              		.loc 1 414 24
 849 0028 364B     		ldr	r3, .L34
 850 002a 0022     		movs	r2, #0
 851 002c DA60     		str	r2, [r3, #12]
 415:Src/main.c    ****   hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 852              		.loc 1 415 27
 853 002e 354B     		ldr	r3, .L34
 854 0030 0122     		movs	r2, #1
 855 0032 1A61     		str	r2, [r3, #16]
 416:Src/main.c    ****   hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 856              		.loc 1 416 27
 857 0034 334B     		ldr	r3, .L34
 858 0036 0822     		movs	r2, #8
 859 0038 5A61     		str	r2, [r3, #20]
 417:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 860              		.loc 1 417 31
 861 003a 324B     		ldr	r3, .L34
 862 003c 0022     		movs	r2, #0
 863 003e 1A76     		strb	r2, [r3, #24]
 418:Src/main.c    ****   hadc2.Init.ContinuousConvMode = DISABLE;
 864              		.loc 1 418 33
 865 0040 304B     		ldr	r3, .L34
 866 0042 0022     		movs	r2, #0
 867 0044 5A76     		strb	r2, [r3, #25]
 419:Src/main.c    ****   hadc2.Init.NbrOfConversion = 3;
 868              		.loc 1 419 30
 869 0046 2F4B     		ldr	r3, .L34
 870 0048 0322     		movs	r2, #3
 871 004a DA61     		str	r2, [r3, #28]
 420:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 872              		.loc 1 420 36
 873 004c 2D4B     		ldr	r3, .L34
 874 004e 0022     		movs	r2, #0
 875 0050 83F82020 		strb	r2, [r3, #32]
 421:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 876              		.loc 1 421 31
 877 0054 2B4B     		ldr	r3, .L34
 878 0056 4FF4E062 		mov	r2, #1792
 879 005a 9A62     		str	r2, [r3, #40]
 422:Src/main.c    ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 880              		.loc 1 422 35
 881 005c 294B     		ldr	r3, .L34
 882 005e 4FF48062 		mov	r2, #1024
 883 0062 DA62     		str	r2, [r3, #44]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 24


 423:Src/main.c    ****   hadc2.Init.DMAContinuousRequests = ENABLE;
 884              		.loc 1 423 36
 885 0064 274B     		ldr	r3, .L34
 886 0066 0122     		movs	r2, #1
 887 0068 83F83020 		strb	r2, [r3, #48]
 424:Src/main.c    ****   hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 888              		.loc 1 424 22
 889 006c 254B     		ldr	r3, .L34
 890 006e 0022     		movs	r2, #0
 891 0070 5A63     		str	r2, [r3, #52]
 425:Src/main.c    ****   hadc2.Init.OversamplingMode = DISABLE;
 892              		.loc 1 425 31
 893 0072 244B     		ldr	r3, .L34
 894 0074 0022     		movs	r2, #0
 895 0076 83F83820 		strb	r2, [r3, #56]
 426:Src/main.c    ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 896              		.loc 1 426 7
 897 007a 2248     		ldr	r0, .L34
 898 007c FFF7FEFF 		bl	HAL_ADC_Init
 899 0080 0346     		mov	r3, r0
 900              		.loc 1 426 6
 901 0082 002B     		cmp	r3, #0
 902 0084 01D0     		beq	.L28
 427:Src/main.c    ****   {
 428:Src/main.c    ****     Error_Handler();
 903              		.loc 1 428 5
 904 0086 FFF7FEFF 		bl	Error_Handler
 905              	.L28:
 429:Src/main.c    ****   }
 430:Src/main.c    **** 
 431:Src/main.c    ****   /** Configure Regular Channel
 432:Src/main.c    ****   */
 433:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 906              		.loc 1 433 19
 907 008a 204B     		ldr	r3, .L34+8
 908 008c 3B60     		str	r3, [r7]
 434:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 909              		.loc 1 434 16
 910 008e 0623     		movs	r3, #6
 911 0090 7B60     		str	r3, [r7, #4]
 435:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 912              		.loc 1 435 24
 913 0092 0023     		movs	r3, #0
 914 0094 BB60     		str	r3, [r7, #8]
 436:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 915              		.loc 1 436 22
 916 0096 7F23     		movs	r3, #127
 917 0098 FB60     		str	r3, [r7, #12]
 437:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 918              		.loc 1 437 24
 919 009a 0423     		movs	r3, #4
 920 009c 3B61     		str	r3, [r7, #16]
 438:Src/main.c    ****   sConfig.Offset = 0;
 921              		.loc 1 438 18
 922 009e 0023     		movs	r3, #0
 923 00a0 7B61     		str	r3, [r7, #20]
 439:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 25


 924              		.loc 1 439 7
 925 00a2 3B46     		mov	r3, r7
 926 00a4 1946     		mov	r1, r3
 927 00a6 1748     		ldr	r0, .L34
 928 00a8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 929 00ac 0346     		mov	r3, r0
 930              		.loc 1 439 6
 931 00ae 002B     		cmp	r3, #0
 932 00b0 01D0     		beq	.L29
 440:Src/main.c    ****   {
 441:Src/main.c    ****     Error_Handler();
 933              		.loc 1 441 5
 934 00b2 FFF7FEFF 		bl	Error_Handler
 935              	.L29:
 442:Src/main.c    ****   }
 443:Src/main.c    **** 
 444:Src/main.c    ****   /** Configure Regular Channel
 445:Src/main.c    ****   */
 446:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 936              		.loc 1 446 16
 937 00b6 0C23     		movs	r3, #12
 938 00b8 7B60     		str	r3, [r7, #4]
 447:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 939              		.loc 1 447 7
 940 00ba 3B46     		mov	r3, r7
 941 00bc 1946     		mov	r1, r3
 942 00be 1148     		ldr	r0, .L34
 943 00c0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 944 00c4 0346     		mov	r3, r0
 945              		.loc 1 447 6
 946 00c6 002B     		cmp	r3, #0
 947 00c8 01D0     		beq	.L30
 448:Src/main.c    ****   {
 449:Src/main.c    ****     Error_Handler();
 948              		.loc 1 449 5
 949 00ca FFF7FEFF 		bl	Error_Handler
 950              	.L30:
 450:Src/main.c    ****   }
 451:Src/main.c    **** 
 452:Src/main.c    ****   /** Configure Regular Channel
 453:Src/main.c    ****   */
 454:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 951              		.loc 1 454 16
 952 00ce 1223     		movs	r3, #18
 953 00d0 7B60     		str	r3, [r7, #4]
 455:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 954              		.loc 1 455 7
 955 00d2 3B46     		mov	r3, r7
 956 00d4 1946     		mov	r1, r3
 957 00d6 0B48     		ldr	r0, .L34
 958 00d8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 959 00dc 0346     		mov	r3, r0
 960              		.loc 1 455 6
 961 00de 002B     		cmp	r3, #0
 962 00e0 01D0     		beq	.L31
 456:Src/main.c    ****   {
 457:Src/main.c    ****     Error_Handler();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 26


 963              		.loc 1 457 5
 964 00e2 FFF7FEFF 		bl	Error_Handler
 965              	.L31:
 458:Src/main.c    ****   }
 459:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 2 */
 460:Src/main.c    **** 
 461:Src/main.c    ****   //if (HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&, 3) != HAL_OK)
 462:Src/main.c    ****   if (HAL_ADC_Start_DMA(&hadc2,(uint32_t*)(&HALL_M1.AdcRawValues), 6) != HAL_OK )
 966              		.loc 1 462 7
 967 00e6 0622     		movs	r2, #6
 968 00e8 0949     		ldr	r1, .L34+12
 969 00ea 0648     		ldr	r0, .L34
 970 00ec FFF7FEFF 		bl	HAL_ADC_Start_DMA
 971 00f0 0346     		mov	r3, r0
 972              		.loc 1 462 6
 973 00f2 002B     		cmp	r3, #0
 974 00f4 01D0     		beq	.L33
 463:Src/main.c    **** {
 464:Src/main.c    ****     Error_Handler();
 975              		.loc 1 464 5
 976 00f6 FFF7FEFF 		bl	Error_Handler
 977              	.L33:
 465:Src/main.c    **** }
 466:Src/main.c    **** 
 467:Src/main.c    ****   /* USER CODE END ADC2_Init 2 */
 468:Src/main.c    **** 
 469:Src/main.c    **** }
 978              		.loc 1 469 1
 979 00fa 00BF     		nop
 980 00fc 1837     		adds	r7, r7, #24
 981              	.LCFI20:
 982              		.cfi_def_cfa_offset 8
 983 00fe BD46     		mov	sp, r7
 984              	.LCFI21:
 985              		.cfi_def_cfa_register 13
 986              		@ sp needed
 987 0100 80BD     		pop	{r7, pc}
 988              	.L35:
 989 0102 00BF     		.align	2
 990              	.L34:
 991 0104 00000000 		.word	hadc2
 992 0108 00010450 		.word	1342439680
 993 010c 02003004 		.word	70254594
 994 0110 80000000 		.word	HALL_M1+128
 995              		.cfi_endproc
 996              	.LFE1100:
 998              		.section	.text.MX_TIM1_Init,"ax",%progbits
 999              		.align	1
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1004              	MX_TIM1_Init:
 1005              	.LFB1101:
 470:Src/main.c    **** 
 471:Src/main.c    **** /**
 472:Src/main.c    ****   * @brief TIM1 Initialization Function
 473:Src/main.c    ****   * @param None
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 27


 474:Src/main.c    ****   * @retval None
 475:Src/main.c    ****   */
 476:Src/main.c    **** static void MX_TIM1_Init(void)
 477:Src/main.c    **** {
 1006              		.loc 1 477 1
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 120
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              	.LCFI22:
 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 7, -8
 1014              		.cfi_offset 14, -4
 1015 0002 9EB0     		sub	sp, sp, #120
 1016              	.LCFI23:
 1017              		.cfi_def_cfa_offset 128
 1018 0004 00AF     		add	r7, sp, #0
 1019              	.LCFI24:
 1020              		.cfi_def_cfa_register 7
 478:Src/main.c    **** 
 479:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 480:Src/main.c    **** 
 481:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 482:Src/main.c    **** 
 483:Src/main.c    ****   TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 1021              		.loc 1 483 26
 1022 0006 07F16403 		add	r3, r7, #100
 1023 000a 0022     		movs	r2, #0
 1024 000c 1A60     		str	r2, [r3]
 1025 000e 5A60     		str	r2, [r3, #4]
 1026 0010 9A60     		str	r2, [r3, #8]
 1027 0012 DA60     		str	r2, [r3, #12]
 1028 0014 1A61     		str	r2, [r3, #16]
 484:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1029              		.loc 1 484 27
 1030 0016 07F15803 		add	r3, r7, #88
 1031 001a 0022     		movs	r2, #0
 1032 001c 1A60     		str	r2, [r3]
 1033 001e 5A60     		str	r2, [r3, #4]
 1034 0020 9A60     		str	r2, [r3, #8]
 485:Src/main.c    ****   TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 1035              		.loc 1 485 33
 1036 0022 07F14C03 		add	r3, r7, #76
 1037 0026 0022     		movs	r2, #0
 1038 0028 1A60     		str	r2, [r3]
 1039 002a 5A60     		str	r2, [r3, #4]
 1040 002c 9A60     		str	r2, [r3, #8]
 486:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1041              		.loc 1 486 22
 1042 002e 07F13003 		add	r3, r7, #48
 1043 0032 0022     		movs	r2, #0
 1044 0034 1A60     		str	r2, [r3]
 1045 0036 5A60     		str	r2, [r3, #4]
 1046 0038 9A60     		str	r2, [r3, #8]
 1047 003a DA60     		str	r2, [r3, #12]
 1048 003c 1A61     		str	r2, [r3, #16]
 1049 003e 5A61     		str	r2, [r3, #20]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 28


 1050 0040 9A61     		str	r2, [r3, #24]
 487:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1051              		.loc 1 487 34
 1052 0042 3B1D     		adds	r3, r7, #4
 1053 0044 2C22     		movs	r2, #44
 1054 0046 0021     		movs	r1, #0
 1055 0048 1846     		mov	r0, r3
 1056 004a FFF7FEFF 		bl	memset
 488:Src/main.c    **** 
 489:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 490:Src/main.c    **** 
 491:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 492:Src/main.c    ****   htim1.Instance = TIM1;
 1057              		.loc 1 492 18
 1058 004e 644B     		ldr	r3, .L47
 1059 0050 644A     		ldr	r2, .L47+4
 1060 0052 1A60     		str	r2, [r3]
 493:Src/main.c    ****   htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 1061              		.loc 1 493 24
 1062 0054 624B     		ldr	r3, .L47
 1063 0056 0022     		movs	r2, #0
 1064 0058 5A60     		str	r2, [r3, #4]
 494:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 1065              		.loc 1 494 26
 1066 005a 614B     		ldr	r3, .L47
 1067 005c 2022     		movs	r2, #32
 1068 005e 9A60     		str	r2, [r3, #8]
 495:Src/main.c    ****   htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 1069              		.loc 1 495 21
 1070 0060 5F4B     		ldr	r3, .L47
 1071 0062 40F6C412 		movw	r2, #2500
 1072 0066 DA60     		str	r2, [r3, #12]
 496:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 1073              		.loc 1 496 28
 1074 0068 5D4B     		ldr	r3, .L47
 1075 006a 4FF48072 		mov	r2, #256
 1076 006e 1A61     		str	r2, [r3, #16]
 497:Src/main.c    ****   htim1.Init.RepetitionCounter = (REP_COUNTER);
 1077              		.loc 1 497 32
 1078 0070 5B4B     		ldr	r3, .L47
 1079 0072 0122     		movs	r2, #1
 1080 0074 5A61     		str	r2, [r3, #20]
 498:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1081              		.loc 1 498 32
 1082 0076 5A4B     		ldr	r3, .L47
 1083 0078 0022     		movs	r2, #0
 1084 007a 9A61     		str	r2, [r3, #24]
 499:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1085              		.loc 1 499 7
 1086 007c 5848     		ldr	r0, .L47
 1087 007e FFF7FEFF 		bl	HAL_TIM_Base_Init
 1088 0082 0346     		mov	r3, r0
 1089              		.loc 1 499 6
 1090 0084 002B     		cmp	r3, #0
 1091 0086 01D0     		beq	.L37
 500:Src/main.c    ****   {
 501:Src/main.c    ****     Error_Handler();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 29


 1092              		.loc 1 501 5
 1093 0088 FFF7FEFF 		bl	Error_Handler
 1094              	.L37:
 502:Src/main.c    ****   }
 503:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1095              		.loc 1 503 7
 1096 008c 5448     		ldr	r0, .L47
 1097 008e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1098 0092 0346     		mov	r3, r0
 1099              		.loc 1 503 6
 1100 0094 002B     		cmp	r3, #0
 1101 0096 01D0     		beq	.L38
 504:Src/main.c    ****   {
 505:Src/main.c    ****     Error_Handler();
 1102              		.loc 1 505 5
 1103 0098 FFF7FEFF 		bl	Error_Handler
 1104              	.L38:
 506:Src/main.c    ****   }
 507:Src/main.c    ****   sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 1105              		.loc 1 507 26
 1106 009c 0623     		movs	r3, #6
 1107 009e 7B66     		str	r3, [r7, #100]
 508:Src/main.c    ****   sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 1108              		.loc 1 508 29
 1109 00a0 1023     		movs	r3, #16
 1110 00a2 BB66     		str	r3, [r7, #104]
 509:Src/main.c    ****   if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 1111              		.loc 1 509 7
 1112 00a4 07F16403 		add	r3, r7, #100
 1113 00a8 1946     		mov	r1, r3
 1114 00aa 4D48     		ldr	r0, .L47
 1115 00ac FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 1116 00b0 0346     		mov	r3, r0
 1117              		.loc 1 509 6
 1118 00b2 002B     		cmp	r3, #0
 1119 00b4 01D0     		beq	.L39
 510:Src/main.c    ****   {
 511:Src/main.c    ****     Error_Handler();
 1120              		.loc 1 511 5
 1121 00b6 FFF7FEFF 		bl	Error_Handler
 1122              	.L39:
 512:Src/main.c    ****   }
 513:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 1123              		.loc 1 513 37
 1124 00ba 7023     		movs	r3, #112
 1125 00bc BB65     		str	r3, [r7, #88]
 514:Src/main.c    ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1126              		.loc 1 514 38
 1127 00be 0023     		movs	r3, #0
 1128 00c0 FB65     		str	r3, [r7, #92]
 515:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1129              		.loc 1 515 33
 1130 00c2 0023     		movs	r3, #0
 1131 00c4 3B66     		str	r3, [r7, #96]
 516:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1132              		.loc 1 516 7
 1133 00c6 07F15803 		add	r3, r7, #88
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 30


 1134 00ca 1946     		mov	r1, r3
 1135 00cc 4448     		ldr	r0, .L47
 1136 00ce FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1137 00d2 0346     		mov	r3, r0
 1138              		.loc 1 516 6
 1139 00d4 002B     		cmp	r3, #0
 1140 00d6 01D0     		beq	.L40
 517:Src/main.c    ****   {
 518:Src/main.c    ****     Error_Handler();
 1141              		.loc 1 518 5
 1142 00d8 FFF7FEFF 		bl	Error_Handler
 1143              	.L40:
 519:Src/main.c    ****   }
 520:Src/main.c    ****   sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 1144              		.loc 1 520 28
 1145 00dc 0123     		movs	r3, #1
 1146 00de FB64     		str	r3, [r7, #76]
 521:Src/main.c    ****   sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 1147              		.loc 1 521 28
 1148 00e0 0123     		movs	r3, #1
 1149 00e2 3B65     		str	r3, [r7, #80]
 522:Src/main.c    ****   sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 1150              		.loc 1 522 30
 1151 00e4 0123     		movs	r3, #1
 1152 00e6 7B65     		str	r3, [r7, #84]
 523:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 1153              		.loc 1 523 7
 1154 00e8 07F14C03 		add	r3, r7, #76
 1155 00ec 1A46     		mov	r2, r3
 1156 00ee 0221     		movs	r1, #2
 1157 00f0 3B48     		ldr	r0, .L47
 1158 00f2 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakInput
 1159 00f6 0346     		mov	r3, r0
 1160              		.loc 1 523 6
 1161 00f8 002B     		cmp	r3, #0
 1162 00fa 01D0     		beq	.L41
 524:Src/main.c    ****   {
 525:Src/main.c    ****     Error_Handler();
 1163              		.loc 1 525 5
 1164 00fc FFF7FEFF 		bl	Error_Handler
 1165              	.L41:
 526:Src/main.c    ****   }
 527:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 1166              		.loc 1 527 20
 1167 0100 6023     		movs	r3, #96
 1168 0102 3B63     		str	r3, [r7, #48]
 528:Src/main.c    ****   sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 1169              		.loc 1 528 19
 1170 0104 40F2E243 		movw	r3, #1250
 1171 0108 7B63     		str	r3, [r7, #52]
 529:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1172              		.loc 1 529 24
 1173 010a 0023     		movs	r3, #0
 1174 010c BB63     		str	r3, [r7, #56]
 530:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1175              		.loc 1 530 25
 1176 010e 0023     		movs	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 31


 1177 0110 FB63     		str	r3, [r7, #60]
 531:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1178              		.loc 1 531 24
 1179 0112 0023     		movs	r3, #0
 1180 0114 3B64     		str	r3, [r7, #64]
 532:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1181              		.loc 1 532 25
 1182 0116 0023     		movs	r3, #0
 1183 0118 7B64     		str	r3, [r7, #68]
 533:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1184              		.loc 1 533 26
 1185 011a 0023     		movs	r3, #0
 1186 011c BB64     		str	r3, [r7, #72]
 534:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1187              		.loc 1 534 7
 1188 011e 07F13003 		add	r3, r7, #48
 1189 0122 0022     		movs	r2, #0
 1190 0124 1946     		mov	r1, r3
 1191 0126 2E48     		ldr	r0, .L47
 1192 0128 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1193 012c 0346     		mov	r3, r0
 1194              		.loc 1 534 6
 1195 012e 002B     		cmp	r3, #0
 1196 0130 01D0     		beq	.L42
 535:Src/main.c    ****   {
 536:Src/main.c    ****     Error_Handler();
 1197              		.loc 1 536 5
 1198 0132 FFF7FEFF 		bl	Error_Handler
 1199              	.L42:
 537:Src/main.c    ****   }
 538:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 1200              		.loc 1 538 7
 1201 0136 07F13003 		add	r3, r7, #48
 1202 013a 0422     		movs	r2, #4
 1203 013c 1946     		mov	r1, r3
 1204 013e 2848     		ldr	r0, .L47
 1205 0140 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1206 0144 0346     		mov	r3, r0
 1207              		.loc 1 538 6
 1208 0146 002B     		cmp	r3, #0
 1209 0148 01D0     		beq	.L43
 539:Src/main.c    ****   {
 540:Src/main.c    ****     Error_Handler();
 1210              		.loc 1 540 5
 1211 014a FFF7FEFF 		bl	Error_Handler
 1212              	.L43:
 541:Src/main.c    ****   }
 542:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1213              		.loc 1 542 7
 1214 014e 07F13003 		add	r3, r7, #48
 1215 0152 0822     		movs	r2, #8
 1216 0154 1946     		mov	r1, r3
 1217 0156 2248     		ldr	r0, .L47
 1218 0158 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1219 015c 0346     		mov	r3, r0
 1220              		.loc 1 542 6
 1221 015e 002B     		cmp	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 32


 1222 0160 01D0     		beq	.L44
 543:Src/main.c    ****   {
 544:Src/main.c    ****     Error_Handler();
 1223              		.loc 1 544 5
 1224 0162 FFF7FEFF 		bl	Error_Handler
 1225              	.L44:
 545:Src/main.c    ****   }
 546:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 1226              		.loc 1 546 20
 1227 0166 7023     		movs	r3, #112
 1228 0168 3B63     		str	r3, [r7, #48]
 547:Src/main.c    ****   sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 1229              		.loc 1 547 19
 1230 016a 40F6C313 		movw	r3, #2499
 1231 016e 7B63     		str	r3, [r7, #52]
 548:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 1232              		.loc 1 548 7
 1233 0170 07F13003 		add	r3, r7, #48
 1234 0174 0C22     		movs	r2, #12
 1235 0176 1946     		mov	r1, r3
 1236 0178 1948     		ldr	r0, .L47
 1237 017a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1238 017e 0346     		mov	r3, r0
 1239              		.loc 1 548 6
 1240 0180 002B     		cmp	r3, #0
 1241 0182 01D0     		beq	.L45
 549:Src/main.c    ****   {
 550:Src/main.c    ****     Error_Handler();
 1242              		.loc 1 550 5
 1243 0184 FFF7FEFF 		bl	Error_Handler
 1244              	.L45:
 551:Src/main.c    ****   }
 552:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 1245              		.loc 1 552 40
 1246 0188 4FF40063 		mov	r3, #2048
 1247 018c 7B60     		str	r3, [r7, #4]
 553:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 1248              		.loc 1 553 41
 1249 018e 4FF48063 		mov	r3, #1024
 1250 0192 BB60     		str	r3, [r7, #8]
 554:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1251              		.loc 1 554 34
 1252 0194 0023     		movs	r3, #0
 1253 0196 FB60     		str	r3, [r7, #12]
 555:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1254              		.loc 1 555 33
 1255 0198 0023     		movs	r3, #0
 1256 019a 3B61     		str	r3, [r7, #16]
 556:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1257              		.loc 1 556 35
 1258 019c 0023     		movs	r3, #0
 1259 019e 7B61     		str	r3, [r7, #20]
 557:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1260              		.loc 1 557 38
 1261 01a0 4FF40053 		mov	r3, #8192
 1262 01a4 BB61     		str	r3, [r7, #24]
 558:Src/main.c    ****   sBreakDeadTimeConfig.BreakFilter = 0;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 33


 1263              		.loc 1 558 36
 1264 01a6 0023     		movs	r3, #0
 1265 01a8 FB61     		str	r3, [r7, #28]
 559:Src/main.c    ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 1266              		.loc 1 559 36
 1267 01aa 4FF08073 		mov	r3, #16777216
 1268 01ae 3B62     		str	r3, [r7, #32]
 560:Src/main.c    ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1269              		.loc 1 560 39
 1270 01b0 4FF00073 		mov	r3, #33554432
 1271 01b4 7B62     		str	r3, [r7, #36]
 561:Src/main.c    ****   sBreakDeadTimeConfig.Break2Filter = 3;
 1272              		.loc 1 561 37
 1273 01b6 0323     		movs	r3, #3
 1274 01b8 BB62     		str	r3, [r7, #40]
 562:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1275              		.loc 1 562 40
 1276 01ba 0023     		movs	r3, #0
 1277 01bc FB62     		str	r3, [r7, #44]
 563:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1278              		.loc 1 563 7
 1279 01be 3B1D     		adds	r3, r7, #4
 1280 01c0 1946     		mov	r1, r3
 1281 01c2 0748     		ldr	r0, .L47
 1282 01c4 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1283 01c8 0346     		mov	r3, r0
 1284              		.loc 1 563 6
 1285 01ca 002B     		cmp	r3, #0
 1286 01cc 01D0     		beq	.L46
 564:Src/main.c    ****   {
 565:Src/main.c    ****     Error_Handler();
 1287              		.loc 1 565 5
 1288 01ce FFF7FEFF 		bl	Error_Handler
 1289              	.L46:
 566:Src/main.c    ****   }
 567:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 568:Src/main.c    **** 
 569:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 570:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 1290              		.loc 1 570 3
 1291 01d2 0348     		ldr	r0, .L47
 1292 01d4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 571:Src/main.c    **** 
 572:Src/main.c    **** }
 1293              		.loc 1 572 1
 1294 01d8 00BF     		nop
 1295 01da 7837     		adds	r7, r7, #120
 1296              	.LCFI25:
 1297              		.cfi_def_cfa_offset 8
 1298 01dc BD46     		mov	sp, r7
 1299              	.LCFI26:
 1300              		.cfi_def_cfa_register 13
 1301              		@ sp needed
 1302 01de 80BD     		pop	{r7, pc}
 1303              	.L48:
 1304              		.align	2
 1305              	.L47:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 34


 1306 01e0 00000000 		.word	htim1
 1307 01e4 002C0140 		.word	1073818624
 1308              		.cfi_endproc
 1309              	.LFE1101:
 1311              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1312              		.align	1
 1313              		.syntax unified
 1314              		.thumb
 1315              		.thumb_func
 1317              	MX_TIM3_Init:
 1318              	.LFB1102:
 573:Src/main.c    **** 
 574:Src/main.c    **** /**
 575:Src/main.c    ****   * @brief TIM3 Initialization Function
 576:Src/main.c    ****   * @param None
 577:Src/main.c    ****   * @retval None
 578:Src/main.c    ****   */
 579:Src/main.c    **** static void MX_TIM3_Init(void)
 580:Src/main.c    **** {
 1319              		.loc 1 580 1
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 48
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              	.LCFI27:
 1325              		.cfi_def_cfa_offset 8
 1326              		.cfi_offset 7, -8
 1327              		.cfi_offset 14, -4
 1328 0002 8CB0     		sub	sp, sp, #48
 1329              	.LCFI28:
 1330              		.cfi_def_cfa_offset 56
 1331 0004 00AF     		add	r7, sp, #0
 1332              	.LCFI29:
 1333              		.cfi_def_cfa_register 7
 581:Src/main.c    **** 
 582:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 583:Src/main.c    **** 
 584:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 585:Src/main.c    **** 
 586:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 1334              		.loc 1 586 27
 1335 0006 07F10C03 		add	r3, r7, #12
 1336 000a 2422     		movs	r2, #36
 1337 000c 0021     		movs	r1, #0
 1338 000e 1846     		mov	r0, r3
 1339 0010 FFF7FEFF 		bl	memset
 587:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1340              		.loc 1 587 27
 1341 0014 3B46     		mov	r3, r7
 1342 0016 0022     		movs	r2, #0
 1343 0018 1A60     		str	r2, [r3]
 1344 001a 5A60     		str	r2, [r3, #4]
 1345 001c 9A60     		str	r2, [r3, #8]
 588:Src/main.c    **** 
 589:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 590:Src/main.c    **** 
 591:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 35


 592:Src/main.c    ****   htim3.Instance = TIM3;
 1346              		.loc 1 592 18
 1347 001e 214B     		ldr	r3, .L53
 1348 0020 214A     		ldr	r2, .L53+4
 1349 0022 1A60     		str	r2, [r3]
 593:Src/main.c    ****   htim3.Init.Prescaler = 0;
 1350              		.loc 1 593 24
 1351 0024 1F4B     		ldr	r3, .L53
 1352 0026 0022     		movs	r2, #0
 1353 0028 5A60     		str	r2, [r3, #4]
 594:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1354              		.loc 1 594 26
 1355 002a 1E4B     		ldr	r3, .L53
 1356 002c 0022     		movs	r2, #0
 1357 002e 9A60     		str	r2, [r3, #8]
 595:Src/main.c    ****   htim3.Init.Period = M1_PULSE_NBR;
 1358              		.loc 1 595 21
 1359 0030 1C4B     		ldr	r3, .L53
 1360 0032 40F23F62 		movw	r2, #1599
 1361 0036 DA60     		str	r2, [r3, #12]
 596:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1362              		.loc 1 596 28
 1363 0038 1A4B     		ldr	r3, .L53
 1364 003a 0022     		movs	r2, #0
 1365 003c 1A61     		str	r2, [r3, #16]
 597:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1366              		.loc 1 597 32
 1367 003e 194B     		ldr	r3, .L53
 1368 0040 0022     		movs	r2, #0
 1369 0042 9A61     		str	r2, [r3, #24]
 598:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 1370              		.loc 1 598 23
 1371 0044 0323     		movs	r3, #3
 1372 0046 FB60     		str	r3, [r7, #12]
 599:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 1373              		.loc 1 599 23
 1374 0048 0023     		movs	r3, #0
 1375 004a 3B61     		str	r3, [r7, #16]
 600:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 1376              		.loc 1 600 24
 1377 004c 0123     		movs	r3, #1
 1378 004e 7B61     		str	r3, [r7, #20]
 601:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 1379              		.loc 1 601 24
 1380 0050 0023     		movs	r3, #0
 1381 0052 BB61     		str	r3, [r7, #24]
 602:Src/main.c    ****   sConfig.IC1Filter = M1_ENC_IC_FILTER;
 1382              		.loc 1 602 21
 1383 0054 0923     		movs	r3, #9
 1384 0056 FB61     		str	r3, [r7, #28]
 603:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 1385              		.loc 1 603 23
 1386 0058 0023     		movs	r3, #0
 1387 005a 3B62     		str	r3, [r7, #32]
 604:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 1388              		.loc 1 604 24
 1389 005c 0123     		movs	r3, #1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 36


 1390 005e 7B62     		str	r3, [r7, #36]
 605:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 1391              		.loc 1 605 24
 1392 0060 0023     		movs	r3, #0
 1393 0062 BB62     		str	r3, [r7, #40]
 606:Src/main.c    ****   sConfig.IC2Filter = M1_ENC_IC_FILTER;
 1394              		.loc 1 606 21
 1395 0064 0923     		movs	r3, #9
 1396 0066 FB62     		str	r3, [r7, #44]
 607:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 1397              		.loc 1 607 7
 1398 0068 07F10C03 		add	r3, r7, #12
 1399 006c 1946     		mov	r1, r3
 1400 006e 0D48     		ldr	r0, .L53
 1401 0070 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 1402 0074 0346     		mov	r3, r0
 1403              		.loc 1 607 6
 1404 0076 002B     		cmp	r3, #0
 1405 0078 01D0     		beq	.L50
 608:Src/main.c    ****   {
 609:Src/main.c    ****     Error_Handler();
 1406              		.loc 1 609 5
 1407 007a FFF7FEFF 		bl	Error_Handler
 1408              	.L50:
 610:Src/main.c    ****   }
 611:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 1409              		.loc 1 611 37
 1410 007e 0023     		movs	r3, #0
 1411 0080 3B60     		str	r3, [r7]
 612:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1412              		.loc 1 612 33
 1413 0082 0023     		movs	r3, #0
 1414 0084 BB60     		str	r3, [r7, #8]
 613:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1415              		.loc 1 613 7
 1416 0086 3B46     		mov	r3, r7
 1417 0088 1946     		mov	r1, r3
 1418 008a 0648     		ldr	r0, .L53
 1419 008c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1420 0090 0346     		mov	r3, r0
 1421              		.loc 1 613 6
 1422 0092 002B     		cmp	r3, #0
 1423 0094 01D0     		beq	.L52
 614:Src/main.c    ****   {
 615:Src/main.c    ****     Error_Handler();
 1424              		.loc 1 615 5
 1425 0096 FFF7FEFF 		bl	Error_Handler
 1426              	.L52:
 616:Src/main.c    ****   }
 617:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 618:Src/main.c    **** 
 619:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 620:Src/main.c    **** 
 621:Src/main.c    **** }
 1427              		.loc 1 621 1
 1428 009a 00BF     		nop
 1429 009c 3037     		adds	r7, r7, #48
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 37


 1430              	.LCFI30:
 1431              		.cfi_def_cfa_offset 8
 1432 009e BD46     		mov	sp, r7
 1433              	.LCFI31:
 1434              		.cfi_def_cfa_register 13
 1435              		@ sp needed
 1436 00a0 80BD     		pop	{r7, pc}
 1437              	.L54:
 1438 00a2 00BF     		.align	2
 1439              	.L53:
 1440 00a4 00000000 		.word	htim3
 1441 00a8 00040040 		.word	1073742848
 1442              		.cfi_endproc
 1443              	.LFE1102:
 1445              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1446              		.align	1
 1447              		.syntax unified
 1448              		.thumb
 1449              		.thumb_func
 1451              	MX_TIM4_Init:
 1452              	.LFB1103:
 622:Src/main.c    **** 
 623:Src/main.c    **** /**
 624:Src/main.c    ****   * @brief TIM4 Initialization Function
 625:Src/main.c    ****   * @param None
 626:Src/main.c    ****   * @retval None
 627:Src/main.c    ****   */
 628:Src/main.c    **** static void MX_TIM4_Init(void)
 629:Src/main.c    **** {
 1453              		.loc 1 629 1
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 56
 1456              		@ frame_needed = 1, uses_anonymous_args = 0
 1457 0000 80B5     		push	{r7, lr}
 1458              	.LCFI32:
 1459              		.cfi_def_cfa_offset 8
 1460              		.cfi_offset 7, -8
 1461              		.cfi_offset 14, -4
 1462 0002 8EB0     		sub	sp, sp, #56
 1463              	.LCFI33:
 1464              		.cfi_def_cfa_offset 64
 1465 0004 00AF     		add	r7, sp, #0
 1466              	.LCFI34:
 1467              		.cfi_def_cfa_register 7
 630:Src/main.c    **** 
 631:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 632:Src/main.c    **** 
 633:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 634:Src/main.c    **** 
 635:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 1468              		.loc 1 635 26
 1469 0006 07F12803 		add	r3, r7, #40
 1470 000a 0022     		movs	r2, #0
 1471 000c 1A60     		str	r2, [r3]
 1472 000e 5A60     		str	r2, [r3, #4]
 1473 0010 9A60     		str	r2, [r3, #8]
 1474 0012 DA60     		str	r2, [r3, #12]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 38


 636:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1475              		.loc 1 636 27
 1476 0014 07F11C03 		add	r3, r7, #28
 1477 0018 0022     		movs	r2, #0
 1478 001a 1A60     		str	r2, [r3]
 1479 001c 5A60     		str	r2, [r3, #4]
 1480 001e 9A60     		str	r2, [r3, #8]
 637:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1481              		.loc 1 637 22
 1482 0020 3B46     		mov	r3, r7
 1483 0022 0022     		movs	r2, #0
 1484 0024 1A60     		str	r2, [r3]
 1485 0026 5A60     		str	r2, [r3, #4]
 1486 0028 9A60     		str	r2, [r3, #8]
 1487 002a DA60     		str	r2, [r3, #12]
 1488 002c 1A61     		str	r2, [r3, #16]
 1489 002e 5A61     		str	r2, [r3, #20]
 1490 0030 9A61     		str	r2, [r3, #24]
 638:Src/main.c    **** 
 639:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 640:Src/main.c    **** 
 641:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 642:Src/main.c    ****   htim4.Instance = TIM4;
 1491              		.loc 1 642 18
 1492 0032 2B4B     		ldr	r3, .L62
 1493 0034 2B4A     		ldr	r2, .L62+4
 1494 0036 1A60     		str	r2, [r3]
 643:Src/main.c    ****   htim4.Init.Prescaler = 79;
 1495              		.loc 1 643 24
 1496 0038 294B     		ldr	r3, .L62
 1497 003a 4F22     		movs	r2, #79
 1498 003c 5A60     		str	r2, [r3, #4]
 644:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1499              		.loc 1 644 26
 1500 003e 284B     		ldr	r3, .L62
 1501 0040 0022     		movs	r2, #0
 1502 0042 9A60     		str	r2, [r3, #8]
 645:Src/main.c    ****   htim4.Init.Period = 999;
 1503              		.loc 1 645 21
 1504 0044 264B     		ldr	r3, .L62
 1505 0046 40F2E732 		movw	r2, #999
 1506 004a DA60     		str	r2, [r3, #12]
 646:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1507              		.loc 1 646 28
 1508 004c 244B     		ldr	r3, .L62
 1509 004e 0022     		movs	r2, #0
 1510 0050 1A61     		str	r2, [r3, #16]
 647:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1511              		.loc 1 647 32
 1512 0052 234B     		ldr	r3, .L62
 1513 0054 0022     		movs	r2, #0
 1514 0056 9A61     		str	r2, [r3, #24]
 648:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1515              		.loc 1 648 7
 1516 0058 2148     		ldr	r0, .L62
 1517 005a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1518 005e 0346     		mov	r3, r0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 39


 1519              		.loc 1 648 6
 1520 0060 002B     		cmp	r3, #0
 1521 0062 01D0     		beq	.L56
 649:Src/main.c    ****   {
 650:Src/main.c    ****     Error_Handler();
 1522              		.loc 1 650 5
 1523 0064 FFF7FEFF 		bl	Error_Handler
 1524              	.L56:
 651:Src/main.c    ****   }
 652:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 1525              		.loc 1 652 34
 1526 0068 4FF48053 		mov	r3, #4096
 1527 006c BB62     		str	r3, [r7, #40]
 653:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 1528              		.loc 1 653 7
 1529 006e 07F12803 		add	r3, r7, #40
 1530 0072 1946     		mov	r1, r3
 1531 0074 1A48     		ldr	r0, .L62
 1532 0076 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1533 007a 0346     		mov	r3, r0
 1534              		.loc 1 653 6
 1535 007c 002B     		cmp	r3, #0
 1536 007e 01D0     		beq	.L57
 654:Src/main.c    ****   {
 655:Src/main.c    ****     Error_Handler();
 1537              		.loc 1 655 5
 1538 0080 FFF7FEFF 		bl	Error_Handler
 1539              	.L57:
 656:Src/main.c    ****   }
 657:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 1540              		.loc 1 657 7
 1541 0084 1648     		ldr	r0, .L62
 1542 0086 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1543 008a 0346     		mov	r3, r0
 1544              		.loc 1 657 6
 1545 008c 002B     		cmp	r3, #0
 1546 008e 01D0     		beq	.L58
 658:Src/main.c    ****   {
 659:Src/main.c    ****     Error_Handler();
 1547              		.loc 1 659 5
 1548 0090 FFF7FEFF 		bl	Error_Handler
 1549              	.L58:
 660:Src/main.c    ****   }
 661:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 1550              		.loc 1 661 37
 1551 0094 2023     		movs	r3, #32
 1552 0096 FB61     		str	r3, [r7, #28]
 662:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1553              		.loc 1 662 33
 1554 0098 0023     		movs	r3, #0
 1555 009a 7B62     		str	r3, [r7, #36]
 663:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1556              		.loc 1 663 7
 1557 009c 07F11C03 		add	r3, r7, #28
 1558 00a0 1946     		mov	r1, r3
 1559 00a2 0F48     		ldr	r0, .L62
 1560 00a4 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 40


 1561 00a8 0346     		mov	r3, r0
 1562              		.loc 1 663 6
 1563 00aa 002B     		cmp	r3, #0
 1564 00ac 01D0     		beq	.L59
 664:Src/main.c    ****   {
 665:Src/main.c    ****     Error_Handler();
 1565              		.loc 1 665 5
 1566 00ae FFF7FEFF 		bl	Error_Handler
 1567              	.L59:
 666:Src/main.c    ****   }
 667:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 1568              		.loc 1 667 20
 1569 00b2 6023     		movs	r3, #96
 1570 00b4 3B60     		str	r3, [r7]
 668:Src/main.c    ****   sConfigOC.Pulse = 0;
 1571              		.loc 1 668 19
 1572 00b6 0023     		movs	r3, #0
 1573 00b8 7B60     		str	r3, [r7, #4]
 669:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1574              		.loc 1 669 24
 1575 00ba 0023     		movs	r3, #0
 1576 00bc BB60     		str	r3, [r7, #8]
 670:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1577              		.loc 1 670 24
 1578 00be 0023     		movs	r3, #0
 1579 00c0 3B61     		str	r3, [r7, #16]
 671:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1580              		.loc 1 671 7
 1581 00c2 3B46     		mov	r3, r7
 1582 00c4 0022     		movs	r2, #0
 1583 00c6 1946     		mov	r1, r3
 1584 00c8 0548     		ldr	r0, .L62
 1585 00ca FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1586 00ce 0346     		mov	r3, r0
 1587              		.loc 1 671 6
 1588 00d0 002B     		cmp	r3, #0
 1589 00d2 01D0     		beq	.L61
 672:Src/main.c    ****   {
 673:Src/main.c    ****     Error_Handler();
 1590              		.loc 1 673 5
 1591 00d4 FFF7FEFF 		bl	Error_Handler
 1592              	.L61:
 674:Src/main.c    ****   }
 675:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 676:Src/main.c    **** 
 677:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 678:Src/main.c    **** 
 679:Src/main.c    **** }
 1593              		.loc 1 679 1
 1594 00d8 00BF     		nop
 1595 00da 3837     		adds	r7, r7, #56
 1596              	.LCFI35:
 1597              		.cfi_def_cfa_offset 8
 1598 00dc BD46     		mov	sp, r7
 1599              	.LCFI36:
 1600              		.cfi_def_cfa_register 13
 1601              		@ sp needed
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 41


 1602 00de 80BD     		pop	{r7, pc}
 1603              	.L63:
 1604              		.align	2
 1605              	.L62:
 1606 00e0 00000000 		.word	htim4
 1607 00e4 00080040 		.word	1073743872
 1608              		.cfi_endproc
 1609              	.LFE1103:
 1611              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1612              		.align	1
 1613              		.syntax unified
 1614              		.thumb
 1615              		.thumb_func
 1617              	MX_USART2_UART_Init:
 1618              	.LFB1104:
 680:Src/main.c    **** 
 681:Src/main.c    **** /**
 682:Src/main.c    ****   * @brief USART2 Initialization Function
 683:Src/main.c    ****   * @param None
 684:Src/main.c    ****   * @retval None
 685:Src/main.c    ****   */
 686:Src/main.c    **** static void MX_USART2_UART_Init(void)
 687:Src/main.c    **** {
 1619              		.loc 1 687 1
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 0
 1622              		@ frame_needed = 1, uses_anonymous_args = 0
 1623 0000 80B5     		push	{r7, lr}
 1624              	.LCFI37:
 1625              		.cfi_def_cfa_offset 8
 1626              		.cfi_offset 7, -8
 1627              		.cfi_offset 14, -4
 1628 0002 00AF     		add	r7, sp, #0
 1629              	.LCFI38:
 1630              		.cfi_def_cfa_register 7
 688:Src/main.c    **** 
 689:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 690:Src/main.c    **** 
 691:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 692:Src/main.c    **** 
 693:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 694:Src/main.c    **** 
 695:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 696:Src/main.c    ****   huart2.Instance = USART2;
 1631              		.loc 1 696 19
 1632 0004 144B     		ldr	r3, .L67
 1633 0006 154A     		ldr	r2, .L67+4
 1634 0008 1A60     		str	r2, [r3]
 697:Src/main.c    ****   huart2.Init.BaudRate = 1843200;
 1635              		.loc 1 697 24
 1636 000a 134B     		ldr	r3, .L67
 1637 000c 4FF4E112 		mov	r2, #1843200
 1638 0010 5A60     		str	r2, [r3, #4]
 698:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1639              		.loc 1 698 26
 1640 0012 114B     		ldr	r3, .L67
 1641 0014 0022     		movs	r2, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 42


 1642 0016 9A60     		str	r2, [r3, #8]
 699:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1643              		.loc 1 699 24
 1644 0018 0F4B     		ldr	r3, .L67
 1645 001a 0022     		movs	r2, #0
 1646 001c DA60     		str	r2, [r3, #12]
 700:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 1647              		.loc 1 700 22
 1648 001e 0E4B     		ldr	r3, .L67
 1649 0020 0022     		movs	r2, #0
 1650 0022 1A61     		str	r2, [r3, #16]
 701:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1651              		.loc 1 701 20
 1652 0024 0C4B     		ldr	r3, .L67
 1653 0026 0C22     		movs	r2, #12
 1654 0028 5A61     		str	r2, [r3, #20]
 702:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1655              		.loc 1 702 25
 1656 002a 0B4B     		ldr	r3, .L67
 1657 002c 0022     		movs	r2, #0
 1658 002e 9A61     		str	r2, [r3, #24]
 703:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1659              		.loc 1 703 28
 1660 0030 094B     		ldr	r3, .L67
 1661 0032 0022     		movs	r2, #0
 1662 0034 DA61     		str	r2, [r3, #28]
 704:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1663              		.loc 1 704 30
 1664 0036 084B     		ldr	r3, .L67
 1665 0038 0022     		movs	r2, #0
 1666 003a 1A62     		str	r2, [r3, #32]
 705:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1667              		.loc 1 705 38
 1668 003c 064B     		ldr	r3, .L67
 1669 003e 0022     		movs	r2, #0
 1670 0040 5A62     		str	r2, [r3, #36]
 706:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1671              		.loc 1 706 7
 1672 0042 0548     		ldr	r0, .L67
 1673 0044 FFF7FEFF 		bl	HAL_UART_Init
 1674 0048 0346     		mov	r3, r0
 1675              		.loc 1 706 6
 1676 004a 002B     		cmp	r3, #0
 1677 004c 01D0     		beq	.L66
 707:Src/main.c    ****   {
 708:Src/main.c    ****     Error_Handler();
 1678              		.loc 1 708 5
 1679 004e FFF7FEFF 		bl	Error_Handler
 1680              	.L66:
 709:Src/main.c    ****   }
 710:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 711:Src/main.c    **** 
 712:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 713:Src/main.c    **** 
 714:Src/main.c    **** }
 1681              		.loc 1 714 1
 1682 0052 00BF     		nop
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 43


 1683 0054 80BD     		pop	{r7, pc}
 1684              	.L68:
 1685 0056 00BF     		.align	2
 1686              	.L67:
 1687 0058 00000000 		.word	huart2
 1688 005c 00440040 		.word	1073759232
 1689              		.cfi_endproc
 1690              	.LFE1104:
 1692              		.section	.text.MX_DMA_Init,"ax",%progbits
 1693              		.align	1
 1694              		.syntax unified
 1695              		.thumb
 1696              		.thumb_func
 1698              	MX_DMA_Init:
 1699              	.LFB1105:
 715:Src/main.c    **** 
 716:Src/main.c    **** /**
 717:Src/main.c    ****   * Enable DMA controller clock
 718:Src/main.c    ****   */
 719:Src/main.c    **** static void MX_DMA_Init(void)
 720:Src/main.c    **** {
 1700              		.loc 1 720 1
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 8
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704 0000 80B5     		push	{r7, lr}
 1705              	.LCFI39:
 1706              		.cfi_def_cfa_offset 8
 1707              		.cfi_offset 7, -8
 1708              		.cfi_offset 14, -4
 1709 0002 82B0     		sub	sp, sp, #8
 1710              	.LCFI40:
 1711              		.cfi_def_cfa_offset 16
 1712 0004 00AF     		add	r7, sp, #0
 1713              	.LCFI41:
 1714              		.cfi_def_cfa_register 7
 1715              	.LBB4:
 721:Src/main.c    **** 
 722:Src/main.c    ****   /* DMA controller clock enable */
 723:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 1716              		.loc 1 723 3
 1717 0006 0C4B     		ldr	r3, .L70
 1718 0008 9B6C     		ldr	r3, [r3, #72]
 1719 000a 0B4A     		ldr	r2, .L70
 1720 000c 43F00103 		orr	r3, r3, #1
 1721 0010 9364     		str	r3, [r2, #72]
 1722 0012 094B     		ldr	r3, .L70
 1723 0014 9B6C     		ldr	r3, [r3, #72]
 1724 0016 03F00103 		and	r3, r3, #1
 1725 001a 7B60     		str	r3, [r7, #4]
 1726 001c 7B68     		ldr	r3, [r7, #4]
 1727              	.LBE4:
 724:Src/main.c    **** 
 725:Src/main.c    ****   /* DMA interrupt init */
 726:Src/main.c    ****   /* DMA1_Channel2_IRQn interrupt configuration */
 727:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 1728              		.loc 1 727 3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 44


 1729 001e 0022     		movs	r2, #0
 1730 0020 0521     		movs	r1, #5
 1731 0022 0C20     		movs	r0, #12
 1732 0024 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 728:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 1733              		.loc 1 728 3
 1734 0028 0C20     		movs	r0, #12
 1735 002a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 729:Src/main.c    **** 
 730:Src/main.c    **** }
 1736              		.loc 1 730 1
 1737 002e 00BF     		nop
 1738 0030 0837     		adds	r7, r7, #8
 1739              	.LCFI42:
 1740              		.cfi_def_cfa_offset 8
 1741 0032 BD46     		mov	sp, r7
 1742              	.LCFI43:
 1743              		.cfi_def_cfa_register 13
 1744              		@ sp needed
 1745 0034 80BD     		pop	{r7, pc}
 1746              	.L71:
 1747 0036 00BF     		.align	2
 1748              	.L70:
 1749 0038 00100240 		.word	1073876992
 1750              		.cfi_endproc
 1751              	.LFE1105:
 1753              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1754              		.align	1
 1755              		.global	HAL_ADC_ConvCpltCallback
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1760              	HAL_ADC_ConvCpltCallback:
 1761              	.LFB1106:
 731:Src/main.c    **** 
 732:Src/main.c    **** 
 733:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 734:Src/main.c    **** {
 1762              		.loc 1 734 1
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 24
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 1767 0000 80B4     		push	{r7}
 1768              	.LCFI44:
 1769              		.cfi_def_cfa_offset 4
 1770              		.cfi_offset 7, -4
 1771 0002 87B0     		sub	sp, sp, #28
 1772              	.LCFI45:
 1773              		.cfi_def_cfa_offset 32
 1774 0004 00AF     		add	r7, sp, #0
 1775              	.LCFI46:
 1776              		.cfi_def_cfa_register 7
 1777 0006 7860     		str	r0, [r7, #4]
 735:Src/main.c    ****   
 736:Src/main.c    ****   uint32_t adcRaw[3] = {0};
 1778              		.loc 1 736 12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 45


 1779 0008 07F10C03 		add	r3, r7, #12
 1780 000c 0022     		movs	r2, #0
 1781 000e 1A60     		str	r2, [r3]
 1782 0010 5A60     		str	r2, [r3, #4]
 1783 0012 9A60     		str	r2, [r3, #8]
 737:Src/main.c    **** 
 738:Src/main.c    ****   if (hadc->Instance == ADC2)
 1784              		.loc 1 738 11
 1785 0014 7B68     		ldr	r3, [r7, #4]
 1786 0016 1B68     		ldr	r3, [r3]
 1787              		.loc 1 738 6
 1788 0018 104A     		ldr	r2, .L75
 1789 001a 9342     		cmp	r3, r2
 1790 001c 17D1     		bne	.L74
 739:Src/main.c    ****   {
 740:Src/main.c    ****      
 741:Src/main.c    ****     adcRaw[0] = HALL_M1.AdcRawValues[0];
 1791              		.loc 1 741 37
 1792 001e 104B     		ldr	r3, .L75+4
 1793 0020 D3F88030 		ldr	r3, [r3, #128]
 1794              		.loc 1 741 15
 1795 0024 FB60     		str	r3, [r7, #12]
 742:Src/main.c    ****     adcRaw[1] = HALL_M1.AdcRawValues[1];
 1796              		.loc 1 742 37
 1797 0026 0E4B     		ldr	r3, .L75+4
 1798 0028 D3F88430 		ldr	r3, [r3, #132]
 1799              		.loc 1 742 15
 1800 002c 3B61     		str	r3, [r7, #16]
 743:Src/main.c    ****     adcRaw[2] = HALL_M1.AdcRawValues[2];
 1801              		.loc 1 743 37
 1802 002e 0C4B     		ldr	r3, .L75+4
 1803 0030 D3F88830 		ldr	r3, [r3, #136]
 1804              		.loc 1 743 15
 1805 0034 7B61     		str	r3, [r7, #20]
 744:Src/main.c    ****     adcRaw[3] = HALL_M1.AdcRawValues[3];
 1806              		.loc 1 744 37
 1807 0036 0A4B     		ldr	r3, .L75+4
 1808 0038 D3F88C30 		ldr	r3, [r3, #140]
 1809              		.loc 1 744 15
 1810 003c BB61     		str	r3, [r7, #24]
 745:Src/main.c    ****     adcRaw[4] = HALL_M1.AdcRawValues[4];
 1811              		.loc 1 745 37
 1812 003e 084B     		ldr	r3, .L75+4
 1813 0040 D3F89030 		ldr	r3, [r3, #144]
 1814              		.loc 1 745 15
 1815 0044 FB61     		str	r3, [r7, #28]
 746:Src/main.c    ****     adcRaw[5] = HALL_M1.AdcRawValues[5];
 1816              		.loc 1 746 37
 1817 0046 064B     		ldr	r3, .L75+4
 1818 0048 D3F89430 		ldr	r3, [r3, #148]
 1819              		.loc 1 746 15
 1820 004c 3B62     		str	r3, [r7, #32]
 1821              	.L74:
 747:Src/main.c    ****   }
 748:Src/main.c    ****   else
 749:Src/main.c    ****   {
 750:Src/main.c    ****     //Resume
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 46


 751:Src/main.c    ****   }
 752:Src/main.c    **** }
 1822              		.loc 1 752 1
 1823 004e 00BF     		nop
 1824 0050 1C37     		adds	r7, r7, #28
 1825              	.LCFI47:
 1826              		.cfi_def_cfa_offset 4
 1827 0052 BD46     		mov	sp, r7
 1828              	.LCFI48:
 1829              		.cfi_def_cfa_register 13
 1830              		@ sp needed
 1831 0054 5DF8047B 		ldr	r7, [sp], #4
 1832              	.LCFI49:
 1833              		.cfi_restore 7
 1834              		.cfi_def_cfa_offset 0
 1835 0058 7047     		bx	lr
 1836              	.L76:
 1837 005a 00BF     		.align	2
 1838              	.L75:
 1839 005c 00010450 		.word	1342439680
 1840 0060 00000000 		.word	HALL_M1
 1841              		.cfi_endproc
 1842              	.LFE1106:
 1844              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1845              		.align	1
 1846              		.global	HAL_ADC_ConvHalfCpltCallback
 1847              		.syntax unified
 1848              		.thumb
 1849              		.thumb_func
 1851              	HAL_ADC_ConvHalfCpltCallback:
 1852              	.LFB1107:
 753:Src/main.c    **** 
 754:Src/main.c    **** void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 755:Src/main.c    **** {
 1853              		.loc 1 755 1
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 8
 1856              		@ frame_needed = 1, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
 1858 0000 80B4     		push	{r7}
 1859              	.LCFI50:
 1860              		.cfi_def_cfa_offset 4
 1861              		.cfi_offset 7, -4
 1862 0002 83B0     		sub	sp, sp, #12
 1863              	.LCFI51:
 1864              		.cfi_def_cfa_offset 16
 1865 0004 00AF     		add	r7, sp, #0
 1866              	.LCFI52:
 1867              		.cfi_def_cfa_register 7
 1868 0006 7860     		str	r0, [r7, #4]
 756:Src/main.c    ****   
 757:Src/main.c    **** 
 758:Src/main.c    **** }
 1869              		.loc 1 758 1
 1870 0008 00BF     		nop
 1871 000a 0C37     		adds	r7, r7, #12
 1872              	.LCFI53:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 47


 1873              		.cfi_def_cfa_offset 4
 1874 000c BD46     		mov	sp, r7
 1875              	.LCFI54:
 1876              		.cfi_def_cfa_register 13
 1877              		@ sp needed
 1878 000e 5DF8047B 		ldr	r7, [sp], #4
 1879              	.LCFI55:
 1880              		.cfi_restore 7
 1881              		.cfi_def_cfa_offset 0
 1882 0012 7047     		bx	lr
 1883              		.cfi_endproc
 1884              	.LFE1107:
 1886              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1887              		.align	1
 1888              		.syntax unified
 1889              		.thumb
 1890              		.thumb_func
 1892              	MX_GPIO_Init:
 1893              	.LFB1108:
 759:Src/main.c    **** 
 760:Src/main.c    **** /**
 761:Src/main.c    ****   * @brief GPIO Initialization Function
 762:Src/main.c    ****   * @param None
 763:Src/main.c    ****   * @retval None
 764:Src/main.c    ****   */
 765:Src/main.c    **** static void MX_GPIO_Init(void)
 766:Src/main.c    **** {
 1894              		.loc 1 766 1
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 32
 1897              		@ frame_needed = 1, uses_anonymous_args = 0
 1898 0000 80B5     		push	{r7, lr}
 1899              	.LCFI56:
 1900              		.cfi_def_cfa_offset 8
 1901              		.cfi_offset 7, -8
 1902              		.cfi_offset 14, -4
 1903 0002 88B0     		sub	sp, sp, #32
 1904              	.LCFI57:
 1905              		.cfi_def_cfa_offset 40
 1906 0004 00AF     		add	r7, sp, #0
 1907              	.LCFI58:
 1908              		.cfi_def_cfa_register 7
 767:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1909              		.loc 1 767 20
 1910 0006 07F10C03 		add	r3, r7, #12
 1911 000a 0022     		movs	r2, #0
 1912 000c 1A60     		str	r2, [r3]
 1913 000e 5A60     		str	r2, [r3, #4]
 1914 0010 9A60     		str	r2, [r3, #8]
 1915 0012 DA60     		str	r2, [r3, #12]
 1916 0014 1A61     		str	r2, [r3, #16]
 1917              	.LBB5:
 768:Src/main.c    **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 769:Src/main.c    **** /* USER CODE END MX_GPIO_Init_1 */
 770:Src/main.c    **** 
 771:Src/main.c    ****   /* GPIO Ports Clock Enable */
 772:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 48


 1918              		.loc 1 772 3
 1919 0016 2B4B     		ldr	r3, .L79
 1920 0018 DB6C     		ldr	r3, [r3, #76]
 1921 001a 2A4A     		ldr	r2, .L79
 1922 001c 43F00403 		orr	r3, r3, #4
 1923 0020 D364     		str	r3, [r2, #76]
 1924 0022 284B     		ldr	r3, .L79
 1925 0024 DB6C     		ldr	r3, [r3, #76]
 1926 0026 03F00403 		and	r3, r3, #4
 1927 002a BB60     		str	r3, [r7, #8]
 1928 002c BB68     		ldr	r3, [r7, #8]
 1929              	.LBE5:
 1930              	.LBB6:
 773:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1931              		.loc 1 773 3
 1932 002e 254B     		ldr	r3, .L79
 1933 0030 DB6C     		ldr	r3, [r3, #76]
 1934 0032 244A     		ldr	r2, .L79
 1935 0034 43F00103 		orr	r3, r3, #1
 1936 0038 D364     		str	r3, [r2, #76]
 1937 003a 224B     		ldr	r3, .L79
 1938 003c DB6C     		ldr	r3, [r3, #76]
 1939 003e 03F00103 		and	r3, r3, #1
 1940 0042 7B60     		str	r3, [r7, #4]
 1941 0044 7B68     		ldr	r3, [r7, #4]
 1942              	.LBE6:
 1943              	.LBB7:
 774:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1944              		.loc 1 774 3
 1945 0046 1F4B     		ldr	r3, .L79
 1946 0048 DB6C     		ldr	r3, [r3, #76]
 1947 004a 1E4A     		ldr	r2, .L79
 1948 004c 43F00203 		orr	r3, r3, #2
 1949 0050 D364     		str	r3, [r2, #76]
 1950 0052 1C4B     		ldr	r3, .L79
 1951 0054 DB6C     		ldr	r3, [r3, #76]
 1952 0056 03F00203 		and	r3, r3, #2
 1953 005a 3B60     		str	r3, [r7]
 1954 005c 3B68     		ldr	r3, [r7]
 1955              	.LBE7:
 775:Src/main.c    **** 
 776:Src/main.c    ****   /*Configure GPIO pin Output Level */
 777:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 1956              		.loc 1 777 3
 1957 005e 0022     		movs	r2, #0
 1958 0060 4FF46041 		mov	r1, #57344
 1959 0064 1848     		ldr	r0, .L79+4
 1960 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 778:Src/main.c    **** 
 779:Src/main.c    ****   /*Configure GPIO pin : Start_Stop_Pin */
 780:Src/main.c    ****   GPIO_InitStruct.Pin = Start_Stop_Pin;
 1961              		.loc 1 780 23
 1962 006a 4FF40053 		mov	r3, #8192
 1963 006e FB60     		str	r3, [r7, #12]
 781:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 1964              		.loc 1 781 24
 1965 0070 4FF40413 		mov	r3, #2162688
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 49


 1966 0074 3B61     		str	r3, [r7, #16]
 782:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1967              		.loc 1 782 24
 1968 0076 0023     		movs	r3, #0
 1969 0078 7B61     		str	r3, [r7, #20]
 783:Src/main.c    ****   HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 1970              		.loc 1 783 3
 1971 007a 07F10C03 		add	r3, r7, #12
 1972 007e 1946     		mov	r1, r3
 1973 0080 1248     		ldr	r0, .L79+8
 1974 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 784:Src/main.c    **** 
 785:Src/main.c    ****   /*Configure GPIO pin : HALL_H3_Pin */
 786:Src/main.c    ****   GPIO_InitStruct.Pin = HALL_H3_Pin;
 1975              		.loc 1 786 23
 1976 0086 0423     		movs	r3, #4
 1977 0088 FB60     		str	r3, [r7, #12]
 787:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 1978              		.loc 1 787 24
 1979 008a 0B23     		movs	r3, #11
 1980 008c 3B61     		str	r3, [r7, #16]
 788:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1981              		.loc 1 788 24
 1982 008e 0023     		movs	r3, #0
 1983 0090 7B61     		str	r3, [r7, #20]
 789:Src/main.c    ****   HAL_GPIO_Init(HALL_H3_GPIO_Port, &GPIO_InitStruct);
 1984              		.loc 1 789 3
 1985 0092 07F10C03 		add	r3, r7, #12
 1986 0096 1946     		mov	r1, r3
 1987 0098 0C48     		ldr	r0, .L79+8
 1988 009a FFF7FEFF 		bl	HAL_GPIO_Init
 790:Src/main.c    **** 
 791:Src/main.c    ****   /*Configure GPIO pins : M1_PWM_EN_U_Pin M1_PWM_EN_V_Pin M1_PWM_EN_W_Pin */
 792:Src/main.c    ****   GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 1989              		.loc 1 792 23
 1990 009e 4FF46043 		mov	r3, #57344
 1991 00a2 FB60     		str	r3, [r7, #12]
 793:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1992              		.loc 1 793 24
 1993 00a4 0123     		movs	r3, #1
 1994 00a6 3B61     		str	r3, [r7, #16]
 794:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1995              		.loc 1 794 24
 1996 00a8 0223     		movs	r3, #2
 1997 00aa 7B61     		str	r3, [r7, #20]
 795:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 1998              		.loc 1 795 25
 1999 00ac 0223     		movs	r3, #2
 2000 00ae BB61     		str	r3, [r7, #24]
 796:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 2001              		.loc 1 796 3
 2002 00b0 07F10C03 		add	r3, r7, #12
 2003 00b4 1946     		mov	r1, r3
 2004 00b6 0448     		ldr	r0, .L79+4
 2005 00b8 FFF7FEFF 		bl	HAL_GPIO_Init
 797:Src/main.c    **** 
 798:Src/main.c    **** /* USER CODE BEGIN MX_GPIO_Init_2 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 50


 799:Src/main.c    **** /* USER CODE END MX_GPIO_Init_2 */
 800:Src/main.c    **** }
 2006              		.loc 1 800 1
 2007 00bc 00BF     		nop
 2008 00be 2037     		adds	r7, r7, #32
 2009              	.LCFI59:
 2010              		.cfi_def_cfa_offset 8
 2011 00c0 BD46     		mov	sp, r7
 2012              	.LCFI60:
 2013              		.cfi_def_cfa_register 13
 2014              		@ sp needed
 2015 00c2 80BD     		pop	{r7, pc}
 2016              	.L80:
 2017              		.align	2
 2018              	.L79:
 2019 00c4 00100240 		.word	1073876992
 2020 00c8 00040048 		.word	1207960576
 2021 00cc 00080048 		.word	1207961600
 2022              		.cfi_endproc
 2023              	.LFE1108:
 2025              		.section	.text.startMediumFrequencyTask,"ax",%progbits
 2026              		.align	1
 2027              		.weak	startMediumFrequencyTask
 2028              		.syntax unified
 2029              		.thumb
 2030              		.thumb_func
 2032              	startMediumFrequencyTask:
 2033              	.LFB1109:
 801:Src/main.c    **** 
 802:Src/main.c    **** /* USER CODE BEGIN 4 */
 803:Src/main.c    **** /* USER CODE END 4 */
 804:Src/main.c    **** 
 805:Src/main.c    **** /* USER CODE BEGIN Header_startMediumFrequencyTask */
 806:Src/main.c    **** /**
 807:Src/main.c    ****   * @brief  Function implementing the mediumFrequency thread.
 808:Src/main.c    ****   * @param  argument: Not used
 809:Src/main.c    ****   * @retval None
 810:Src/main.c    ****   */
 811:Src/main.c    **** /* USER CODE END Header_startMediumFrequencyTask */
 812:Src/main.c    **** __weak void startMediumFrequencyTask(void const * argument)
 813:Src/main.c    **** {
 2034              		.loc 1 813 1
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 8
 2037              		@ frame_needed = 1, uses_anonymous_args = 0
 2038 0000 80B5     		push	{r7, lr}
 2039              	.LCFI61:
 2040              		.cfi_def_cfa_offset 8
 2041              		.cfi_offset 7, -8
 2042              		.cfi_offset 14, -4
 2043 0002 82B0     		sub	sp, sp, #8
 2044              	.LCFI62:
 2045              		.cfi_def_cfa_offset 16
 2046 0004 00AF     		add	r7, sp, #0
 2047              	.LCFI63:
 2048              		.cfi_def_cfa_register 7
 2049 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 51


 2050              	.L82:
 814:Src/main.c    ****   /* USER CODE BEGIN 5 */
 815:Src/main.c    ****   /* Infinite loop */
 816:Src/main.c    ****   for(;;)
 817:Src/main.c    ****   {
 818:Src/main.c    ****     osDelay(1);
 2051              		.loc 1 818 5 discriminator 1
 2052 0008 0120     		movs	r0, #1
 2053 000a FFF7FEFF 		bl	osDelay
 2054 000e FBE7     		b	.L82
 2055              		.cfi_endproc
 2056              	.LFE1109:
 2058              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 2059              		.align	1
 2060              		.global	HAL_TIM_PeriodElapsedCallback
 2061              		.syntax unified
 2062              		.thumb
 2063              		.thumb_func
 2065              	HAL_TIM_PeriodElapsedCallback:
 2066              	.LFB1110:
 819:Src/main.c    ****   }
 820:Src/main.c    ****   /* USER CODE END 5 */
 821:Src/main.c    **** }
 822:Src/main.c    **** 
 823:Src/main.c    **** /**
 824:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 825:Src/main.c    ****   * @note   This function is called  when TIM6 interrupt took place, inside
 826:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 827:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 828:Src/main.c    ****   * @param  htim : TIM handle
 829:Src/main.c    ****   * @retval None
 830:Src/main.c    ****   */
 831:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 832:Src/main.c    **** {
 2067              		.loc 1 832 1
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 16
 2070              		@ frame_needed = 1, uses_anonymous_args = 0
 2071 0000 80B5     		push	{r7, lr}
 2072              	.LCFI64:
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 7, -8
 2075              		.cfi_offset 14, -4
 2076 0002 84B0     		sub	sp, sp, #16
 2077              	.LCFI65:
 2078              		.cfi_def_cfa_offset 24
 2079 0004 00AF     		add	r7, sp, #0
 2080              	.LCFI66:
 2081              		.cfi_def_cfa_register 7
 2082 0006 7860     		str	r0, [r7, #4]
 833:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 834:Src/main.c    ****   uint32_t val= 0;
 2083              		.loc 1 834 12
 2084 0008 0023     		movs	r3, #0
 2085 000a FB60     		str	r3, [r7, #12]
 835:Src/main.c    **** 
 836:Src/main.c    ****   /* USER CODE END Callback 0 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 52


 837:Src/main.c    ****   if (htim->Instance == TIM6) {
 2086              		.loc 1 837 11
 2087 000c 7B68     		ldr	r3, [r7, #4]
 2088 000e 1B68     		ldr	r3, [r3]
 2089              		.loc 1 837 6
 2090 0010 044A     		ldr	r2, .L86
 2091 0012 9342     		cmp	r3, r2
 2092 0014 01D1     		bne	.L85
 838:Src/main.c    ****     HAL_IncTick();
 2093              		.loc 1 838 5
 2094 0016 FFF7FEFF 		bl	HAL_IncTick
 2095              	.L85:
 839:Src/main.c    ****   }
 840:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 841:Src/main.c    **** 
 842:Src/main.c    ****   /* USER CODE END Callback 1 */
 843:Src/main.c    **** }
 2096              		.loc 1 843 1
 2097 001a 00BF     		nop
 2098 001c 1037     		adds	r7, r7, #16
 2099              	.LCFI67:
 2100              		.cfi_def_cfa_offset 8
 2101 001e BD46     		mov	sp, r7
 2102              	.LCFI68:
 2103              		.cfi_def_cfa_register 13
 2104              		@ sp needed
 2105 0020 80BD     		pop	{r7, pc}
 2106              	.L87:
 2107 0022 00BF     		.align	2
 2108              	.L86:
 2109 0024 00100040 		.word	1073745920
 2110              		.cfi_endproc
 2111              	.LFE1110:
 2113              		.section	.text.Error_Handler,"ax",%progbits
 2114              		.align	1
 2115              		.global	Error_Handler
 2116              		.syntax unified
 2117              		.thumb
 2118              		.thumb_func
 2120              	Error_Handler:
 2121              	.LFB1111:
 844:Src/main.c    **** 
 845:Src/main.c    **** /**
 846:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 847:Src/main.c    ****   * @retval None
 848:Src/main.c    ****   */
 849:Src/main.c    **** void Error_Handler(void)
 850:Src/main.c    **** {
 2122              		.loc 1 850 1
 2123              		.cfi_startproc
 2124              		@ args = 0, pretend = 0, frame = 0
 2125              		@ frame_needed = 1, uses_anonymous_args = 0
 2126              		@ link register save eliminated.
 2127 0000 80B4     		push	{r7}
 2128              	.LCFI69:
 2129              		.cfi_def_cfa_offset 4
 2130              		.cfi_offset 7, -4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 53


 2131 0002 00AF     		add	r7, sp, #0
 2132              	.LCFI70:
 2133              		.cfi_def_cfa_register 7
 2134              	.LBB8:
 2135              	.LBB9:
 2136              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 54


  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 55


 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 56


 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2137              		.loc 2 209 3
 2138              		.syntax unified
 2139              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2140 0004 72B6     		cpsid i
 2141              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2142              		.loc 2 210 1
 2143              		.thumb
 2144              		.syntax unified
 2145 0006 00BF     		nop
 2146              	.L89:
 2147              	.LBE9:
 2148              	.LBE8:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 57


 851:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 852:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 853:Src/main.c    ****   __disable_irq();
 854:Src/main.c    ****   while (1)
 2149              		.loc 1 854 9 discriminator 1
 2150 0008 FEE7     		b	.L89
 2151              		.cfi_endproc
 2152              	.LFE1111:
 2154              		.text
 2155              	.Letext0:
 2156              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2157              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2158              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 2159              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 2160              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 2161              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 2162              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 2163              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 2164              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 2165              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
 2166              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 2167              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
 2168              		.file 15 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 2169              		.file 16 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 2170              		.file 17 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 2171              		.file 18 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2172              		.file 19 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/hall_speed_pos_fdbk.h"
 2173              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2174              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2175              		.file 22 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2176              		.file 23 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2177              		.file 24 "Inc/mc_config.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 58


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:17     .rodata:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:27     .rodata.OFFSET_TAB_CCMRx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:30     .rodata.OFFSET_TAB_CCMRx:00000000 OFFSET_TAB_CCMRx
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:33     .rodata.SHIFT_TAB_OCxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:36     .rodata.SHIFT_TAB_OCxx:00000000 SHIFT_TAB_OCxx
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:39     .rodata.SHIFT_TAB_ICxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:42     .rodata.SHIFT_TAB_ICxx:00000000 SHIFT_TAB_ICxx
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:45     .rodata.SHIFT_TAB_CCxP:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:48     .rodata.SHIFT_TAB_CCxP:00000000 SHIFT_TAB_CCxP
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:51     .rodata.SHIFT_TAB_OISx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:54     .rodata.SHIFT_TAB_OISx:00000000 SHIFT_TAB_OISx
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:57     .rodata.CHANNEL_OFFSET_TAB:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:60     .rodata.CHANNEL_OFFSET_TAB:00000000 CHANNEL_OFFSET_TAB
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:67     .bss.hadc1:00000000 hadc1
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:64     .bss.hadc1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:74     .bss.hadc2:00000000 hadc2
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:71     .bss.hadc2:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:81     .bss.hdma_adc2:00000000 hdma_adc2
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:78     .bss.hdma_adc2:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:88     .bss.htim1:00000000 htim1
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:85     .bss.htim1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:95     .bss.htim3:00000000 htim3
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:92     .bss.htim3:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:102    .bss.htim4:00000000 htim4
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:99     .bss.htim4:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:109    .bss.huart2:00000000 huart2
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:106    .bss.huart2:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:116    .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:113    .bss.hdma_usart2_rx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:123    .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:120    .bss.hdma_usart2_tx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:130    .bss.mediumFrequencyHandle:00000000 mediumFrequencyHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:127    .bss.mediumFrequencyHandle:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:137    .bss.safetyHandle:00000000 safetyHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:134    .bss.safetyHandle:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2032   .text.startMediumFrequencyTask:00000000 startMediumFrequencyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:161    .text.main:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:167    .text.main:00000000 main
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:269    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1892   .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1698   .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:479    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1004   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1317   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1617   .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:810    .text.MX_ADC2_Init:00000000 MX_ADC2_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1451   .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:769    .text.MX_ADC2_Calibration:00000000 MX_ADC2_Calibration
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:397    .text.MX_NVIC_Init:00000000 MX_NVIC_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:255    .text.main:00000088 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:263    .text.SystemClock_Config:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2120   .text.Error_Handler:00000000 Error_Handler
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:392    .text.MX_NVIC_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:474    .text.MX_ADC1_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:753    .text.MX_ADC1_Init:000001a4 $d
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 59


C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:764    .text.MX_ADC2_Calibration:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:800    .text.MX_ADC2_Calibration:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:805    .text.MX_ADC2_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:991    .text.MX_ADC2_Init:00000104 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:999    .text.MX_TIM1_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1306   .text.MX_TIM1_Init:000001e0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1312   .text.MX_TIM3_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1440   .text.MX_TIM3_Init:000000a4 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1446   .text.MX_TIM4_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1606   .text.MX_TIM4_Init:000000e0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1612   .text.MX_USART2_UART_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1687   .text.MX_USART2_UART_Init:00000058 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1693   .text.MX_DMA_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1749   .text.MX_DMA_Init:00000038 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1754   .text.HAL_ADC_ConvCpltCallback:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1760   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1839   .text.HAL_ADC_ConvCpltCallback:0000005c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1845   .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1851   .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:1887   .text.MX_GPIO_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2019   .text.MX_GPIO_Init:000000c4 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2026   .text.startMediumFrequencyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2059   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2065   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2109   .text.HAL_TIM_PeriodElapsedCallback:00000024 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s:2114   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
StartSafetyTask
HAL_Init
MX_MotorControl_Init
osThreadCreate
osKernelStart
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADCEx_DisableInjectedQueue
HAL_ADCEx_InjectedConfigChannel
HAL_ADC_ConfigChannel
HAL_ADCEx_Calibration_Start
HAL_ADC_Start_DMA
HALL_M1
HAL_TIM_Base_Init
HAL_TIM_PWM_Init
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
HAL_TIMEx_ConfigBreakInput
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
HAL_TIM_ConfigClockSource
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccji0K6e.s 			page 60


HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_IncTick
