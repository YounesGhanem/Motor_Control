ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.section	.rodata
  17              		.align	2
  18              	.LC0:
  19 0000 6D656469 		.ascii	"mediumFrequency\000"
  19      756D4672 
  19      65717565 
  19      6E637900 
  20              		.align	2
  21              	.LC2:
  22 0010 73616665 		.ascii	"safety\000"
  22      747900
  23              		.text
  24              	.Ltext0:
  25              		.cfi_sections	.debug_frame
  26              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  27              		.align	2
  30              	OFFSET_TAB_CCMRx:
  31 0000 00000000 		.ascii	"\000\000\000\000\004\004\004<<"
  31      0404043C 
  31      3C
  32              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  33              		.align	2
  36              	SHIFT_TAB_OCxx:
  37 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\010"
  37      00000800 
  37      08
  38              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  39              		.align	2
  42              	SHIFT_TAB_ICxx:
  43 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000"
  43      00000800 
  43      00
  44              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  45              		.align	2
  48              	SHIFT_TAB_CCxP:
  49 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\020\024"
  49      080A0C10 
  49      14
  50              		.section	.rodata.SHIFT_TAB_OISx,"a"
  51              		.align	2
  54              	SHIFT_TAB_OISx:
  55 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\010\012"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 2


  55      04050608 
  55      0A
  56              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
  57              		.align	2
  60              	CHANNEL_OFFSET_TAB:
  61 0000 081C3044 		.ascii	"\010\0340DXl\200"
  61      586C80
  62              		.global	hadc1
  63              		.section	.bss.hadc1,"aw",%nobits
  64              		.align	2
  67              	hadc1:
  68 0000 00000000 		.space	100
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.global	hadc2
  70              		.section	.bss.hadc2,"aw",%nobits
  71              		.align	2
  74              	hadc2:
  75 0000 00000000 		.space	100
  75      00000000 
  75      00000000 
  75      00000000 
  75      00000000 
  76              		.global	htim1
  77              		.section	.bss.htim1,"aw",%nobits
  78              		.align	2
  81              	htim1:
  82 0000 00000000 		.space	76
  82      00000000 
  82      00000000 
  82      00000000 
  82      00000000 
  83              		.global	htim3
  84              		.section	.bss.htim3,"aw",%nobits
  85              		.align	2
  88              	htim3:
  89 0000 00000000 		.space	76
  89      00000000 
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.global	htim4
  91              		.section	.bss.htim4,"aw",%nobits
  92              		.align	2
  95              	htim4:
  96 0000 00000000 		.space	76
  96      00000000 
  96      00000000 
  96      00000000 
  96      00000000 
  97              		.global	huart2
  98              		.section	.bss.huart2,"aw",%nobits
  99              		.align	2
 102              	huart2:
 103 0000 00000000 		.space	136
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 3


 103      00000000 
 103      00000000 
 103      00000000 
 103      00000000 
 104              		.global	hdma_usart2_rx
 105              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 106              		.align	2
 109              	hdma_usart2_rx:
 110 0000 00000000 		.space	72
 110      00000000 
 110      00000000 
 110      00000000 
 110      00000000 
 111              		.global	hdma_usart2_tx
 112              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 113              		.align	2
 116              	hdma_usart2_tx:
 117 0000 00000000 		.space	72
 117      00000000 
 117      00000000 
 117      00000000 
 117      00000000 
 118              		.global	mediumFrequencyHandle
 119              		.section	.bss.mediumFrequencyHandle,"aw",%nobits
 120              		.align	2
 123              	mediumFrequencyHandle:
 124 0000 00000000 		.space	4
 125              		.global	safetyHandle
 126              		.section	.bss.safetyHandle,"aw",%nobits
 127              		.align	2
 130              	safetyHandle:
 131 0000 00000000 		.space	4
 132              		.section	.rodata
 133 0017 00       		.align	2
 134              	.LC4:
 135 0018 00000000 		.word	.LC0
 136 001c 00000000 		.word	startMediumFrequencyTask
 137 0020 0000     		.short	0
 138 0022 0000     		.space	2
 139 0024 00000000 		.word	0
 140 0028 80000000 		.word	128
 141 002c 00000000 		.word	0
 142 0030 00000000 		.word	0
 143              		.align	2
 144              	.LC5:
 145 0034 10000000 		.word	.LC2
 146 0038 00000000 		.word	StartSafetyTask
 147 003c 0100     		.short	1
 148 003e 0000     		.space	2
 149 0040 00000000 		.word	0
 150 0044 80000000 		.word	128
 151 0048 00000000 		.word	0
 152 004c 00000000 		.word	0
 153              		.section	.text.main,"ax",%progbits
 154              		.align	1
 155              		.global	main
 156              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 4


 157              		.thumb
 158              		.thumb_func
 160              	main:
 161              	.LFB1095:
 162              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2024 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "cmsis_os.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  24:Src/main.c    **** /* USER CODE BEGIN Includes */
  25:Src/main.c    **** 
  26:Src/main.c    **** /* USER CODE END Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  29:Src/main.c    **** /* USER CODE BEGIN PTD */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* USER CODE END PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  34:Src/main.c    **** /* USER CODE BEGIN PD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* USER CODE END PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PM */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  44:Src/main.c    **** ADC_HandleTypeDef hadc1;
  45:Src/main.c    **** ADC_HandleTypeDef hadc2;
  46:Src/main.c    **** 
  47:Src/main.c    **** TIM_HandleTypeDef htim1;
  48:Src/main.c    **** TIM_HandleTypeDef htim3;
  49:Src/main.c    **** TIM_HandleTypeDef htim4;
  50:Src/main.c    **** 
  51:Src/main.c    **** UART_HandleTypeDef huart2;
  52:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_rx;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 5


  53:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_tx;
  54:Src/main.c    **** 
  55:Src/main.c    **** osThreadId mediumFrequencyHandle;
  56:Src/main.c    **** osThreadId safetyHandle;
  57:Src/main.c    **** /* USER CODE BEGIN PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PV */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  62:Src/main.c    **** void SystemClock_Config(void);
  63:Src/main.c    **** static void MX_GPIO_Init(void);
  64:Src/main.c    **** static void MX_DMA_Init(void);
  65:Src/main.c    **** static void MX_ADC1_Init(void);
  66:Src/main.c    **** static void MX_TIM1_Init(void);
  67:Src/main.c    **** static void MX_TIM3_Init(void);
  68:Src/main.c    **** static void MX_USART2_UART_Init(void);
  69:Src/main.c    **** static void MX_ADC2_Init(void);
  70:Src/main.c    **** static void MX_TIM4_Init(void);
  71:Src/main.c    **** void startMediumFrequencyTask(void const * argument);
  72:Src/main.c    **** extern void StartSafetyTask(void const * argument);
  73:Src/main.c    **** 
  74:Src/main.c    **** static void MX_NVIC_Init(void);
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  80:Src/main.c    **** /* USER CODE BEGIN 0 */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /**
  85:Src/main.c    ****   * @brief  The application entry point.
  86:Src/main.c    ****   * @retval int
  87:Src/main.c    ****   */
  88:Src/main.c    **** int main(void)
  89:Src/main.c    **** {
 163              		.loc 1 89 1
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 56
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167 0000 B0B5     		push	{r4, r5, r7, lr}
 168              	.LCFI0:
 169              		.cfi_def_cfa_offset 16
 170              		.cfi_offset 4, -16
 171              		.cfi_offset 5, -12
 172              		.cfi_offset 7, -8
 173              		.cfi_offset 14, -4
 174 0002 8EB0     		sub	sp, sp, #56
 175              	.LCFI1:
 176              		.cfi_def_cfa_offset 72
 177 0004 00AF     		add	r7, sp, #0
 178              	.LCFI2:
 179              		.cfi_def_cfa_register 7
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
  92:Src/main.c    **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 6


  93:Src/main.c    ****   /* USER CODE END 1 */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  98:Src/main.c    ****   HAL_Init();
 180              		.loc 1 98 3
 181 0006 FFF7FEFF 		bl	HAL_Init
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE BEGIN Init */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE END Init */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* Configure the system clock */
 105:Src/main.c    ****   SystemClock_Config();
 182              		.loc 1 105 3
 183 000a FFF7FEFF 		bl	SystemClock_Config
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE END SysInit */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* Initialize all configured peripherals */
 112:Src/main.c    ****   MX_GPIO_Init();
 184              		.loc 1 112 3
 185 000e FFF7FEFF 		bl	MX_GPIO_Init
 113:Src/main.c    ****   MX_DMA_Init();
 186              		.loc 1 113 3
 187 0012 FFF7FEFF 		bl	MX_DMA_Init
 114:Src/main.c    ****   MX_ADC1_Init();
 188              		.loc 1 114 3
 189 0016 FFF7FEFF 		bl	MX_ADC1_Init
 115:Src/main.c    ****   MX_TIM1_Init();
 190              		.loc 1 115 3
 191 001a FFF7FEFF 		bl	MX_TIM1_Init
 116:Src/main.c    ****   MX_TIM3_Init();
 192              		.loc 1 116 3
 193 001e FFF7FEFF 		bl	MX_TIM3_Init
 117:Src/main.c    ****   MX_USART2_UART_Init();
 194              		.loc 1 117 3
 195 0022 FFF7FEFF 		bl	MX_USART2_UART_Init
 118:Src/main.c    ****   MX_MotorControl_Init();
 196              		.loc 1 118 3
 197 0026 FFF7FEFF 		bl	MX_MotorControl_Init
 119:Src/main.c    ****   MX_ADC2_Init();
 198              		.loc 1 119 3
 199 002a FFF7FEFF 		bl	MX_ADC2_Init
 120:Src/main.c    ****   MX_TIM4_Init();
 200              		.loc 1 120 3
 201 002e FFF7FEFF 		bl	MX_TIM4_Init
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Initialize interrupts */
 123:Src/main.c    ****   MX_NVIC_Init();
 202              		.loc 1 123 3
 203 0032 FFF7FEFF 		bl	MX_NVIC_Init
 124:Src/main.c    **** 
 125:Src/main.c    ****   //HAL_ADC_Start_DMA(&hadc2, (uint32_t)* rawValues, 2);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 7


 126:Src/main.c    **** 
 127:Src/main.c    ****     // calibrate ADC for better accuracy and start it w/ interrupt
 128:Src/main.c    ****   if(HAL_ADCEx_Calibration_Start(&hadc2,  ADC_SINGLE_ENDED) != HAL_OK)
 204              		.loc 1 128 6
 205 0036 7F21     		movs	r1, #127
 206 0038 2148     		ldr	r0, .L6
 207 003a FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 208 003e 0346     		mov	r3, r0
 209              		.loc 1 128 5
 210 0040 002B     		cmp	r3, #0
 211 0042 01D0     		beq	.L2
 129:Src/main.c    **** 	  Error_Handler();
 212              		.loc 1 129 4
 213 0044 FFF7FEFF 		bl	Error_Handler
 214              	.L2:
 130:Src/main.c    **** 
 131:Src/main.c    ****   if(HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 215              		.loc 1 131 6
 216 0048 1D48     		ldr	r0, .L6
 217 004a FFF7FEFF 		bl	HAL_ADC_Start_IT
 218 004e 0346     		mov	r3, r0
 219              		.loc 1 131 5
 220 0050 002B     		cmp	r3, #0
 221 0052 01D0     		beq	.L3
 132:Src/main.c    **** 	  Error_Handler();
 222              		.loc 1 132 4
 223 0054 FFF7FEFF 		bl	Error_Handler
 224              	.L3:
 133:Src/main.c    **** 
 134:Src/main.c    ****   // start pwm generation
 135:Src/main.c    ****   if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 225              		.loc 1 135 6
 226 0058 0021     		movs	r1, #0
 227 005a 1A48     		ldr	r0, .L6+4
 228 005c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 229 0060 0346     		mov	r3, r0
 230              		.loc 1 135 5
 231 0062 002B     		cmp	r3, #0
 232 0064 01D0     		beq	.L4
 136:Src/main.c    **** 	  Error_Handler();
 233              		.loc 1 136 4
 234 0066 FFF7FEFF 		bl	Error_Handler
 235              	.L4:
 137:Src/main.c    **** 
 138:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim4); //Start the timer
 236              		.loc 1 138 3
 237 006a 1648     		ldr	r0, .L6+4
 238 006c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 139:Src/main.c    ****   /* USER CODE BEGIN 2 */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* USER CODE END 2 */
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 144:Src/main.c    ****   /* add mutexes, ... */
 145:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 8


 148:Src/main.c    ****   /* add semaphores, ... */
 149:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 152:Src/main.c    ****   /* start timers, add new ones, ... */
 153:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 156:Src/main.c    ****   /* add queues, ... */
 157:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 158:Src/main.c    **** 
 159:Src/main.c    ****   /* Create the thread(s) */
 160:Src/main.c    ****   /* definition and creation of mediumFrequency */
 161:Src/main.c    ****    osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 239              		.loc 1 161 4
 240 0070 154B     		ldr	r3, .L6+8
 241 0072 07F11C04 		add	r4, r7, #28
 242 0076 1D46     		mov	r5, r3
 243 0078 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 244 007a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 245 007c 95E80700 		ldm	r5, {r0, r1, r2}
 246 0080 84E80700 		stm	r4, {r0, r1, r2}
 162:Src/main.c    ****    mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 247              		.loc 1 162 28
 248 0084 07F11C03 		add	r3, r7, #28
 249 0088 0021     		movs	r1, #0
 250 008a 1846     		mov	r0, r3
 251 008c FFF7FEFF 		bl	osThreadCreate
 252 0090 0346     		mov	r3, r0
 253              		.loc 1 162 26
 254 0092 0E4A     		ldr	r2, .L6+12
 255 0094 1360     		str	r3, [r2]
 163:Src/main.c    **** 
 164:Src/main.c    **** 
 165:Src/main.c    ****   /* definition and creation of safety */
 166:Src/main.c    ****   osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 256              		.loc 1 166 3
 257 0096 0E4B     		ldr	r3, .L6+16
 258 0098 3C46     		mov	r4, r7
 259 009a 1D46     		mov	r5, r3
 260 009c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 261 009e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 262 00a0 95E80700 		ldm	r5, {r0, r1, r2}
 263 00a4 84E80700 		stm	r4, {r0, r1, r2}
 167:Src/main.c    ****   safetyHandle = osThreadCreate(osThread(safety), NULL);
 264              		.loc 1 167 18
 265 00a8 3B46     		mov	r3, r7
 266 00aa 0021     		movs	r1, #0
 267 00ac 1846     		mov	r0, r3
 268 00ae FFF7FEFF 		bl	osThreadCreate
 269 00b2 0346     		mov	r3, r0
 270              		.loc 1 167 16
 271 00b4 074A     		ldr	r2, .L6+20
 272 00b6 1360     		str	r3, [r2]
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 170:Src/main.c    ****   /* add threads, ... */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 9


 171:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 172:Src/main.c    **** 
 173:Src/main.c    ****   /* Start scheduler */
 174:Src/main.c    ****   osKernelStart();
 273              		.loc 1 174 3
 274 00b8 FFF7FEFF 		bl	osKernelStart
 275              	.L5:
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 177:Src/main.c    **** 
 178:Src/main.c    ****   /* Infinite loop */
 179:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 180:Src/main.c    ****   while (1)
 276              		.loc 1 180 9 discriminator 1
 277 00bc FEE7     		b	.L5
 278              	.L7:
 279 00be 00BF     		.align	2
 280              	.L6:
 281 00c0 00000000 		.word	hadc2
 282 00c4 00000000 		.word	htim4
 283 00c8 18000000 		.word	.LC4
 284 00cc 00000000 		.word	mediumFrequencyHandle
 285 00d0 34000000 		.word	.LC5
 286 00d4 00000000 		.word	safetyHandle
 287              		.cfi_endproc
 288              	.LFE1095:
 290              		.section	.text.SystemClock_Config,"ax",%progbits
 291              		.align	1
 292              		.global	SystemClock_Config
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 297              	SystemClock_Config:
 298              	.LFB1096:
 181:Src/main.c    ****   {
 182:Src/main.c    ****     /* USER CODE END WHILE */
 183:Src/main.c    **** 
 184:Src/main.c    ****     /* USER CODE BEGIN 3 */
 185:Src/main.c    ****   }
 186:Src/main.c    ****   /* USER CODE END 3 */
 187:Src/main.c    **** }
 188:Src/main.c    **** 
 189:Src/main.c    **** 
 190:Src/main.c    **** /**
 191:Src/main.c    ****   * @brief System Clock Configuration
 192:Src/main.c    ****   * @retval None
 193:Src/main.c    ****   */
 194:Src/main.c    **** void SystemClock_Config(void)
 195:Src/main.c    **** {
 299              		.loc 1 195 1
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 88
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              	.LCFI3:
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 7, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 10


 307              		.cfi_offset 14, -4
 308 0002 96B0     		sub	sp, sp, #88
 309              	.LCFI4:
 310              		.cfi_def_cfa_offset 96
 311 0004 00AF     		add	r7, sp, #0
 312              	.LCFI5:
 313              		.cfi_def_cfa_register 7
 196:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 314              		.loc 1 196 22
 315 0006 07F11403 		add	r3, r7, #20
 316 000a 4422     		movs	r2, #68
 317 000c 0021     		movs	r1, #0
 318 000e 1846     		mov	r0, r3
 319 0010 FFF7FEFF 		bl	memset
 197:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 320              		.loc 1 197 22
 321 0014 3B46     		mov	r3, r7
 322 0016 0022     		movs	r2, #0
 323 0018 1A60     		str	r2, [r3]
 324 001a 5A60     		str	r2, [r3, #4]
 325 001c 9A60     		str	r2, [r3, #8]
 326 001e DA60     		str	r2, [r3, #12]
 327 0020 1A61     		str	r2, [r3, #16]
 198:Src/main.c    **** 
 199:Src/main.c    ****   /** Configure the main internal regulator output voltage
 200:Src/main.c    ****   */
 201:Src/main.c    ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 328              		.loc 1 201 7
 329 0022 4FF40070 		mov	r0, #512
 330 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 331 002a 0346     		mov	r3, r0
 332              		.loc 1 201 6
 333 002c 002B     		cmp	r3, #0
 334 002e 01D0     		beq	.L9
 202:Src/main.c    ****   {
 203:Src/main.c    ****     Error_Handler();
 335              		.loc 1 203 5
 336 0030 FFF7FEFF 		bl	Error_Handler
 337              	.L9:
 204:Src/main.c    ****   }
 205:Src/main.c    **** 
 206:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 207:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 208:Src/main.c    ****   */
 209:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 338              		.loc 1 209 36
 339 0034 0223     		movs	r3, #2
 340 0036 7B61     		str	r3, [r7, #20]
 210:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 341              		.loc 1 210 30
 342 0038 4FF48073 		mov	r3, #256
 343 003c 3B62     		str	r3, [r7, #32]
 211:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 344              		.loc 1 211 41
 345 003e 1023     		movs	r3, #16
 346 0040 7B62     		str	r3, [r7, #36]
 212:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 11


 347              		.loc 1 212 34
 348 0042 0223     		movs	r3, #2
 349 0044 FB63     		str	r3, [r7, #60]
 213:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 350              		.loc 1 213 35
 351 0046 0223     		movs	r3, #2
 352 0048 3B64     		str	r3, [r7, #64]
 214:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 2;
 353              		.loc 1 214 30
 354 004a 0223     		movs	r3, #2
 355 004c 7B64     		str	r3, [r7, #68]
 215:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 20;
 356              		.loc 1 215 30
 357 004e 1423     		movs	r3, #20
 358 0050 BB64     		str	r3, [r7, #72]
 216:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 359              		.loc 1 216 30
 360 0052 0723     		movs	r3, #7
 361 0054 FB64     		str	r3, [r7, #76]
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 362              		.loc 1 217 30
 363 0056 0223     		movs	r3, #2
 364 0058 3B65     		str	r3, [r7, #80]
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 365              		.loc 1 218 30
 366 005a 0223     		movs	r3, #2
 367 005c 7B65     		str	r3, [r7, #84]
 219:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 368              		.loc 1 219 7
 369 005e 07F11403 		add	r3, r7, #20
 370 0062 1846     		mov	r0, r3
 371 0064 FFF7FEFF 		bl	HAL_RCC_OscConfig
 372 0068 0346     		mov	r3, r0
 373              		.loc 1 219 6
 374 006a 002B     		cmp	r3, #0
 375 006c 01D0     		beq	.L10
 220:Src/main.c    ****   {
 221:Src/main.c    ****     Error_Handler();
 376              		.loc 1 221 5
 377 006e FFF7FEFF 		bl	Error_Handler
 378              	.L10:
 222:Src/main.c    ****   }
 223:Src/main.c    **** 
 224:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 225:Src/main.c    ****   */
 226:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 379              		.loc 1 226 31
 380 0072 0F23     		movs	r3, #15
 381 0074 3B60     		str	r3, [r7]
 227:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 228:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 382              		.loc 1 228 34
 383 0076 0323     		movs	r3, #3
 384 0078 7B60     		str	r3, [r7, #4]
 229:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 385              		.loc 1 229 35
 386 007a 0023     		movs	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 12


 387 007c BB60     		str	r3, [r7, #8]
 230:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 388              		.loc 1 230 36
 389 007e 0023     		movs	r3, #0
 390 0080 FB60     		str	r3, [r7, #12]
 231:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 391              		.loc 1 231 36
 392 0082 0023     		movs	r3, #0
 393 0084 3B61     		str	r3, [r7, #16]
 232:Src/main.c    **** 
 233:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 394              		.loc 1 233 7
 395 0086 3B46     		mov	r3, r7
 396 0088 0421     		movs	r1, #4
 397 008a 1846     		mov	r0, r3
 398 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 399 0090 0346     		mov	r3, r0
 400              		.loc 1 233 6
 401 0092 002B     		cmp	r3, #0
 402 0094 01D0     		beq	.L12
 234:Src/main.c    ****   {
 235:Src/main.c    ****     Error_Handler();
 403              		.loc 1 235 5
 404 0096 FFF7FEFF 		bl	Error_Handler
 405              	.L12:
 236:Src/main.c    ****   }
 237:Src/main.c    **** }
 406              		.loc 1 237 1
 407 009a 00BF     		nop
 408 009c 5837     		adds	r7, r7, #88
 409              	.LCFI6:
 410              		.cfi_def_cfa_offset 8
 411 009e BD46     		mov	sp, r7
 412              	.LCFI7:
 413              		.cfi_def_cfa_register 13
 414              		@ sp needed
 415 00a0 80BD     		pop	{r7, pc}
 416              		.cfi_endproc
 417              	.LFE1096:
 419              		.section	.text.MX_NVIC_Init,"ax",%progbits
 420              		.align	1
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 425              	MX_NVIC_Init:
 426              	.LFB1097:
 238:Src/main.c    **** 
 239:Src/main.c    **** /**
 240:Src/main.c    ****   * @brief NVIC Configuration.
 241:Src/main.c    ****   * @retval None
 242:Src/main.c    ****   */
 243:Src/main.c    **** static void MX_NVIC_Init(void)
 244:Src/main.c    **** {
 427              		.loc 1 244 1
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 13


 431 0000 80B5     		push	{r7, lr}
 432              	.LCFI8:
 433              		.cfi_def_cfa_offset 8
 434              		.cfi_offset 7, -8
 435              		.cfi_offset 14, -4
 436 0002 00AF     		add	r7, sp, #0
 437              	.LCFI9:
 438              		.cfi_def_cfa_register 7
 245:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
 246:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 439              		.loc 1 246 3
 440 0004 0022     		movs	r2, #0
 441 0006 0321     		movs	r1, #3
 442 0008 2620     		movs	r0, #38
 443 000a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 247:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 444              		.loc 1 247 3
 445 000e 2620     		movs	r0, #38
 446 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 248:Src/main.c    ****   /* DMA1_Channel6_IRQn interrupt configuration */
 249:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 447              		.loc 1 249 3
 448 0014 0022     		movs	r2, #0
 449 0016 0321     		movs	r1, #3
 450 0018 1020     		movs	r0, #16
 451 001a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 452              		.loc 1 250 3
 453 001e 1020     		movs	r0, #16
 454 0020 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 251:Src/main.c    ****   /* TIM1_BRK_TIM15_IRQn interrupt configuration */
 252:Src/main.c    ****   HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 0);
 455              		.loc 1 252 3
 456 0024 0022     		movs	r2, #0
 457 0026 0421     		movs	r1, #4
 458 0028 1820     		movs	r0, #24
 459 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 253:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 460              		.loc 1 253 3
 461 002e 1820     		movs	r0, #24
 462 0030 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254:Src/main.c    ****   /* TIM1_UP_TIM16_IRQn interrupt configuration */
 255:Src/main.c    ****   HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 463              		.loc 1 255 3
 464 0034 0022     		movs	r2, #0
 465 0036 0021     		movs	r1, #0
 466 0038 1920     		movs	r0, #25
 467 003a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 256:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 468              		.loc 1 256 3
 469 003e 1920     		movs	r0, #25
 470 0040 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 257:Src/main.c    ****   /* ADC1_2_IRQn interrupt configuration */
 258:Src/main.c    ****   HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 471              		.loc 1 258 3
 472 0044 0022     		movs	r2, #0
 473 0046 0221     		movs	r1, #2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 14


 474 0048 1220     		movs	r0, #18
 475 004a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 259:Src/main.c    ****   HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 476              		.loc 1 259 3
 477 004e 1220     		movs	r0, #18
 478 0050 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 260:Src/main.c    ****   /* TIM3_IRQn interrupt configuration */
 261:Src/main.c    ****   HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 479              		.loc 1 261 3
 480 0054 0022     		movs	r2, #0
 481 0056 0321     		movs	r1, #3
 482 0058 1D20     		movs	r0, #29
 483 005a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 484              		.loc 1 262 3
 485 005e 1D20     		movs	r0, #29
 486 0060 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 263:Src/main.c    ****   /* EXTI15_10_IRQn interrupt configuration */
 264:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 487              		.loc 1 264 3
 488 0064 0022     		movs	r2, #0
 489 0066 0321     		movs	r1, #3
 490 0068 2820     		movs	r0, #40
 491 006a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 265:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 492              		.loc 1 265 3
 493 006e 2820     		movs	r0, #40
 494 0070 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 266:Src/main.c    **** }
 495              		.loc 1 266 1
 496 0074 00BF     		nop
 497 0076 80BD     		pop	{r7, pc}
 498              		.cfi_endproc
 499              	.LFE1097:
 501              		.section	.text.MX_ADC1_Init,"ax",%progbits
 502              		.align	1
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 507              	MX_ADC1_Init:
 508              	.LFB1098:
 267:Src/main.c    **** 
 268:Src/main.c    **** /**
 269:Src/main.c    ****   * @brief ADC1 Initialization Function
 270:Src/main.c    ****   * @param None
 271:Src/main.c    ****   * @retval None
 272:Src/main.c    ****   */
 273:Src/main.c    **** static void MX_ADC1_Init(void)
 274:Src/main.c    **** {
 509              		.loc 1 274 1
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 88
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513 0000 80B5     		push	{r7, lr}
 514              	.LCFI10:
 515              		.cfi_def_cfa_offset 8
 516              		.cfi_offset 7, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 15


 517              		.cfi_offset 14, -4
 518 0002 96B0     		sub	sp, sp, #88
 519              	.LCFI11:
 520              		.cfi_def_cfa_offset 96
 521 0004 00AF     		add	r7, sp, #0
 522              	.LCFI12:
 523              		.cfi_def_cfa_register 7
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 279:Src/main.c    **** 
 280:Src/main.c    ****   ADC_MultiModeTypeDef multimode = {0};
 524              		.loc 1 280 24
 525 0006 07F14C03 		add	r3, r7, #76
 526 000a 0022     		movs	r2, #0
 527 000c 1A60     		str	r2, [r3]
 528 000e 5A60     		str	r2, [r3, #4]
 529 0010 9A60     		str	r2, [r3, #8]
 281:Src/main.c    ****   ADC_InjectionConfTypeDef sConfigInjected = {0};
 530              		.loc 1 281 28
 531 0012 07F11803 		add	r3, r7, #24
 532 0016 3422     		movs	r2, #52
 533 0018 0021     		movs	r1, #0
 534 001a 1846     		mov	r0, r3
 535 001c FFF7FEFF 		bl	memset
 282:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 536              		.loc 1 282 26
 537 0020 3B46     		mov	r3, r7
 538 0022 0022     		movs	r2, #0
 539 0024 1A60     		str	r2, [r3]
 540 0026 5A60     		str	r2, [r3, #4]
 541 0028 9A60     		str	r2, [r3, #8]
 542 002a DA60     		str	r2, [r3, #12]
 543 002c 1A61     		str	r2, [r3, #16]
 544 002e 5A61     		str	r2, [r3, #20]
 283:Src/main.c    **** 
 284:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 285:Src/main.c    **** 
 286:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 287:Src/main.c    **** 
 288:Src/main.c    ****   /** Common config
 289:Src/main.c    ****   */
 290:Src/main.c    ****   hadc1.Instance = ADC1;
 545              		.loc 1 290 18
 546 0030 5C4B     		ldr	r3, .L23
 547 0032 5D4A     		ldr	r2, .L23+4
 548 0034 1A60     		str	r2, [r3]
 291:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 549              		.loc 1 291 29
 550 0036 5B4B     		ldr	r3, .L23
 551 0038 0022     		movs	r2, #0
 552 003a 5A60     		str	r2, [r3, #4]
 292:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 553              		.loc 1 292 25
 554 003c 594B     		ldr	r3, .L23
 555 003e 0022     		movs	r2, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 16


 556 0040 9A60     		str	r2, [r3, #8]
 293:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 557              		.loc 1 293 24
 558 0042 584B     		ldr	r3, .L23
 559 0044 2022     		movs	r2, #32
 560 0046 DA60     		str	r2, [r3, #12]
 294:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 561              		.loc 1 294 27
 562 0048 564B     		ldr	r3, .L23
 563 004a 0122     		movs	r2, #1
 564 004c 1A61     		str	r2, [r3, #16]
 295:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 565              		.loc 1 295 27
 566 004e 554B     		ldr	r3, .L23
 567 0050 0422     		movs	r2, #4
 568 0052 5A61     		str	r2, [r3, #20]
 296:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 569              		.loc 1 296 31
 570 0054 534B     		ldr	r3, .L23
 571 0056 0022     		movs	r2, #0
 572 0058 1A76     		strb	r2, [r3, #24]
 297:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 573              		.loc 1 297 33
 574 005a 524B     		ldr	r3, .L23
 575 005c 0022     		movs	r2, #0
 576 005e 5A76     		strb	r2, [r3, #25]
 298:Src/main.c    ****   hadc1.Init.NbrOfConversion = 2;
 577              		.loc 1 298 30
 578 0060 504B     		ldr	r3, .L23
 579 0062 0222     		movs	r2, #2
 580 0064 DA61     		str	r2, [r3, #28]
 299:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 581              		.loc 1 299 36
 582 0066 4F4B     		ldr	r3, .L23
 583 0068 0022     		movs	r2, #0
 584 006a 83F82020 		strb	r2, [r3, #32]
 300:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 585              		.loc 1 300 31
 586 006e 4D4B     		ldr	r3, .L23
 587 0070 0022     		movs	r2, #0
 588 0072 9A62     		str	r2, [r3, #40]
 301:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 589              		.loc 1 301 35
 590 0074 4B4B     		ldr	r3, .L23
 591 0076 0022     		movs	r2, #0
 592 0078 DA62     		str	r2, [r3, #44]
 302:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 593              		.loc 1 302 36
 594 007a 4A4B     		ldr	r3, .L23
 595 007c 0022     		movs	r2, #0
 596 007e 83F83020 		strb	r2, [r3, #48]
 303:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 597              		.loc 1 303 22
 598 0082 484B     		ldr	r3, .L23
 599 0084 0022     		movs	r2, #0
 600 0086 5A63     		str	r2, [r3, #52]
 304:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 17


 601              		.loc 1 304 31
 602 0088 464B     		ldr	r3, .L23
 603 008a 0022     		movs	r2, #0
 604 008c 83F83820 		strb	r2, [r3, #56]
 305:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 605              		.loc 1 305 7
 606 0090 4448     		ldr	r0, .L23
 607 0092 FFF7FEFF 		bl	HAL_ADC_Init
 608 0096 0346     		mov	r3, r0
 609              		.loc 1 305 6
 610 0098 002B     		cmp	r3, #0
 611 009a 01D0     		beq	.L15
 306:Src/main.c    ****   {
 307:Src/main.c    ****     Error_Handler();
 612              		.loc 1 307 5
 613 009c FFF7FEFF 		bl	Error_Handler
 614              	.L15:
 308:Src/main.c    ****   }
 309:Src/main.c    **** 
 310:Src/main.c    ****   /** Configure the ADC multi-mode
 311:Src/main.c    ****   */
 312:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 615              		.loc 1 312 18
 616 00a0 0023     		movs	r3, #0
 617 00a2 FB64     		str	r3, [r7, #76]
 313:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 618              		.loc 1 313 7
 619 00a4 07F14C03 		add	r3, r7, #76
 620 00a8 1946     		mov	r1, r3
 621 00aa 3E48     		ldr	r0, .L23
 622 00ac FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 623 00b0 0346     		mov	r3, r0
 624              		.loc 1 313 6
 625 00b2 002B     		cmp	r3, #0
 626 00b4 01D0     		beq	.L16
 314:Src/main.c    ****   {
 315:Src/main.c    ****     Error_Handler();
 627              		.loc 1 315 5
 628 00b6 FFF7FEFF 		bl	Error_Handler
 629              	.L16:
 316:Src/main.c    ****   }
 317:Src/main.c    **** 
 318:Src/main.c    ****   /** Disable Injected Queue
 319:Src/main.c    ****   */
 320:Src/main.c    ****   HAL_ADCEx_DisableInjectedQueue(&hadc1);
 630              		.loc 1 320 3
 631 00ba 3A48     		ldr	r0, .L23
 632 00bc FFF7FEFF 		bl	HAL_ADCEx_DisableInjectedQueue
 321:Src/main.c    **** 
 322:Src/main.c    ****   /** Configure Injected Channel
 323:Src/main.c    ****   */
 324:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 633              		.loc 1 324 35
 634 00c0 3A4B     		ldr	r3, .L23+8
 635 00c2 BB61     		str	r3, [r7, #24]
 325:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 636              		.loc 1 325 32
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 18


 637 00c4 0823     		movs	r3, #8
 638 00c6 FB61     		str	r3, [r7, #28]
 326:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 639              		.loc 1 326 40
 640 00c8 0223     		movs	r3, #2
 641 00ca 3B62     		str	r3, [r7, #32]
 327:Src/main.c    ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 642              		.loc 1 327 38
 643 00cc 7F23     		movs	r3, #127
 644 00ce 7B62     		str	r3, [r7, #36]
 328:Src/main.c    ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 645              		.loc 1 328 40
 646 00d0 0423     		movs	r3, #4
 647 00d2 BB62     		str	r3, [r7, #40]
 329:Src/main.c    ****   sConfigInjected.InjectedOffset = 0;
 648              		.loc 1 329 34
 649 00d4 0023     		movs	r3, #0
 650 00d6 FB62     		str	r3, [r7, #44]
 330:Src/main.c    ****   sConfigInjected.InjectedNbrOfConversion = 3;
 651              		.loc 1 330 43
 652 00d8 0323     		movs	r3, #3
 653 00da 3B63     		str	r3, [r7, #48]
 331:Src/main.c    ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 654              		.loc 1 331 49
 655 00dc 0023     		movs	r3, #0
 656 00de 87F83430 		strb	r3, [r7, #52]
 332:Src/main.c    ****   sConfigInjected.AutoInjectedConv = DISABLE;
 657              		.loc 1 332 36
 658 00e2 0023     		movs	r3, #0
 659 00e4 87F83530 		strb	r3, [r7, #53]
 333:Src/main.c    ****   sConfigInjected.QueueInjectedContext = DISABLE;
 660              		.loc 1 333 40
 661 00e8 0023     		movs	r3, #0
 662 00ea 87F83630 		strb	r3, [r7, #54]
 334:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 663              		.loc 1 334 41
 664 00ee 4023     		movs	r3, #64
 665 00f0 BB63     		str	r3, [r7, #56]
 335:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 666              		.loc 1 335 45
 667 00f2 4023     		movs	r3, #64
 668 00f4 FB63     		str	r3, [r7, #60]
 336:Src/main.c    ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 669              		.loc 1 336 41
 670 00f6 0023     		movs	r3, #0
 671 00f8 87F84030 		strb	r3, [r7, #64]
 337:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 672              		.loc 1 337 7
 673 00fc 07F11803 		add	r3, r7, #24
 674 0100 1946     		mov	r1, r3
 675 0102 2848     		ldr	r0, .L23
 676 0104 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 677 0108 0346     		mov	r3, r0
 678              		.loc 1 337 6
 679 010a 002B     		cmp	r3, #0
 680 010c 01D0     		beq	.L17
 338:Src/main.c    ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 19


 339:Src/main.c    ****     Error_Handler();
 681              		.loc 1 339 5
 682 010e FFF7FEFF 		bl	Error_Handler
 683              	.L17:
 340:Src/main.c    ****   }
 341:Src/main.c    **** 
 342:Src/main.c    ****   /** Configure Injected Channel
 343:Src/main.c    ****   */
 344:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_16;
 684              		.loc 1 344 35
 685 0112 274B     		ldr	r3, .L23+12
 686 0114 BB61     		str	r3, [r7, #24]
 345:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 687              		.loc 1 345 32
 688 0116 4FF48773 		mov	r3, #270
 689 011a FB61     		str	r3, [r7, #28]
 346:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 690              		.loc 1 346 7
 691 011c 07F11803 		add	r3, r7, #24
 692 0120 1946     		mov	r1, r3
 693 0122 2048     		ldr	r0, .L23
 694 0124 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 695 0128 0346     		mov	r3, r0
 696              		.loc 1 346 6
 697 012a 002B     		cmp	r3, #0
 698 012c 01D0     		beq	.L18
 347:Src/main.c    ****   {
 348:Src/main.c    ****     Error_Handler();
 699              		.loc 1 348 5
 700 012e FFF7FEFF 		bl	Error_Handler
 701              	.L18:
 349:Src/main.c    ****   }
 350:Src/main.c    **** 
 351:Src/main.c    ****   /** Configure Injected Channel
 352:Src/main.c    ****   */
 353:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 702              		.loc 1 353 35
 703 0132 204B     		ldr	r3, .L23+16
 704 0134 BB61     		str	r3, [r7, #24]
 354:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 705              		.loc 1 354 32
 706 0136 4FF40573 		mov	r3, #532
 707 013a FB61     		str	r3, [r7, #28]
 355:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 708              		.loc 1 355 7
 709 013c 07F11803 		add	r3, r7, #24
 710 0140 1946     		mov	r1, r3
 711 0142 1848     		ldr	r0, .L23
 712 0144 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 713 0148 0346     		mov	r3, r0
 714              		.loc 1 355 6
 715 014a 002B     		cmp	r3, #0
 716 014c 01D0     		beq	.L19
 356:Src/main.c    ****   {
 357:Src/main.c    ****     Error_Handler();
 717              		.loc 1 357 5
 718 014e FFF7FEFF 		bl	Error_Handler
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 20


 719              	.L19:
 358:Src/main.c    ****   }
 359:Src/main.c    **** 
 360:Src/main.c    ****   /** Configure Regular Channel
 361:Src/main.c    ****   */
 362:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 720              		.loc 1 362 19
 721 0152 194B     		ldr	r3, .L23+20
 722 0154 3B60     		str	r3, [r7]
 363:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 723              		.loc 1 363 16
 724 0156 0623     		movs	r3, #6
 725 0158 7B60     		str	r3, [r7, #4]
 364:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 726              		.loc 1 364 24
 727 015a 0523     		movs	r3, #5
 728 015c BB60     		str	r3, [r7, #8]
 365:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 729              		.loc 1 365 22
 730 015e 7F23     		movs	r3, #127
 731 0160 FB60     		str	r3, [r7, #12]
 366:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 732              		.loc 1 366 24
 733 0162 0423     		movs	r3, #4
 734 0164 3B61     		str	r3, [r7, #16]
 367:Src/main.c    ****   sConfig.Offset = 0;
 735              		.loc 1 367 18
 736 0166 0023     		movs	r3, #0
 737 0168 7B61     		str	r3, [r7, #20]
 368:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 738              		.loc 1 368 7
 739 016a 3B46     		mov	r3, r7
 740 016c 1946     		mov	r1, r3
 741 016e 0D48     		ldr	r0, .L23
 742 0170 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 743 0174 0346     		mov	r3, r0
 744              		.loc 1 368 6
 745 0176 002B     		cmp	r3, #0
 746 0178 01D0     		beq	.L20
 369:Src/main.c    ****   {
 370:Src/main.c    ****     Error_Handler();
 747              		.loc 1 370 5
 748 017a FFF7FEFF 		bl	Error_Handler
 749              	.L20:
 371:Src/main.c    ****   }
 372:Src/main.c    **** 
 373:Src/main.c    ****   /** Configure Regular Channel
 374:Src/main.c    ****   */
 375:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_13;
 750              		.loc 1 375 19
 751 017e 0F4B     		ldr	r3, .L23+24
 752 0180 3B60     		str	r3, [r7]
 376:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 753              		.loc 1 376 16
 754 0182 0C23     		movs	r3, #12
 755 0184 7B60     		str	r3, [r7, #4]
 377:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 21


 756              		.loc 1 377 7
 757 0186 3B46     		mov	r3, r7
 758 0188 1946     		mov	r1, r3
 759 018a 0648     		ldr	r0, .L23
 760 018c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 761 0190 0346     		mov	r3, r0
 762              		.loc 1 377 6
 763 0192 002B     		cmp	r3, #0
 764 0194 01D0     		beq	.L22
 378:Src/main.c    ****   {
 379:Src/main.c    ****     Error_Handler();
 765              		.loc 1 379 5
 766 0196 FFF7FEFF 		bl	Error_Handler
 767              	.L22:
 380:Src/main.c    ****   }
 381:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 382:Src/main.c    **** 
 383:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 384:Src/main.c    **** 
 385:Src/main.c    **** }
 768              		.loc 1 385 1
 769 019a 00BF     		nop
 770 019c 5837     		adds	r7, r7, #88
 771              	.LCFI13:
 772              		.cfi_def_cfa_offset 8
 773 019e BD46     		mov	sp, r7
 774              	.LCFI14:
 775              		.cfi_def_cfa_register 13
 776              		@ sp needed
 777 01a0 80BD     		pop	{r7, pc}
 778              	.L24:
 779 01a2 00BF     		.align	2
 780              	.L23:
 781 01a4 00000000 		.word	hadc1
 782 01a8 00000450 		.word	1342439424
 783 01ac 40002019 		.word	421527616
 784 01b0 00002143 		.word	1126236160
 785 01b4 0080F03E 		.word	1055948800
 786 01b8 2000F014 		.word	351272992
 787 01bc 00209036 		.word	915415040
 788              		.cfi_endproc
 789              	.LFE1098:
 791              		.section	.text.MX_ADC2_Init,"ax",%progbits
 792              		.align	1
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 797              	MX_ADC2_Init:
 798              	.LFB1099:
 386:Src/main.c    **** 
 387:Src/main.c    **** /**
 388:Src/main.c    ****   * @brief ADC2 Initialization Function
 389:Src/main.c    ****   * @param None
 390:Src/main.c    ****   * @retval None
 391:Src/main.c    ****   */
 392:Src/main.c    **** static void MX_ADC2_Init(void)
 393:Src/main.c    **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 22


 799              		.loc 1 393 1
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 24
 802              		@ frame_needed = 1, uses_anonymous_args = 0
 803 0000 80B5     		push	{r7, lr}
 804              	.LCFI15:
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 14, -4
 808 0002 86B0     		sub	sp, sp, #24
 809              	.LCFI16:
 810              		.cfi_def_cfa_offset 32
 811 0004 00AF     		add	r7, sp, #0
 812              	.LCFI17:
 813              		.cfi_def_cfa_register 7
 394:Src/main.c    **** 
 395:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 0 */
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* USER CODE END ADC2_Init 0 */
 398:Src/main.c    **** 
 399:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 814              		.loc 1 399 26
 815 0006 3B46     		mov	r3, r7
 816 0008 0022     		movs	r2, #0
 817 000a 1A60     		str	r2, [r3]
 818 000c 5A60     		str	r2, [r3, #4]
 819 000e 9A60     		str	r2, [r3, #8]
 820 0010 DA60     		str	r2, [r3, #12]
 821 0012 1A61     		str	r2, [r3, #16]
 822 0014 5A61     		str	r2, [r3, #20]
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 1 */
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* USER CODE END ADC2_Init 1 */
 404:Src/main.c    **** 
 405:Src/main.c    ****   /** Common config
 406:Src/main.c    ****   */
 407:Src/main.c    ****   hadc2.Instance = ADC2;
 823              		.loc 1 407 18
 824 0016 364B     		ldr	r3, .L31
 825 0018 364A     		ldr	r2, .L31+4
 826 001a 1A60     		str	r2, [r3]
 408:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 827              		.loc 1 408 29
 828 001c 344B     		ldr	r3, .L31
 829 001e 0022     		movs	r2, #0
 830 0020 5A60     		str	r2, [r3, #4]
 409:Src/main.c    ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 831              		.loc 1 409 25
 832 0022 334B     		ldr	r3, .L31
 833 0024 0022     		movs	r2, #0
 834 0026 9A60     		str	r2, [r3, #8]
 410:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 835              		.loc 1 410 24
 836 0028 314B     		ldr	r3, .L31
 837 002a 0022     		movs	r2, #0
 838 002c DA60     		str	r2, [r3, #12]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 23


 411:Src/main.c    ****   hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 839              		.loc 1 411 27
 840 002e 304B     		ldr	r3, .L31
 841 0030 0122     		movs	r2, #1
 842 0032 1A61     		str	r2, [r3, #16]
 412:Src/main.c    ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 843              		.loc 1 412 27
 844 0034 2E4B     		ldr	r3, .L31
 845 0036 0422     		movs	r2, #4
 846 0038 5A61     		str	r2, [r3, #20]
 413:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 847              		.loc 1 413 31
 848 003a 2D4B     		ldr	r3, .L31
 849 003c 0022     		movs	r2, #0
 850 003e 1A76     		strb	r2, [r3, #24]
 414:Src/main.c    ****   hadc2.Init.ContinuousConvMode = DISABLE;
 851              		.loc 1 414 33
 852 0040 2B4B     		ldr	r3, .L31
 853 0042 0022     		movs	r2, #0
 854 0044 5A76     		strb	r2, [r3, #25]
 415:Src/main.c    ****   hadc2.Init.NbrOfConversion = 3;
 855              		.loc 1 415 30
 856 0046 2A4B     		ldr	r3, .L31
 857 0048 0322     		movs	r2, #3
 858 004a DA61     		str	r2, [r3, #28]
 416:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 859              		.loc 1 416 36
 860 004c 284B     		ldr	r3, .L31
 861 004e 0022     		movs	r2, #0
 862 0050 83F82020 		strb	r2, [r3, #32]
 417:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 863              		.loc 1 417 31
 864 0054 264B     		ldr	r3, .L31
 865 0056 4FF4E062 		mov	r2, #1792
 866 005a 9A62     		str	r2, [r3, #40]
 418:Src/main.c    ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 867              		.loc 1 418 35
 868 005c 244B     		ldr	r3, .L31
 869 005e 4FF48062 		mov	r2, #1024
 870 0062 DA62     		str	r2, [r3, #44]
 419:Src/main.c    ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 871              		.loc 1 419 36
 872 0064 224B     		ldr	r3, .L31
 873 0066 0022     		movs	r2, #0
 874 0068 83F83020 		strb	r2, [r3, #48]
 420:Src/main.c    ****   hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 875              		.loc 1 420 22
 876 006c 204B     		ldr	r3, .L31
 877 006e 0022     		movs	r2, #0
 878 0070 5A63     		str	r2, [r3, #52]
 421:Src/main.c    ****   hadc2.Init.OversamplingMode = DISABLE;
 879              		.loc 1 421 31
 880 0072 1F4B     		ldr	r3, .L31
 881 0074 0022     		movs	r2, #0
 882 0076 83F83820 		strb	r2, [r3, #56]
 422:Src/main.c    ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 883              		.loc 1 422 7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 24


 884 007a 1D48     		ldr	r0, .L31
 885 007c FFF7FEFF 		bl	HAL_ADC_Init
 886 0080 0346     		mov	r3, r0
 887              		.loc 1 422 6
 888 0082 002B     		cmp	r3, #0
 889 0084 01D0     		beq	.L26
 423:Src/main.c    ****   {
 424:Src/main.c    ****     Error_Handler();
 890              		.loc 1 424 5
 891 0086 FFF7FEFF 		bl	Error_Handler
 892              	.L26:
 425:Src/main.c    ****   }
 426:Src/main.c    **** 
 427:Src/main.c    ****   /** Configure Regular Channel
 428:Src/main.c    ****   */
 429:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 893              		.loc 1 429 19
 894 008a 1B4B     		ldr	r3, .L31+8
 895 008c 3B60     		str	r3, [r7]
 430:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 896              		.loc 1 430 16
 897 008e 0623     		movs	r3, #6
 898 0090 7B60     		str	r3, [r7, #4]
 431:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 899              		.loc 1 431 24
 900 0092 0023     		movs	r3, #0
 901 0094 BB60     		str	r3, [r7, #8]
 432:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 902              		.loc 1 432 22
 903 0096 7F23     		movs	r3, #127
 904 0098 FB60     		str	r3, [r7, #12]
 433:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 905              		.loc 1 433 24
 906 009a 0423     		movs	r3, #4
 907 009c 3B61     		str	r3, [r7, #16]
 434:Src/main.c    ****   sConfig.Offset = 0;
 908              		.loc 1 434 18
 909 009e 0023     		movs	r3, #0
 910 00a0 7B61     		str	r3, [r7, #20]
 435:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 911              		.loc 1 435 7
 912 00a2 3B46     		mov	r3, r7
 913 00a4 1946     		mov	r1, r3
 914 00a6 1248     		ldr	r0, .L31
 915 00a8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 916 00ac 0346     		mov	r3, r0
 917              		.loc 1 435 6
 918 00ae 002B     		cmp	r3, #0
 919 00b0 01D0     		beq	.L27
 436:Src/main.c    ****   {
 437:Src/main.c    ****     Error_Handler();
 920              		.loc 1 437 5
 921 00b2 FFF7FEFF 		bl	Error_Handler
 922              	.L27:
 438:Src/main.c    ****   }
 439:Src/main.c    **** 
 440:Src/main.c    ****   /** Configure Regular Channel
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 25


 441:Src/main.c    ****   */
 442:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 923              		.loc 1 442 16
 924 00b6 0C23     		movs	r3, #12
 925 00b8 7B60     		str	r3, [r7, #4]
 443:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 926              		.loc 1 443 7
 927 00ba 3B46     		mov	r3, r7
 928 00bc 1946     		mov	r1, r3
 929 00be 0C48     		ldr	r0, .L31
 930 00c0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 931 00c4 0346     		mov	r3, r0
 932              		.loc 1 443 6
 933 00c6 002B     		cmp	r3, #0
 934 00c8 01D0     		beq	.L28
 444:Src/main.c    ****   {
 445:Src/main.c    ****     Error_Handler();
 935              		.loc 1 445 5
 936 00ca FFF7FEFF 		bl	Error_Handler
 937              	.L28:
 446:Src/main.c    ****   }
 447:Src/main.c    **** 
 448:Src/main.c    ****   /** Configure Regular Channel
 449:Src/main.c    ****   */
 450:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 938              		.loc 1 450 16
 939 00ce 1223     		movs	r3, #18
 940 00d0 7B60     		str	r3, [r7, #4]
 451:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 941              		.loc 1 451 7
 942 00d2 3B46     		mov	r3, r7
 943 00d4 1946     		mov	r1, r3
 944 00d6 0648     		ldr	r0, .L31
 945 00d8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 946 00dc 0346     		mov	r3, r0
 947              		.loc 1 451 6
 948 00de 002B     		cmp	r3, #0
 949 00e0 01D0     		beq	.L30
 452:Src/main.c    ****   {
 453:Src/main.c    ****     Error_Handler();
 950              		.loc 1 453 5
 951 00e2 FFF7FEFF 		bl	Error_Handler
 952              	.L30:
 454:Src/main.c    ****   }
 455:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 2 */
 456:Src/main.c    **** 
 457:Src/main.c    ****   /* USER CODE END ADC2_Init 2 */
 458:Src/main.c    **** 
 459:Src/main.c    **** }
 953              		.loc 1 459 1
 954 00e6 00BF     		nop
 955 00e8 1837     		adds	r7, r7, #24
 956              	.LCFI18:
 957              		.cfi_def_cfa_offset 8
 958 00ea BD46     		mov	sp, r7
 959              	.LCFI19:
 960              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 26


 961              		@ sp needed
 962 00ec 80BD     		pop	{r7, pc}
 963              	.L32:
 964 00ee 00BF     		.align	2
 965              	.L31:
 966 00f0 00000000 		.word	hadc2
 967 00f4 00010450 		.word	1342439680
 968 00f8 02003004 		.word	70254594
 969              		.cfi_endproc
 970              	.LFE1099:
 972              		.section	.text.MX_TIM1_Init,"ax",%progbits
 973              		.align	1
 974              		.syntax unified
 975              		.thumb
 976              		.thumb_func
 978              	MX_TIM1_Init:
 979              	.LFB1100:
 460:Src/main.c    **** 
 461:Src/main.c    **** /**
 462:Src/main.c    ****   * @brief TIM1 Initialization Function
 463:Src/main.c    ****   * @param None
 464:Src/main.c    ****   * @retval None
 465:Src/main.c    ****   */
 466:Src/main.c    **** static void MX_TIM1_Init(void)
 467:Src/main.c    **** {
 980              		.loc 1 467 1
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 120
 983              		@ frame_needed = 1, uses_anonymous_args = 0
 984 0000 80B5     		push	{r7, lr}
 985              	.LCFI20:
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 7, -8
 988              		.cfi_offset 14, -4
 989 0002 9EB0     		sub	sp, sp, #120
 990              	.LCFI21:
 991              		.cfi_def_cfa_offset 128
 992 0004 00AF     		add	r7, sp, #0
 993              	.LCFI22:
 994              		.cfi_def_cfa_register 7
 468:Src/main.c    **** 
 469:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 470:Src/main.c    **** 
 471:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 472:Src/main.c    **** 
 473:Src/main.c    ****   TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 995              		.loc 1 473 26
 996 0006 07F16403 		add	r3, r7, #100
 997 000a 0022     		movs	r2, #0
 998 000c 1A60     		str	r2, [r3]
 999 000e 5A60     		str	r2, [r3, #4]
 1000 0010 9A60     		str	r2, [r3, #8]
 1001 0012 DA60     		str	r2, [r3, #12]
 1002 0014 1A61     		str	r2, [r3, #16]
 474:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1003              		.loc 1 474 27
 1004 0016 07F15803 		add	r3, r7, #88
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 27


 1005 001a 0022     		movs	r2, #0
 1006 001c 1A60     		str	r2, [r3]
 1007 001e 5A60     		str	r2, [r3, #4]
 1008 0020 9A60     		str	r2, [r3, #8]
 475:Src/main.c    ****   TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 1009              		.loc 1 475 33
 1010 0022 07F14C03 		add	r3, r7, #76
 1011 0026 0022     		movs	r2, #0
 1012 0028 1A60     		str	r2, [r3]
 1013 002a 5A60     		str	r2, [r3, #4]
 1014 002c 9A60     		str	r2, [r3, #8]
 476:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1015              		.loc 1 476 22
 1016 002e 07F13003 		add	r3, r7, #48
 1017 0032 0022     		movs	r2, #0
 1018 0034 1A60     		str	r2, [r3]
 1019 0036 5A60     		str	r2, [r3, #4]
 1020 0038 9A60     		str	r2, [r3, #8]
 1021 003a DA60     		str	r2, [r3, #12]
 1022 003c 1A61     		str	r2, [r3, #16]
 1023 003e 5A61     		str	r2, [r3, #20]
 1024 0040 9A61     		str	r2, [r3, #24]
 477:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1025              		.loc 1 477 34
 1026 0042 3B1D     		adds	r3, r7, #4
 1027 0044 2C22     		movs	r2, #44
 1028 0046 0021     		movs	r1, #0
 1029 0048 1846     		mov	r0, r3
 1030 004a FFF7FEFF 		bl	memset
 478:Src/main.c    **** 
 479:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 480:Src/main.c    **** 
 481:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 482:Src/main.c    ****   htim1.Instance = TIM1;
 1031              		.loc 1 482 18
 1032 004e 644B     		ldr	r3, .L44
 1033 0050 644A     		ldr	r2, .L44+4
 1034 0052 1A60     		str	r2, [r3]
 483:Src/main.c    ****   htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 1035              		.loc 1 483 24
 1036 0054 624B     		ldr	r3, .L44
 1037 0056 0022     		movs	r2, #0
 1038 0058 5A60     		str	r2, [r3, #4]
 484:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 1039              		.loc 1 484 26
 1040 005a 614B     		ldr	r3, .L44
 1041 005c 2022     		movs	r2, #32
 1042 005e 9A60     		str	r2, [r3, #8]
 485:Src/main.c    ****   htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 1043              		.loc 1 485 21
 1044 0060 5F4B     		ldr	r3, .L44
 1045 0062 40F6C412 		movw	r2, #2500
 1046 0066 DA60     		str	r2, [r3, #12]
 486:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 1047              		.loc 1 486 28
 1048 0068 5D4B     		ldr	r3, .L44
 1049 006a 4FF48072 		mov	r2, #256
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 28


 1050 006e 1A61     		str	r2, [r3, #16]
 487:Src/main.c    ****   htim1.Init.RepetitionCounter = (REP_COUNTER);
 1051              		.loc 1 487 32
 1052 0070 5B4B     		ldr	r3, .L44
 1053 0072 0122     		movs	r2, #1
 1054 0074 5A61     		str	r2, [r3, #20]
 488:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1055              		.loc 1 488 32
 1056 0076 5A4B     		ldr	r3, .L44
 1057 0078 0022     		movs	r2, #0
 1058 007a 9A61     		str	r2, [r3, #24]
 489:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1059              		.loc 1 489 7
 1060 007c 5848     		ldr	r0, .L44
 1061 007e FFF7FEFF 		bl	HAL_TIM_Base_Init
 1062 0082 0346     		mov	r3, r0
 1063              		.loc 1 489 6
 1064 0084 002B     		cmp	r3, #0
 1065 0086 01D0     		beq	.L34
 490:Src/main.c    ****   {
 491:Src/main.c    ****     Error_Handler();
 1066              		.loc 1 491 5
 1067 0088 FFF7FEFF 		bl	Error_Handler
 1068              	.L34:
 492:Src/main.c    ****   }
 493:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1069              		.loc 1 493 7
 1070 008c 5448     		ldr	r0, .L44
 1071 008e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1072 0092 0346     		mov	r3, r0
 1073              		.loc 1 493 6
 1074 0094 002B     		cmp	r3, #0
 1075 0096 01D0     		beq	.L35
 494:Src/main.c    ****   {
 495:Src/main.c    ****     Error_Handler();
 1076              		.loc 1 495 5
 1077 0098 FFF7FEFF 		bl	Error_Handler
 1078              	.L35:
 496:Src/main.c    ****   }
 497:Src/main.c    ****   sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 1079              		.loc 1 497 26
 1080 009c 0623     		movs	r3, #6
 1081 009e 7B66     		str	r3, [r7, #100]
 498:Src/main.c    ****   sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 1082              		.loc 1 498 29
 1083 00a0 1023     		movs	r3, #16
 1084 00a2 BB66     		str	r3, [r7, #104]
 499:Src/main.c    ****   if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 1085              		.loc 1 499 7
 1086 00a4 07F16403 		add	r3, r7, #100
 1087 00a8 1946     		mov	r1, r3
 1088 00aa 4D48     		ldr	r0, .L44
 1089 00ac FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 1090 00b0 0346     		mov	r3, r0
 1091              		.loc 1 499 6
 1092 00b2 002B     		cmp	r3, #0
 1093 00b4 01D0     		beq	.L36
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 29


 500:Src/main.c    ****   {
 501:Src/main.c    ****     Error_Handler();
 1094              		.loc 1 501 5
 1095 00b6 FFF7FEFF 		bl	Error_Handler
 1096              	.L36:
 502:Src/main.c    ****   }
 503:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 1097              		.loc 1 503 37
 1098 00ba 7023     		movs	r3, #112
 1099 00bc BB65     		str	r3, [r7, #88]
 504:Src/main.c    ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1100              		.loc 1 504 38
 1101 00be 0023     		movs	r3, #0
 1102 00c0 FB65     		str	r3, [r7, #92]
 505:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1103              		.loc 1 505 33
 1104 00c2 0023     		movs	r3, #0
 1105 00c4 3B66     		str	r3, [r7, #96]
 506:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1106              		.loc 1 506 7
 1107 00c6 07F15803 		add	r3, r7, #88
 1108 00ca 1946     		mov	r1, r3
 1109 00cc 4448     		ldr	r0, .L44
 1110 00ce FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1111 00d2 0346     		mov	r3, r0
 1112              		.loc 1 506 6
 1113 00d4 002B     		cmp	r3, #0
 1114 00d6 01D0     		beq	.L37
 507:Src/main.c    ****   {
 508:Src/main.c    ****     Error_Handler();
 1115              		.loc 1 508 5
 1116 00d8 FFF7FEFF 		bl	Error_Handler
 1117              	.L37:
 509:Src/main.c    ****   }
 510:Src/main.c    ****   sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 1118              		.loc 1 510 28
 1119 00dc 0123     		movs	r3, #1
 1120 00de FB64     		str	r3, [r7, #76]
 511:Src/main.c    ****   sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 1121              		.loc 1 511 28
 1122 00e0 0123     		movs	r3, #1
 1123 00e2 3B65     		str	r3, [r7, #80]
 512:Src/main.c    ****   sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 1124              		.loc 1 512 30
 1125 00e4 0123     		movs	r3, #1
 1126 00e6 7B65     		str	r3, [r7, #84]
 513:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 1127              		.loc 1 513 7
 1128 00e8 07F14C03 		add	r3, r7, #76
 1129 00ec 1A46     		mov	r2, r3
 1130 00ee 0221     		movs	r1, #2
 1131 00f0 3B48     		ldr	r0, .L44
 1132 00f2 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakInput
 1133 00f6 0346     		mov	r3, r0
 1134              		.loc 1 513 6
 1135 00f8 002B     		cmp	r3, #0
 1136 00fa 01D0     		beq	.L38
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 30


 514:Src/main.c    ****   {
 515:Src/main.c    ****     Error_Handler();
 1137              		.loc 1 515 5
 1138 00fc FFF7FEFF 		bl	Error_Handler
 1139              	.L38:
 516:Src/main.c    ****   }
 517:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 1140              		.loc 1 517 20
 1141 0100 6023     		movs	r3, #96
 1142 0102 3B63     		str	r3, [r7, #48]
 518:Src/main.c    ****   sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 1143              		.loc 1 518 19
 1144 0104 40F2E243 		movw	r3, #1250
 1145 0108 7B63     		str	r3, [r7, #52]
 519:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1146              		.loc 1 519 24
 1147 010a 0023     		movs	r3, #0
 1148 010c BB63     		str	r3, [r7, #56]
 520:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1149              		.loc 1 520 25
 1150 010e 0023     		movs	r3, #0
 1151 0110 FB63     		str	r3, [r7, #60]
 521:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1152              		.loc 1 521 24
 1153 0112 0023     		movs	r3, #0
 1154 0114 3B64     		str	r3, [r7, #64]
 522:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1155              		.loc 1 522 25
 1156 0116 0023     		movs	r3, #0
 1157 0118 7B64     		str	r3, [r7, #68]
 523:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1158              		.loc 1 523 26
 1159 011a 0023     		movs	r3, #0
 1160 011c BB64     		str	r3, [r7, #72]
 524:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1161              		.loc 1 524 7
 1162 011e 07F13003 		add	r3, r7, #48
 1163 0122 0022     		movs	r2, #0
 1164 0124 1946     		mov	r1, r3
 1165 0126 2E48     		ldr	r0, .L44
 1166 0128 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1167 012c 0346     		mov	r3, r0
 1168              		.loc 1 524 6
 1169 012e 002B     		cmp	r3, #0
 1170 0130 01D0     		beq	.L39
 525:Src/main.c    ****   {
 526:Src/main.c    ****     Error_Handler();
 1171              		.loc 1 526 5
 1172 0132 FFF7FEFF 		bl	Error_Handler
 1173              	.L39:
 527:Src/main.c    ****   }
 528:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 1174              		.loc 1 528 7
 1175 0136 07F13003 		add	r3, r7, #48
 1176 013a 0422     		movs	r2, #4
 1177 013c 1946     		mov	r1, r3
 1178 013e 2848     		ldr	r0, .L44
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 31


 1179 0140 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1180 0144 0346     		mov	r3, r0
 1181              		.loc 1 528 6
 1182 0146 002B     		cmp	r3, #0
 1183 0148 01D0     		beq	.L40
 529:Src/main.c    ****   {
 530:Src/main.c    ****     Error_Handler();
 1184              		.loc 1 530 5
 1185 014a FFF7FEFF 		bl	Error_Handler
 1186              	.L40:
 531:Src/main.c    ****   }
 532:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1187              		.loc 1 532 7
 1188 014e 07F13003 		add	r3, r7, #48
 1189 0152 0822     		movs	r2, #8
 1190 0154 1946     		mov	r1, r3
 1191 0156 2248     		ldr	r0, .L44
 1192 0158 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1193 015c 0346     		mov	r3, r0
 1194              		.loc 1 532 6
 1195 015e 002B     		cmp	r3, #0
 1196 0160 01D0     		beq	.L41
 533:Src/main.c    ****   {
 534:Src/main.c    ****     Error_Handler();
 1197              		.loc 1 534 5
 1198 0162 FFF7FEFF 		bl	Error_Handler
 1199              	.L41:
 535:Src/main.c    ****   }
 536:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 1200              		.loc 1 536 20
 1201 0166 7023     		movs	r3, #112
 1202 0168 3B63     		str	r3, [r7, #48]
 537:Src/main.c    ****   sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 1203              		.loc 1 537 19
 1204 016a 40F6C313 		movw	r3, #2499
 1205 016e 7B63     		str	r3, [r7, #52]
 538:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 1206              		.loc 1 538 7
 1207 0170 07F13003 		add	r3, r7, #48
 1208 0174 0C22     		movs	r2, #12
 1209 0176 1946     		mov	r1, r3
 1210 0178 1948     		ldr	r0, .L44
 1211 017a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1212 017e 0346     		mov	r3, r0
 1213              		.loc 1 538 6
 1214 0180 002B     		cmp	r3, #0
 1215 0182 01D0     		beq	.L42
 539:Src/main.c    ****   {
 540:Src/main.c    ****     Error_Handler();
 1216              		.loc 1 540 5
 1217 0184 FFF7FEFF 		bl	Error_Handler
 1218              	.L42:
 541:Src/main.c    ****   }
 542:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 1219              		.loc 1 542 40
 1220 0188 4FF40063 		mov	r3, #2048
 1221 018c 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 32


 543:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 1222              		.loc 1 543 41
 1223 018e 4FF48063 		mov	r3, #1024
 1224 0192 BB60     		str	r3, [r7, #8]
 544:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1225              		.loc 1 544 34
 1226 0194 0023     		movs	r3, #0
 1227 0196 FB60     		str	r3, [r7, #12]
 545:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1228              		.loc 1 545 33
 1229 0198 0023     		movs	r3, #0
 1230 019a 3B61     		str	r3, [r7, #16]
 546:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1231              		.loc 1 546 35
 1232 019c 0023     		movs	r3, #0
 1233 019e 7B61     		str	r3, [r7, #20]
 547:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1234              		.loc 1 547 38
 1235 01a0 4FF40053 		mov	r3, #8192
 1236 01a4 BB61     		str	r3, [r7, #24]
 548:Src/main.c    ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1237              		.loc 1 548 36
 1238 01a6 0023     		movs	r3, #0
 1239 01a8 FB61     		str	r3, [r7, #28]
 549:Src/main.c    ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 1240              		.loc 1 549 36
 1241 01aa 4FF08073 		mov	r3, #16777216
 1242 01ae 3B62     		str	r3, [r7, #32]
 550:Src/main.c    ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1243              		.loc 1 550 39
 1244 01b0 4FF00073 		mov	r3, #33554432
 1245 01b4 7B62     		str	r3, [r7, #36]
 551:Src/main.c    ****   sBreakDeadTimeConfig.Break2Filter = 3;
 1246              		.loc 1 551 37
 1247 01b6 0323     		movs	r3, #3
 1248 01b8 BB62     		str	r3, [r7, #40]
 552:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1249              		.loc 1 552 40
 1250 01ba 0023     		movs	r3, #0
 1251 01bc FB62     		str	r3, [r7, #44]
 553:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1252              		.loc 1 553 7
 1253 01be 3B1D     		adds	r3, r7, #4
 1254 01c0 1946     		mov	r1, r3
 1255 01c2 0748     		ldr	r0, .L44
 1256 01c4 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1257 01c8 0346     		mov	r3, r0
 1258              		.loc 1 553 6
 1259 01ca 002B     		cmp	r3, #0
 1260 01cc 01D0     		beq	.L43
 554:Src/main.c    ****   {
 555:Src/main.c    ****     Error_Handler();
 1261              		.loc 1 555 5
 1262 01ce FFF7FEFF 		bl	Error_Handler
 1263              	.L43:
 556:Src/main.c    ****   }
 557:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 33


 558:Src/main.c    **** 
 559:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 560:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 1264              		.loc 1 560 3
 1265 01d2 0348     		ldr	r0, .L44
 1266 01d4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 561:Src/main.c    **** 
 562:Src/main.c    **** }
 1267              		.loc 1 562 1
 1268 01d8 00BF     		nop
 1269 01da 7837     		adds	r7, r7, #120
 1270              	.LCFI23:
 1271              		.cfi_def_cfa_offset 8
 1272 01dc BD46     		mov	sp, r7
 1273              	.LCFI24:
 1274              		.cfi_def_cfa_register 13
 1275              		@ sp needed
 1276 01de 80BD     		pop	{r7, pc}
 1277              	.L45:
 1278              		.align	2
 1279              	.L44:
 1280 01e0 00000000 		.word	htim1
 1281 01e4 002C0140 		.word	1073818624
 1282              		.cfi_endproc
 1283              	.LFE1100:
 1285              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1286              		.align	1
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1291              	MX_TIM3_Init:
 1292              	.LFB1101:
 563:Src/main.c    **** 
 564:Src/main.c    **** /**
 565:Src/main.c    ****   * @brief TIM3 Initialization Function
 566:Src/main.c    ****   * @param None
 567:Src/main.c    ****   * @retval None
 568:Src/main.c    ****   */
 569:Src/main.c    **** static void MX_TIM3_Init(void)
 570:Src/main.c    **** {
 1293              		.loc 1 570 1
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 48
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297 0000 80B5     		push	{r7, lr}
 1298              	.LCFI25:
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 7, -8
 1301              		.cfi_offset 14, -4
 1302 0002 8CB0     		sub	sp, sp, #48
 1303              	.LCFI26:
 1304              		.cfi_def_cfa_offset 56
 1305 0004 00AF     		add	r7, sp, #0
 1306              	.LCFI27:
 1307              		.cfi_def_cfa_register 7
 571:Src/main.c    **** 
 572:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 34


 573:Src/main.c    **** 
 574:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 575:Src/main.c    **** 
 576:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 1308              		.loc 1 576 27
 1309 0006 07F10C03 		add	r3, r7, #12
 1310 000a 2422     		movs	r2, #36
 1311 000c 0021     		movs	r1, #0
 1312 000e 1846     		mov	r0, r3
 1313 0010 FFF7FEFF 		bl	memset
 577:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1314              		.loc 1 577 27
 1315 0014 3B46     		mov	r3, r7
 1316 0016 0022     		movs	r2, #0
 1317 0018 1A60     		str	r2, [r3]
 1318 001a 5A60     		str	r2, [r3, #4]
 1319 001c 9A60     		str	r2, [r3, #8]
 578:Src/main.c    **** 
 579:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 580:Src/main.c    **** 
 581:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 582:Src/main.c    ****   htim3.Instance = TIM3;
 1320              		.loc 1 582 18
 1321 001e 214B     		ldr	r3, .L50
 1322 0020 214A     		ldr	r2, .L50+4
 1323 0022 1A60     		str	r2, [r3]
 583:Src/main.c    ****   htim3.Init.Prescaler = 0;
 1324              		.loc 1 583 24
 1325 0024 1F4B     		ldr	r3, .L50
 1326 0026 0022     		movs	r2, #0
 1327 0028 5A60     		str	r2, [r3, #4]
 584:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1328              		.loc 1 584 26
 1329 002a 1E4B     		ldr	r3, .L50
 1330 002c 0022     		movs	r2, #0
 1331 002e 9A60     		str	r2, [r3, #8]
 585:Src/main.c    ****   htim3.Init.Period = M1_PULSE_NBR;
 1332              		.loc 1 585 21
 1333 0030 1C4B     		ldr	r3, .L50
 1334 0032 40F23F62 		movw	r2, #1599
 1335 0036 DA60     		str	r2, [r3, #12]
 586:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1336              		.loc 1 586 28
 1337 0038 1A4B     		ldr	r3, .L50
 1338 003a 0022     		movs	r2, #0
 1339 003c 1A61     		str	r2, [r3, #16]
 587:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1340              		.loc 1 587 32
 1341 003e 194B     		ldr	r3, .L50
 1342 0040 0022     		movs	r2, #0
 1343 0042 9A61     		str	r2, [r3, #24]
 588:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 1344              		.loc 1 588 23
 1345 0044 0323     		movs	r3, #3
 1346 0046 FB60     		str	r3, [r7, #12]
 589:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 1347              		.loc 1 589 23
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 35


 1348 0048 0023     		movs	r3, #0
 1349 004a 3B61     		str	r3, [r7, #16]
 590:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 1350              		.loc 1 590 24
 1351 004c 0123     		movs	r3, #1
 1352 004e 7B61     		str	r3, [r7, #20]
 591:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 1353              		.loc 1 591 24
 1354 0050 0023     		movs	r3, #0
 1355 0052 BB61     		str	r3, [r7, #24]
 592:Src/main.c    ****   sConfig.IC1Filter = M1_ENC_IC_FILTER;
 1356              		.loc 1 592 21
 1357 0054 0923     		movs	r3, #9
 1358 0056 FB61     		str	r3, [r7, #28]
 593:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 1359              		.loc 1 593 23
 1360 0058 0023     		movs	r3, #0
 1361 005a 3B62     		str	r3, [r7, #32]
 594:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 1362              		.loc 1 594 24
 1363 005c 0123     		movs	r3, #1
 1364 005e 7B62     		str	r3, [r7, #36]
 595:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 1365              		.loc 1 595 24
 1366 0060 0023     		movs	r3, #0
 1367 0062 BB62     		str	r3, [r7, #40]
 596:Src/main.c    ****   sConfig.IC2Filter = M1_ENC_IC_FILTER;
 1368              		.loc 1 596 21
 1369 0064 0923     		movs	r3, #9
 1370 0066 FB62     		str	r3, [r7, #44]
 597:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 1371              		.loc 1 597 7
 1372 0068 07F10C03 		add	r3, r7, #12
 1373 006c 1946     		mov	r1, r3
 1374 006e 0D48     		ldr	r0, .L50
 1375 0070 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 1376 0074 0346     		mov	r3, r0
 1377              		.loc 1 597 6
 1378 0076 002B     		cmp	r3, #0
 1379 0078 01D0     		beq	.L47
 598:Src/main.c    ****   {
 599:Src/main.c    ****     Error_Handler();
 1380              		.loc 1 599 5
 1381 007a FFF7FEFF 		bl	Error_Handler
 1382              	.L47:
 600:Src/main.c    ****   }
 601:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 1383              		.loc 1 601 37
 1384 007e 0023     		movs	r3, #0
 1385 0080 3B60     		str	r3, [r7]
 602:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1386              		.loc 1 602 33
 1387 0082 0023     		movs	r3, #0
 1388 0084 BB60     		str	r3, [r7, #8]
 603:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1389              		.loc 1 603 7
 1390 0086 3B46     		mov	r3, r7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 36


 1391 0088 1946     		mov	r1, r3
 1392 008a 0648     		ldr	r0, .L50
 1393 008c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1394 0090 0346     		mov	r3, r0
 1395              		.loc 1 603 6
 1396 0092 002B     		cmp	r3, #0
 1397 0094 01D0     		beq	.L49
 604:Src/main.c    ****   {
 605:Src/main.c    ****     Error_Handler();
 1398              		.loc 1 605 5
 1399 0096 FFF7FEFF 		bl	Error_Handler
 1400              	.L49:
 606:Src/main.c    ****   }
 607:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 608:Src/main.c    **** 
 609:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 610:Src/main.c    **** 
 611:Src/main.c    **** }
 1401              		.loc 1 611 1
 1402 009a 00BF     		nop
 1403 009c 3037     		adds	r7, r7, #48
 1404              	.LCFI28:
 1405              		.cfi_def_cfa_offset 8
 1406 009e BD46     		mov	sp, r7
 1407              	.LCFI29:
 1408              		.cfi_def_cfa_register 13
 1409              		@ sp needed
 1410 00a0 80BD     		pop	{r7, pc}
 1411              	.L51:
 1412 00a2 00BF     		.align	2
 1413              	.L50:
 1414 00a4 00000000 		.word	htim3
 1415 00a8 00040040 		.word	1073742848
 1416              		.cfi_endproc
 1417              	.LFE1101:
 1419              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1420              		.align	1
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1425              	MX_TIM4_Init:
 1426              	.LFB1102:
 612:Src/main.c    **** 
 613:Src/main.c    **** /**
 614:Src/main.c    ****   * @brief TIM4 Initialization Function
 615:Src/main.c    ****   * @param None
 616:Src/main.c    ****   * @retval None
 617:Src/main.c    ****   */
 618:Src/main.c    **** static void MX_TIM4_Init(void)
 619:Src/main.c    **** {
 1427              		.loc 1 619 1
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 56
 1430              		@ frame_needed = 1, uses_anonymous_args = 0
 1431 0000 80B5     		push	{r7, lr}
 1432              	.LCFI30:
 1433              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 37


 1434              		.cfi_offset 7, -8
 1435              		.cfi_offset 14, -4
 1436 0002 8EB0     		sub	sp, sp, #56
 1437              	.LCFI31:
 1438              		.cfi_def_cfa_offset 64
 1439 0004 00AF     		add	r7, sp, #0
 1440              	.LCFI32:
 1441              		.cfi_def_cfa_register 7
 620:Src/main.c    **** 
 621:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 622:Src/main.c    **** 
 623:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 624:Src/main.c    **** 
 625:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 1442              		.loc 1 625 26
 1443 0006 07F12803 		add	r3, r7, #40
 1444 000a 0022     		movs	r2, #0
 1445 000c 1A60     		str	r2, [r3]
 1446 000e 5A60     		str	r2, [r3, #4]
 1447 0010 9A60     		str	r2, [r3, #8]
 1448 0012 DA60     		str	r2, [r3, #12]
 626:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1449              		.loc 1 626 27
 1450 0014 07F11C03 		add	r3, r7, #28
 1451 0018 0022     		movs	r2, #0
 1452 001a 1A60     		str	r2, [r3]
 1453 001c 5A60     		str	r2, [r3, #4]
 1454 001e 9A60     		str	r2, [r3, #8]
 627:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1455              		.loc 1 627 22
 1456 0020 3B46     		mov	r3, r7
 1457 0022 0022     		movs	r2, #0
 1458 0024 1A60     		str	r2, [r3]
 1459 0026 5A60     		str	r2, [r3, #4]
 1460 0028 9A60     		str	r2, [r3, #8]
 1461 002a DA60     		str	r2, [r3, #12]
 1462 002c 1A61     		str	r2, [r3, #16]
 1463 002e 5A61     		str	r2, [r3, #20]
 1464 0030 9A61     		str	r2, [r3, #24]
 628:Src/main.c    **** 
 629:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 630:Src/main.c    **** 
 631:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 632:Src/main.c    **** 
 633:Src/main.c    ****   //uint32_t sysclk = HAL_RCC_GetHCLKFreq();
 634:Src/main.c    ****   htim4.Instance = TIM4;
 1465              		.loc 1 634 18
 1466 0032 2B4B     		ldr	r3, .L59
 1467 0034 2B4A     		ldr	r2, .L59+4
 1468 0036 1A60     		str	r2, [r3]
 635:Src/main.c    ****   htim4.Init.Prescaler = 79;  // 80 MHz/80 = 1MHz
 1469              		.loc 1 635 24
 1470 0038 294B     		ldr	r3, .L59
 1471 003a 4F22     		movs	r2, #79
 1472 003c 5A60     		str	r2, [r3, #4]
 636:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1473              		.loc 1 636 26
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 38


 1474 003e 284B     		ldr	r3, .L59
 1475 0040 0022     		movs	r2, #0
 1476 0042 9A60     		str	r2, [r3, #8]
 637:Src/main.c    ****   htim4.Init.Period = 999; // 1MHz/1000 = 1KHz
 1477              		.loc 1 637 21
 1478 0044 264B     		ldr	r3, .L59
 1479 0046 40F2E732 		movw	r2, #999
 1480 004a DA60     		str	r2, [r3, #12]
 638:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1481              		.loc 1 638 28
 1482 004c 244B     		ldr	r3, .L59
 1483 004e 0022     		movs	r2, #0
 1484 0050 1A61     		str	r2, [r3, #16]
 639:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1485              		.loc 1 639 32
 1486 0052 234B     		ldr	r3, .L59
 1487 0054 0022     		movs	r2, #0
 1488 0056 9A61     		str	r2, [r3, #24]
 640:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1489              		.loc 1 640 7
 1490 0058 2148     		ldr	r0, .L59
 1491 005a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1492 005e 0346     		mov	r3, r0
 1493              		.loc 1 640 6
 1494 0060 002B     		cmp	r3, #0
 1495 0062 01D0     		beq	.L53
 641:Src/main.c    ****   {
 642:Src/main.c    ****     Error_Handler();
 1496              		.loc 1 642 5
 1497 0064 FFF7FEFF 		bl	Error_Handler
 1498              	.L53:
 643:Src/main.c    ****   }
 644:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 1499              		.loc 1 644 34
 1500 0068 4FF48053 		mov	r3, #4096
 1501 006c BB62     		str	r3, [r7, #40]
 645:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 1502              		.loc 1 645 7
 1503 006e 07F12803 		add	r3, r7, #40
 1504 0072 1946     		mov	r1, r3
 1505 0074 1A48     		ldr	r0, .L59
 1506 0076 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1507 007a 0346     		mov	r3, r0
 1508              		.loc 1 645 6
 1509 007c 002B     		cmp	r3, #0
 1510 007e 01D0     		beq	.L54
 646:Src/main.c    ****   {
 647:Src/main.c    ****     Error_Handler();
 1511              		.loc 1 647 5
 1512 0080 FFF7FEFF 		bl	Error_Handler
 1513              	.L54:
 648:Src/main.c    ****   }
 649:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 1514              		.loc 1 649 7
 1515 0084 1648     		ldr	r0, .L59
 1516 0086 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1517 008a 0346     		mov	r3, r0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 39


 1518              		.loc 1 649 6
 1519 008c 002B     		cmp	r3, #0
 1520 008e 01D0     		beq	.L55
 650:Src/main.c    ****   {
 651:Src/main.c    ****     Error_Handler();
 1521              		.loc 1 651 5
 1522 0090 FFF7FEFF 		bl	Error_Handler
 1523              	.L55:
 652:Src/main.c    ****   }
 653:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 1524              		.loc 1 653 37
 1525 0094 2023     		movs	r3, #32
 1526 0096 FB61     		str	r3, [r7, #28]
 654:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1527              		.loc 1 654 33
 1528 0098 0023     		movs	r3, #0
 1529 009a 7B62     		str	r3, [r7, #36]
 655:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1530              		.loc 1 655 7
 1531 009c 07F11C03 		add	r3, r7, #28
 1532 00a0 1946     		mov	r1, r3
 1533 00a2 0F48     		ldr	r0, .L59
 1534 00a4 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1535 00a8 0346     		mov	r3, r0
 1536              		.loc 1 655 6
 1537 00aa 002B     		cmp	r3, #0
 1538 00ac 01D0     		beq	.L56
 656:Src/main.c    ****   {
 657:Src/main.c    ****     Error_Handler();
 1539              		.loc 1 657 5
 1540 00ae FFF7FEFF 		bl	Error_Handler
 1541              	.L56:
 658:Src/main.c    ****   }
 659:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 1542              		.loc 1 659 20
 1543 00b2 6023     		movs	r3, #96
 1544 00b4 3B60     		str	r3, [r7]
 660:Src/main.c    ****   sConfigOC.Pulse = 0;
 1545              		.loc 1 660 19
 1546 00b6 0023     		movs	r3, #0
 1547 00b8 7B60     		str	r3, [r7, #4]
 661:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1548              		.loc 1 661 24
 1549 00ba 0023     		movs	r3, #0
 1550 00bc BB60     		str	r3, [r7, #8]
 662:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1551              		.loc 1 662 24
 1552 00be 0023     		movs	r3, #0
 1553 00c0 3B61     		str	r3, [r7, #16]
 663:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1554              		.loc 1 663 7
 1555 00c2 3B46     		mov	r3, r7
 1556 00c4 0022     		movs	r2, #0
 1557 00c6 1946     		mov	r1, r3
 1558 00c8 0548     		ldr	r0, .L59
 1559 00ca FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1560 00ce 0346     		mov	r3, r0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 40


 1561              		.loc 1 663 6
 1562 00d0 002B     		cmp	r3, #0
 1563 00d2 01D0     		beq	.L58
 664:Src/main.c    ****   {
 665:Src/main.c    ****     Error_Handler();
 1564              		.loc 1 665 5
 1565 00d4 FFF7FEFF 		bl	Error_Handler
 1566              	.L58:
 666:Src/main.c    ****   }
 667:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 668:Src/main.c    **** 
 669:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 670:Src/main.c    ****  
 671:Src/main.c    **** 
 672:Src/main.c    **** }
 1567              		.loc 1 672 1
 1568 00d8 00BF     		nop
 1569 00da 3837     		adds	r7, r7, #56
 1570              	.LCFI33:
 1571              		.cfi_def_cfa_offset 8
 1572 00dc BD46     		mov	sp, r7
 1573              	.LCFI34:
 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 00de 80BD     		pop	{r7, pc}
 1577              	.L60:
 1578              		.align	2
 1579              	.L59:
 1580 00e0 00000000 		.word	htim4
 1581 00e4 00080040 		.word	1073743872
 1582              		.cfi_endproc
 1583              	.LFE1102:
 1585              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1586              		.align	1
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1591              	MX_USART2_UART_Init:
 1592              	.LFB1103:
 673:Src/main.c    **** 
 674:Src/main.c    **** /**
 675:Src/main.c    ****   * @brief USART2 Initialization Function
 676:Src/main.c    ****   * @param None
 677:Src/main.c    ****   * @retval None
 678:Src/main.c    ****   */
 679:Src/main.c    **** static void MX_USART2_UART_Init(void)
 680:Src/main.c    **** {
 1593              		.loc 1 680 1
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 0
 1596              		@ frame_needed = 1, uses_anonymous_args = 0
 1597 0000 80B5     		push	{r7, lr}
 1598              	.LCFI35:
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 7, -8
 1601              		.cfi_offset 14, -4
 1602 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 41


 1603              	.LCFI36:
 1604              		.cfi_def_cfa_register 7
 681:Src/main.c    **** 
 682:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 683:Src/main.c    **** 
 684:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 685:Src/main.c    **** 
 686:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 687:Src/main.c    **** 
 688:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 689:Src/main.c    ****   huart2.Instance = USART2;
 1605              		.loc 1 689 19
 1606 0004 144B     		ldr	r3, .L64
 1607 0006 154A     		ldr	r2, .L64+4
 1608 0008 1A60     		str	r2, [r3]
 690:Src/main.c    ****   huart2.Init.BaudRate = 1843200;
 1609              		.loc 1 690 24
 1610 000a 134B     		ldr	r3, .L64
 1611 000c 4FF4E112 		mov	r2, #1843200
 1612 0010 5A60     		str	r2, [r3, #4]
 691:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1613              		.loc 1 691 26
 1614 0012 114B     		ldr	r3, .L64
 1615 0014 0022     		movs	r2, #0
 1616 0016 9A60     		str	r2, [r3, #8]
 692:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1617              		.loc 1 692 24
 1618 0018 0F4B     		ldr	r3, .L64
 1619 001a 0022     		movs	r2, #0
 1620 001c DA60     		str	r2, [r3, #12]
 693:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 1621              		.loc 1 693 22
 1622 001e 0E4B     		ldr	r3, .L64
 1623 0020 0022     		movs	r2, #0
 1624 0022 1A61     		str	r2, [r3, #16]
 694:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1625              		.loc 1 694 20
 1626 0024 0C4B     		ldr	r3, .L64
 1627 0026 0C22     		movs	r2, #12
 1628 0028 5A61     		str	r2, [r3, #20]
 695:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1629              		.loc 1 695 25
 1630 002a 0B4B     		ldr	r3, .L64
 1631 002c 0022     		movs	r2, #0
 1632 002e 9A61     		str	r2, [r3, #24]
 696:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1633              		.loc 1 696 28
 1634 0030 094B     		ldr	r3, .L64
 1635 0032 0022     		movs	r2, #0
 1636 0034 DA61     		str	r2, [r3, #28]
 697:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1637              		.loc 1 697 30
 1638 0036 084B     		ldr	r3, .L64
 1639 0038 0022     		movs	r2, #0
 1640 003a 1A62     		str	r2, [r3, #32]
 698:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1641              		.loc 1 698 38
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 42


 1642 003c 064B     		ldr	r3, .L64
 1643 003e 0022     		movs	r2, #0
 1644 0040 5A62     		str	r2, [r3, #36]
 699:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1645              		.loc 1 699 7
 1646 0042 0548     		ldr	r0, .L64
 1647 0044 FFF7FEFF 		bl	HAL_UART_Init
 1648 0048 0346     		mov	r3, r0
 1649              		.loc 1 699 6
 1650 004a 002B     		cmp	r3, #0
 1651 004c 01D0     		beq	.L63
 700:Src/main.c    ****   {
 701:Src/main.c    ****     Error_Handler();
 1652              		.loc 1 701 5
 1653 004e FFF7FEFF 		bl	Error_Handler
 1654              	.L63:
 702:Src/main.c    ****   }
 703:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 704:Src/main.c    **** 
 705:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 706:Src/main.c    **** 
 707:Src/main.c    **** }
 1655              		.loc 1 707 1
 1656 0052 00BF     		nop
 1657 0054 80BD     		pop	{r7, pc}
 1658              	.L65:
 1659 0056 00BF     		.align	2
 1660              	.L64:
 1661 0058 00000000 		.word	huart2
 1662 005c 00440040 		.word	1073759232
 1663              		.cfi_endproc
 1664              	.LFE1103:
 1666              		.section	.text.MX_DMA_Init,"ax",%progbits
 1667              		.align	1
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1672              	MX_DMA_Init:
 1673              	.LFB1104:
 708:Src/main.c    **** 
 709:Src/main.c    **** /**
 710:Src/main.c    ****   * Enable DMA controller clock
 711:Src/main.c    ****   */
 712:Src/main.c    **** static void MX_DMA_Init(void)
 713:Src/main.c    **** {
 1674              		.loc 1 713 1
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 8
 1677              		@ frame_needed = 1, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
 1679 0000 80B4     		push	{r7}
 1680              	.LCFI37:
 1681              		.cfi_def_cfa_offset 4
 1682              		.cfi_offset 7, -4
 1683 0002 83B0     		sub	sp, sp, #12
 1684              	.LCFI38:
 1685              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 43


 1686 0004 00AF     		add	r7, sp, #0
 1687              	.LCFI39:
 1688              		.cfi_def_cfa_register 7
 1689              	.LBB4:
 714:Src/main.c    **** 
 715:Src/main.c    ****   /* DMA controller clock enable */
 716:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 1690              		.loc 1 716 3
 1691 0006 094B     		ldr	r3, .L67
 1692 0008 9B6C     		ldr	r3, [r3, #72]
 1693 000a 084A     		ldr	r2, .L67
 1694 000c 43F00103 		orr	r3, r3, #1
 1695 0010 9364     		str	r3, [r2, #72]
 1696 0012 064B     		ldr	r3, .L67
 1697 0014 9B6C     		ldr	r3, [r3, #72]
 1698 0016 03F00103 		and	r3, r3, #1
 1699 001a 7B60     		str	r3, [r7, #4]
 1700 001c 7B68     		ldr	r3, [r7, #4]
 1701              	.LBE4:
 717:Src/main.c    **** 
 718:Src/main.c    **** }
 1702              		.loc 1 718 1
 1703 001e 00BF     		nop
 1704 0020 0C37     		adds	r7, r7, #12
 1705              	.LCFI40:
 1706              		.cfi_def_cfa_offset 4
 1707 0022 BD46     		mov	sp, r7
 1708              	.LCFI41:
 1709              		.cfi_def_cfa_register 13
 1710              		@ sp needed
 1711 0024 5DF8047B 		ldr	r7, [sp], #4
 1712              	.LCFI42:
 1713              		.cfi_restore 7
 1714              		.cfi_def_cfa_offset 0
 1715 0028 7047     		bx	lr
 1716              	.L68:
 1717 002a 00BF     		.align	2
 1718              	.L67:
 1719 002c 00100240 		.word	1073876992
 1720              		.cfi_endproc
 1721              	.LFE1104:
 1723              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1724              		.align	1
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1729              	MX_GPIO_Init:
 1730              	.LFB1105:
 719:Src/main.c    **** 
 720:Src/main.c    **** /**
 721:Src/main.c    ****   * @brief GPIO Initialization Function
 722:Src/main.c    ****   * @param None
 723:Src/main.c    ****   * @retval None
 724:Src/main.c    ****   */
 725:Src/main.c    **** static void MX_GPIO_Init(void)
 726:Src/main.c    **** {
 1731              		.loc 1 726 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 44


 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 32
 1734              		@ frame_needed = 1, uses_anonymous_args = 0
 1735 0000 80B5     		push	{r7, lr}
 1736              	.LCFI43:
 1737              		.cfi_def_cfa_offset 8
 1738              		.cfi_offset 7, -8
 1739              		.cfi_offset 14, -4
 1740 0002 88B0     		sub	sp, sp, #32
 1741              	.LCFI44:
 1742              		.cfi_def_cfa_offset 40
 1743 0004 00AF     		add	r7, sp, #0
 1744              	.LCFI45:
 1745              		.cfi_def_cfa_register 7
 727:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1746              		.loc 1 727 20
 1747 0006 07F10C03 		add	r3, r7, #12
 1748 000a 0022     		movs	r2, #0
 1749 000c 1A60     		str	r2, [r3]
 1750 000e 5A60     		str	r2, [r3, #4]
 1751 0010 9A60     		str	r2, [r3, #8]
 1752 0012 DA60     		str	r2, [r3, #12]
 1753 0014 1A61     		str	r2, [r3, #16]
 1754              	.LBB5:
 728:Src/main.c    **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 729:Src/main.c    **** /* USER CODE END MX_GPIO_Init_1 */
 730:Src/main.c    **** 
 731:Src/main.c    ****   /* GPIO Ports Clock Enable */
 732:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1755              		.loc 1 732 3
 1756 0016 2B4B     		ldr	r3, .L70
 1757 0018 DB6C     		ldr	r3, [r3, #76]
 1758 001a 2A4A     		ldr	r2, .L70
 1759 001c 43F00403 		orr	r3, r3, #4
 1760 0020 D364     		str	r3, [r2, #76]
 1761 0022 284B     		ldr	r3, .L70
 1762 0024 DB6C     		ldr	r3, [r3, #76]
 1763 0026 03F00403 		and	r3, r3, #4
 1764 002a BB60     		str	r3, [r7, #8]
 1765 002c BB68     		ldr	r3, [r7, #8]
 1766              	.LBE5:
 1767              	.LBB6:
 733:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1768              		.loc 1 733 3
 1769 002e 254B     		ldr	r3, .L70
 1770 0030 DB6C     		ldr	r3, [r3, #76]
 1771 0032 244A     		ldr	r2, .L70
 1772 0034 43F00103 		orr	r3, r3, #1
 1773 0038 D364     		str	r3, [r2, #76]
 1774 003a 224B     		ldr	r3, .L70
 1775 003c DB6C     		ldr	r3, [r3, #76]
 1776 003e 03F00103 		and	r3, r3, #1
 1777 0042 7B60     		str	r3, [r7, #4]
 1778 0044 7B68     		ldr	r3, [r7, #4]
 1779              	.LBE6:
 1780              	.LBB7:
 734:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 45


 1781              		.loc 1 734 3
 1782 0046 1F4B     		ldr	r3, .L70
 1783 0048 DB6C     		ldr	r3, [r3, #76]
 1784 004a 1E4A     		ldr	r2, .L70
 1785 004c 43F00203 		orr	r3, r3, #2
 1786 0050 D364     		str	r3, [r2, #76]
 1787 0052 1C4B     		ldr	r3, .L70
 1788 0054 DB6C     		ldr	r3, [r3, #76]
 1789 0056 03F00203 		and	r3, r3, #2
 1790 005a 3B60     		str	r3, [r7]
 1791 005c 3B68     		ldr	r3, [r7]
 1792              	.LBE7:
 735:Src/main.c    **** 
 736:Src/main.c    ****   /*Configure GPIO pin Output Level */
 737:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 1793              		.loc 1 737 3
 1794 005e 0022     		movs	r2, #0
 1795 0060 4FF46041 		mov	r1, #57344
 1796 0064 1848     		ldr	r0, .L70+4
 1797 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 738:Src/main.c    **** 
 739:Src/main.c    ****   /*Configure GPIO pin : Start_Stop_Pin */
 740:Src/main.c    ****   GPIO_InitStruct.Pin = Start_Stop_Pin;
 1798              		.loc 1 740 23
 1799 006a 4FF40053 		mov	r3, #8192
 1800 006e FB60     		str	r3, [r7, #12]
 741:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 1801              		.loc 1 741 24
 1802 0070 4FF40413 		mov	r3, #2162688
 1803 0074 3B61     		str	r3, [r7, #16]
 742:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1804              		.loc 1 742 24
 1805 0076 0023     		movs	r3, #0
 1806 0078 7B61     		str	r3, [r7, #20]
 743:Src/main.c    ****   HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 1807              		.loc 1 743 3
 1808 007a 07F10C03 		add	r3, r7, #12
 1809 007e 1946     		mov	r1, r3
 1810 0080 1248     		ldr	r0, .L70+8
 1811 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 744:Src/main.c    **** 
 745:Src/main.c    ****   /*Configure GPIO pin : PC2 */
 746:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 1812              		.loc 1 746 23
 1813 0086 0423     		movs	r3, #4
 1814 0088 FB60     		str	r3, [r7, #12]
 747:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 1815              		.loc 1 747 24
 1816 008a 0B23     		movs	r3, #11
 1817 008c 3B61     		str	r3, [r7, #16]
 748:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1818              		.loc 1 748 24
 1819 008e 0023     		movs	r3, #0
 1820 0090 7B61     		str	r3, [r7, #20]
 749:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 1821              		.loc 1 749 3
 1822 0092 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 46


 1823 0096 1946     		mov	r1, r3
 1824 0098 0C48     		ldr	r0, .L70+8
 1825 009a FFF7FEFF 		bl	HAL_GPIO_Init
 750:Src/main.c    **** 
 751:Src/main.c    ****   /*Configure GPIO pins : M1_PWM_EN_U_Pin M1_PWM_EN_V_Pin M1_PWM_EN_W_Pin */
 752:Src/main.c    ****   GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 1826              		.loc 1 752 23
 1827 009e 4FF46043 		mov	r3, #57344
 1828 00a2 FB60     		str	r3, [r7, #12]
 753:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1829              		.loc 1 753 24
 1830 00a4 0123     		movs	r3, #1
 1831 00a6 3B61     		str	r3, [r7, #16]
 754:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1832              		.loc 1 754 24
 1833 00a8 0223     		movs	r3, #2
 1834 00aa 7B61     		str	r3, [r7, #20]
 755:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 1835              		.loc 1 755 25
 1836 00ac 0223     		movs	r3, #2
 1837 00ae BB61     		str	r3, [r7, #24]
 756:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1838              		.loc 1 756 3
 1839 00b0 07F10C03 		add	r3, r7, #12
 1840 00b4 1946     		mov	r1, r3
 1841 00b6 0448     		ldr	r0, .L70+4
 1842 00b8 FFF7FEFF 		bl	HAL_GPIO_Init
 757:Src/main.c    **** 
 758:Src/main.c    **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 759:Src/main.c    **** /* USER CODE END MX_GPIO_Init_2 */
 760:Src/main.c    **** }
 1843              		.loc 1 760 1
 1844 00bc 00BF     		nop
 1845 00be 2037     		adds	r7, r7, #32
 1846              	.LCFI46:
 1847              		.cfi_def_cfa_offset 8
 1848 00c0 BD46     		mov	sp, r7
 1849              	.LCFI47:
 1850              		.cfi_def_cfa_register 13
 1851              		@ sp needed
 1852 00c2 80BD     		pop	{r7, pc}
 1853              	.L71:
 1854              		.align	2
 1855              	.L70:
 1856 00c4 00100240 		.word	1073876992
 1857 00c8 00040048 		.word	1207960576
 1858 00cc 00080048 		.word	1207961600
 1859              		.cfi_endproc
 1860              	.LFE1105:
 1862              		.section	.text.startMediumFrequencyTask,"ax",%progbits
 1863              		.align	1
 1864              		.weak	startMediumFrequencyTask
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1869              	startMediumFrequencyTask:
 1870              	.LFB1106:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 47


 761:Src/main.c    **** 
 762:Src/main.c    **** /* USER CODE BEGIN 4 */
 763:Src/main.c    **** 
 764:Src/main.c    **** /* USER CODE END 4 */
 765:Src/main.c    **** 
 766:Src/main.c    **** /* USER CODE BEGIN Header_startMediumFrequencyTask */
 767:Src/main.c    **** /**
 768:Src/main.c    ****   * @brief  Function implementing the mediumFrequency thread.
 769:Src/main.c    ****   * @param  argument: Not used
 770:Src/main.c    ****   * @retval None
 771:Src/main.c    ****   */
 772:Src/main.c    **** /* USER CODE END Header_startMediumFrequencyTask */
 773:Src/main.c    **** __weak void startMediumFrequencyTask(void const * argument)
 774:Src/main.c    **** {
 1871              		.loc 1 774 1
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 8
 1874              		@ frame_needed = 1, uses_anonymous_args = 0
 1875 0000 80B5     		push	{r7, lr}
 1876              	.LCFI48:
 1877              		.cfi_def_cfa_offset 8
 1878              		.cfi_offset 7, -8
 1879              		.cfi_offset 14, -4
 1880 0002 82B0     		sub	sp, sp, #8
 1881              	.LCFI49:
 1882              		.cfi_def_cfa_offset 16
 1883 0004 00AF     		add	r7, sp, #0
 1884              	.LCFI50:
 1885              		.cfi_def_cfa_register 7
 1886 0006 7860     		str	r0, [r7, #4]
 1887              	.L73:
 775:Src/main.c    ****   /* USER CODE BEGIN 5 */
 776:Src/main.c    ****   /* Infinite loop */
 777:Src/main.c    ****   for(;;)
 778:Src/main.c    ****   {
 779:Src/main.c    ****     osDelay(1);
 1888              		.loc 1 779 5 discriminator 1
 1889 0008 0120     		movs	r0, #1
 1890 000a FFF7FEFF 		bl	osDelay
 1891 000e FBE7     		b	.L73
 1892              		.cfi_endproc
 1893              	.LFE1106:
 1895              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1896              		.align	1
 1897              		.global	HAL_TIM_PeriodElapsedCallback
 1898              		.syntax unified
 1899              		.thumb
 1900              		.thumb_func
 1902              	HAL_TIM_PeriodElapsedCallback:
 1903              	.LFB1107:
 780:Src/main.c    ****   }
 781:Src/main.c    ****   /* USER CODE END 5 */
 782:Src/main.c    **** }
 783:Src/main.c    **** 
 784:Src/main.c    **** /**
 785:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 786:Src/main.c    ****   * @note   This function is called  when TIM6 interrupt took place, inside
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 48


 787:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 788:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 789:Src/main.c    ****   * @param  htim : TIM handle
 790:Src/main.c    ****   * @retval None
 791:Src/main.c    ****   */
 792:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 793:Src/main.c    **** {
 1904              		.loc 1 793 1
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 16
 1907              		@ frame_needed = 1, uses_anonymous_args = 0
 1908 0000 80B5     		push	{r7, lr}
 1909              	.LCFI51:
 1910              		.cfi_def_cfa_offset 8
 1911              		.cfi_offset 7, -8
 1912              		.cfi_offset 14, -4
 1913 0002 84B0     		sub	sp, sp, #16
 1914              	.LCFI52:
 1915              		.cfi_def_cfa_offset 24
 1916 0004 00AF     		add	r7, sp, #0
 1917              	.LCFI53:
 1918              		.cfi_def_cfa_register 7
 1919 0006 7860     		str	r0, [r7, #4]
 794:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 795:Src/main.c    ****   uint32_t val= 0;
 1920              		.loc 1 795 12
 1921 0008 0023     		movs	r3, #0
 1922 000a FB60     		str	r3, [r7, #12]
 796:Src/main.c    **** 
 797:Src/main.c    ****   /* USER CODE END Callback 0 */
 798:Src/main.c    ****   if (htim->Instance == TIM6) 
 1923              		.loc 1 798 11
 1924 000c 7B68     		ldr	r3, [r7, #4]
 1925 000e 1B68     		ldr	r3, [r3]
 1926              		.loc 1 798 6
 1927 0010 044A     		ldr	r2, .L77
 1928 0012 9342     		cmp	r3, r2
 1929 0014 01D1     		bne	.L76
 799:Src/main.c    ****   {
 800:Src/main.c    ****     HAL_IncTick();
 1930              		.loc 1 800 5
 1931 0016 FFF7FEFF 		bl	HAL_IncTick
 1932              	.L76:
 801:Src/main.c    ****   }
 802:Src/main.c    ****   
 803:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 804:Src/main.c    **** 
 805:Src/main.c    ****   /* USER CODE END Callback 1 */
 806:Src/main.c    **** }
 1933              		.loc 1 806 1
 1934 001a 00BF     		nop
 1935 001c 1037     		adds	r7, r7, #16
 1936              	.LCFI54:
 1937              		.cfi_def_cfa_offset 8
 1938 001e BD46     		mov	sp, r7
 1939              	.LCFI55:
 1940              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 49


 1941              		@ sp needed
 1942 0020 80BD     		pop	{r7, pc}
 1943              	.L78:
 1944 0022 00BF     		.align	2
 1945              	.L77:
 1946 0024 00100040 		.word	1073745920
 1947              		.cfi_endproc
 1948              	.LFE1107:
 1950              		.section	.text.Error_Handler,"ax",%progbits
 1951              		.align	1
 1952              		.global	Error_Handler
 1953              		.syntax unified
 1954              		.thumb
 1955              		.thumb_func
 1957              	Error_Handler:
 1958              	.LFB1108:
 807:Src/main.c    **** 
 808:Src/main.c    **** /**
 809:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 810:Src/main.c    ****   * @retval None
 811:Src/main.c    ****   */
 812:Src/main.c    **** void Error_Handler(void)
 813:Src/main.c    **** {
 1959              		.loc 1 813 1
 1960              		.cfi_startproc
 1961              		@ args = 0, pretend = 0, frame = 0
 1962              		@ frame_needed = 1, uses_anonymous_args = 0
 1963              		@ link register save eliminated.
 1964 0000 80B4     		push	{r7}
 1965              	.LCFI56:
 1966              		.cfi_def_cfa_offset 4
 1967              		.cfi_offset 7, -4
 1968 0002 00AF     		add	r7, sp, #0
 1969              	.LCFI57:
 1970              		.cfi_def_cfa_register 7
 1971              	.LBB8:
 1972              	.LBB9:
 1973              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 50


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 51


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 52


 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 53


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1974              		.loc 2 209 3
 1975              		.syntax unified
 1976              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1977 0004 72B6     		cpsid i
 1978              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1979              		.loc 2 210 1
 1980              		.thumb
 1981              		.syntax unified
 1982 0006 00BF     		nop
 1983              	.L80:
 1984              	.LBE9:
 1985              	.LBE8:
 814:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 815:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 816:Src/main.c    ****   __disable_irq();
 817:Src/main.c    ****   while (1)
 1986              		.loc 1 817 9 discriminator 1
 1987 0008 FEE7     		b	.L80
 1988              		.cfi_endproc
 1989              	.LFE1108:
 1991              		.text
 1992              	.Letext0:
 1993              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 1994              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 1995              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 1996              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 1997              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 1998              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 1999              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 2000              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 2001              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 2002              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
 2003              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 2004              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
 2005              		.file 15 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 2006              		.file 16 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 2007              		.file 17 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 54


 2008              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2009              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2010              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2011              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:17     .rodata:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:27     .rodata.OFFSET_TAB_CCMRx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:30     .rodata.OFFSET_TAB_CCMRx:00000000 OFFSET_TAB_CCMRx
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:33     .rodata.SHIFT_TAB_OCxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:36     .rodata.SHIFT_TAB_OCxx:00000000 SHIFT_TAB_OCxx
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:39     .rodata.SHIFT_TAB_ICxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:42     .rodata.SHIFT_TAB_ICxx:00000000 SHIFT_TAB_ICxx
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:45     .rodata.SHIFT_TAB_CCxP:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:48     .rodata.SHIFT_TAB_CCxP:00000000 SHIFT_TAB_CCxP
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:51     .rodata.SHIFT_TAB_OISx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:54     .rodata.SHIFT_TAB_OISx:00000000 SHIFT_TAB_OISx
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:57     .rodata.CHANNEL_OFFSET_TAB:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:60     .rodata.CHANNEL_OFFSET_TAB:00000000 CHANNEL_OFFSET_TAB
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:67     .bss.hadc1:00000000 hadc1
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:64     .bss.hadc1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:74     .bss.hadc2:00000000 hadc2
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:71     .bss.hadc2:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:81     .bss.htim1:00000000 htim1
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:78     .bss.htim1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:88     .bss.htim3:00000000 htim3
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:85     .bss.htim3:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:95     .bss.htim4:00000000 htim4
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:92     .bss.htim4:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:102    .bss.huart2:00000000 huart2
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:99     .bss.huart2:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:109    .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:106    .bss.hdma_usart2_rx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:116    .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:113    .bss.hdma_usart2_tx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:123    .bss.mediumFrequencyHandle:00000000 mediumFrequencyHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:120    .bss.mediumFrequencyHandle:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:130    .bss.safetyHandle:00000000 safetyHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:127    .bss.safetyHandle:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1869   .text.startMediumFrequencyTask:00000000 startMediumFrequencyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:154    .text.main:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:160    .text.main:00000000 main
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:297    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1729   .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1672   .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:507    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:978    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1291   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1591   .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:797    .text.MX_ADC2_Init:00000000 MX_ADC2_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1425   .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:425    .text.MX_NVIC_Init:00000000 MX_NVIC_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1957   .text.Error_Handler:00000000 Error_Handler
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:281    .text.main:000000c0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:291    .text.SystemClock_Config:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:420    .text.MX_NVIC_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:502    .text.MX_ADC1_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:781    .text.MX_ADC1_Init:000001a4 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:792    .text.MX_ADC2_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:966    .text.MX_ADC2_Init:000000f0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:973    .text.MX_TIM1_Init:00000000 $t
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s 			page 56


C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1280   .text.MX_TIM1_Init:000001e0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1286   .text.MX_TIM3_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1414   .text.MX_TIM3_Init:000000a4 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1420   .text.MX_TIM4_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1580   .text.MX_TIM4_Init:000000e0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1586   .text.MX_USART2_UART_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1661   .text.MX_USART2_UART_Init:00000058 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1667   .text.MX_DMA_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1719   .text.MX_DMA_Init:0000002c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1724   .text.MX_GPIO_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1856   .text.MX_GPIO_Init:000000c4 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1863   .text.startMediumFrequencyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1896   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1902   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1946   .text.HAL_TIM_PeriodElapsedCallback:00000024 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccAYgC36.s:1951   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
StartSafetyTask
HAL_Init
MX_MotorControl_Init
HAL_ADCEx_Calibration_Start
HAL_ADC_Start_IT
HAL_TIM_PWM_Start
HAL_TIM_Base_Start_IT
osThreadCreate
osKernelStart
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADCEx_DisableInjectedQueue
HAL_ADCEx_InjectedConfigChannel
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_PWM_Init
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
HAL_TIMEx_ConfigBreakInput
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
HAL_TIM_ConfigClockSource
HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_IncTick
