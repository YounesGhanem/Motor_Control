ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"mc_tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  20              		.align	2
  23              	OFFSET_TAB_CCMRx:
  24 0000 00000000 		.ascii	"\000\000\000\000\004\004\004<<"
  24      0404043C 
  24      3C
  25              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  26              		.align	2
  29              	SHIFT_TAB_OCxx:
  30 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\010"
  30      00000800 
  30      08
  31              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  32              		.align	2
  35              	SHIFT_TAB_ICxx:
  36 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000"
  36      00000800 
  36      00
  37              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  38              		.align	2
  41              	SHIFT_TAB_CCxP:
  42 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\020\024"
  42      080A0C10 
  42      14
  43              		.section	.rodata.SHIFT_TAB_OISx,"a"
  44              		.align	2
  47              	SHIFT_TAB_OISx:
  48 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\010\012"
  48      04050608 
  48      0A
  49              		.section	.text.LL_GPIO_LockPin,"ax",%progbits
  50              		.align	1
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  55              	LL_GPIO_LockPin:
  56              	.LFB615:
  57              		.file 1 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h"
   1:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 2


   2:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @file    stm32l4xx_ll_gpio.h
   4:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *
   9:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * All rights reserved.
  11:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *
  12:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * in the root directory of this software component.
  14:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *
  16:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   ******************************************************************************
  17:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  18:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  19:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #ifndef STM32L4xx_LL_GPIO_H
  21:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define STM32L4xx_LL_GPIO_H
  22:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  23:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #ifdef __cplusplus
  24:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** extern "C" {
  25:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif
  26:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  27:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #include "stm32l4xx.h"
  29:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  30:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @addtogroup STM32L4xx_LL_Driver
  31:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  32:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  33:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  34:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  35:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  36:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  37:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  38:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  39:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** MISRA C:2012 deviation rule has been granted for following rules:
  40:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * Rule-18.1_d - Medium: Array pointer `GPIOx' is accessed with index [..,..]
  41:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * which may be out of array bounds [..,UNKNOWN] in following APIs:
  42:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_0_7
  43:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_0_7
  44:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_8_15
  45:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_8_15
  46:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  47:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  48:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  49:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  50:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  51:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  52:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  53:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
  54:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  55:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  56:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  57:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
  58:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 3


  59:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  60:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  62:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  65:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  66:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  67:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  68:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
  69:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  70:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  71:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** typedef struct
  72:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
  73:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  74:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  75:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  76:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  77:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  78:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  79:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  80:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  81:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  82:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  83:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  84:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  85:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  86:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  87:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  88:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  89:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  90:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  91:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  92:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  93:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  94:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  95:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  96:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Alternate;    /*!< Specifies the Peripheral to be connected to the selected pins.
  97:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_AF.
  98:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  99:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
 100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
 101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
 106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_0                      GPIO_BSRR_BS0 /*!< Select pin 0 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 4


 116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_1                      GPIO_BSRR_BS1 /*!< Select pin 1 */
 117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_2                      GPIO_BSRR_BS2 /*!< Select pin 2 */
 118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_3                      GPIO_BSRR_BS3 /*!< Select pin 3 */
 119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_4                      GPIO_BSRR_BS4 /*!< Select pin 4 */
 120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_5                      GPIO_BSRR_BS5 /*!< Select pin 5 */
 121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_6                      GPIO_BSRR_BS6 /*!< Select pin 6 */
 122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_7                      GPIO_BSRR_BS7 /*!< Select pin 7 */
 123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_8                      GPIO_BSRR_BS8 /*!< Select pin 8 */
 124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_9                      GPIO_BSRR_BS9 /*!< Select pin 9 */
 125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_10                     GPIO_BSRR_BS10 /*!< Select pin 10 */
 126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_11                     GPIO_BSRR_BS11 /*!< Select pin 11 */
 127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_12                     GPIO_BSRR_BS12 /*!< Select pin 12 */
 128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_13                     GPIO_BSRR_BS13 /*!< Select pin 13 */
 129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_14                     GPIO_BSRR_BS14 /*!< Select pin 14 */
 130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_15                     GPIO_BSRR_BS15 /*!< Select pin 15 */
 131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                    (GPIO_BSRR_BS0 | GPIO_BSRR_BS1  | GPIO_BSRR_BS2  | \
 132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS3  | GPIO_BSRR_BS4  | GPIO_BSRR_BS5  | \
 133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS6  | GPIO_BSRR_BS7  | GPIO_BSRR_BS8  | \
 134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS9  | GPIO_BSRR_BS10 | GPIO_BSRR_BS11 | \
 135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS12 | GPIO_BSRR_BS13 | GPIO_BSRR_BS14 | \
 136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS15) /*!< Select all pins */
 137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT                 (0x00000000U) /*!< Select input mode */
 145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODE0_0  /*!< Select output mode */
 146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODE0_1  /*!< Select alternate function mode 
 147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODE0    /*!< Select analog mode */
 148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL            (0x00000000U) /*!< Select push-pull as output type */
 156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN           GPIO_OTYPER_OT0 /*!< Select open-drain as output type */
 157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW             (0x00000000U) /*!< Select I/O low output speed    */
 165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM          GPIO_OSPEEDR_OSPEED0_0 /*!< Select I/O medium output spe
 166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH            GPIO_OSPEEDR_OSPEED0_1 /*!< Select I/O fast output speed
 167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_VERY_HIGH       GPIO_OSPEEDR_OSPEED0   /*!< Select I/O high output speed
 168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_LOW                  LL_GPIO_SPEED_FREQ_LOW
 172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_MEDIUM               LL_GPIO_SPEED_FREQ_MEDIUM
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 5


 173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FAST                 LL_GPIO_SPEED_FREQ_HIGH
 174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_HIGH                 LL_GPIO_SPEED_FREQ_VERY_HIGH
 175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PULL_NO                    (0x00000000U) /*!< Select I/O no pull */
 180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                    GPIO_PUPDR_PUPD0_0 /*!< Select I/O pull up */
 181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                  GPIO_PUPDR_PUPD0_1 /*!< Select I/O pull down */
 182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_AF Alternate Function
 187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_0                       (0x0000000U) /*!< Select alternate function 0 */
 190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_1                       (0x0000001U) /*!< Select alternate function 1 */
 191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_2                       (0x0000002U) /*!< Select alternate function 2 */
 192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_3                       (0x0000003U) /*!< Select alternate function 3 */
 193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_4                       (0x0000004U) /*!< Select alternate function 4 */
 194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_5                       (0x0000005U) /*!< Select alternate function 5 */
 195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_6                       (0x0000006U) /*!< Select alternate function 6 */
 196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_7                       (0x0000007U) /*!< Select alternate function 7 */
 197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_8                       (0x0000008U) /*!< Select alternate function 8 */
 198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_9                       (0x0000009U) /*!< Select alternate function 9 */
 199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_10                      (0x000000AU) /*!< Select alternate function 10 */
 200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_11                      (0x000000BU) /*!< Select alternate function 11 */
 201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_12                      (0x000000CU) /*!< Select alternate function 12 */
 202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_13                      (0x000000DU) /*!< Select alternate function 13 */
 203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_14                      (0x000000EU) /*!< Select alternate function 14 */
 204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_15                      (0x000000FU) /*!< Select alternate function 15 */
 205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 6


 230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Register value
 236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
 260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 7


 287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(P
 288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
 295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->MODER,
 322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_SetPinOutputType
 330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 8


 344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t Outpu
 355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_GetPinOutputType
 365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
 389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_SetPinSpeed
 400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 9


 401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****              (Speed << (POSITION_VAL(Pin) * 2U)));
 429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_GetPinSpeed
 438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 10


 458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OSPEEDR,
 465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(P
 466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_SetPinPull
 472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(P
 499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
 503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_GetPinPull
 505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 11


 515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->PUPDR,
 531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_SetAFPin_0_7
 539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin) * 4U)));
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 12


 572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_GetAFPin_0_7
 577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
 606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[0],
 608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) 
 609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_SetAFPin_8_15
 616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 13


 629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
 649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_GetAFPin_8_15
 655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
 684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[1],
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 14


 686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U))) >> (POSITION_VAL
 687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined(GPIO_ASCR_ASC0)
 690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Connect analog switch to ADC input of several pins for a dedicated port.
 692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   This bit must be set prior to the ADC conversion.
 693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         Only the IO which connected to the ADC input are effective.
 694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         Other IO must be kept reset value
 695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll ASCR         ASCy          LL_GPIO_EnablePinAnalogControl
 696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   SET_BIT(GPIOx->ASCR, PinMask);
 720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Disconnect analog switch to ADC input of several pins for a dedicated port.
 724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll ASCR         ASCy          LL_GPIO_DisablePinAnalogControl
 725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 15


 743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_DisablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   CLEAR_BIT(GPIOx->ASCR, PinMask);
 749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif /* GPIO_ASCR_ASC0 */
 751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         next reset.
 757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         (control and alternate function registers).
 759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
  58              		.loc 1 782 1
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 80B4     		push	{r7}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0002 85B0     		sub	sp, sp, #20
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 24
  70 0004 00AF     		add	r7, sp, #0
  71              	.LCFI2:
  72              		.cfi_def_cfa_register 7
  73 0006 7860     		str	r0, [r7, #4]
  74 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 16


 783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   __IO uint32_t temp;
 784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
  75              		.loc 1 784 3
  76 000a 3B68     		ldr	r3, [r7]
  77 000c 43F48032 		orr	r2, r3, #65536
  78 0010 7B68     		ldr	r3, [r7, #4]
  79 0012 DA61     		str	r2, [r3, #28]
 785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
  80              		.loc 1 785 3
  81 0014 7B68     		ldr	r3, [r7, #4]
  82 0016 3A68     		ldr	r2, [r7]
  83 0018 DA61     		str	r2, [r3, #28]
 786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
  84              		.loc 1 786 3
  85 001a 3B68     		ldr	r3, [r7]
  86 001c 43F48032 		orr	r2, r3, #65536
  87 0020 7B68     		ldr	r3, [r7, #4]
  88 0022 DA61     		str	r2, [r3, #28]
 787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   /* Read LCKK register. This read is mandatory to complete key lock sequence */
 788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
  89              		.loc 1 788 10
  90 0024 7B68     		ldr	r3, [r7, #4]
  91 0026 DB69     		ldr	r3, [r3, #28]
  92              		.loc 1 788 8
  93 0028 FB60     		str	r3, [r7, #12]
 789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   (void) temp;
  94              		.loc 1 789 3
  95 002a FB68     		ldr	r3, [r7, #12]
 790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
  96              		.loc 1 790 1
  97 002c 00BF     		nop
  98 002e 1437     		adds	r7, r7, #20
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 4
 101 0030 BD46     		mov	sp, r7
 102              	.LCFI4:
 103              		.cfi_def_cfa_register 13
 104              		@ sp needed
 105 0032 5DF8047B 		ldr	r7, [sp], #4
 106              	.LCFI5:
 107              		.cfi_restore 7
 108              		.cfi_def_cfa_offset 0
 109 0036 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE615:
 113              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
 114              		.align	2
 117              	CHANNEL_OFFSET_TAB:
 118 0000 081C3044 		.ascii	"\010\0340DXl\200"
 118      586C80
 119              		.section	.bss.FOCVars,"aw",%nobits
 120              		.align	2
 123              	FOCVars:
 124 0000 00000000 		.space	38
 124      00000000 
 124      00000000 
 124      00000000 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 17


 124      00000000 
 125              		.section	.bss.pEAC,"aw",%nobits
 126              		.align	2
 129              	pEAC:
 130 0000 00000000 		.space	4
 131              		.section	.bss.pwmcHandle,"aw",%nobits
 132              		.align	2
 135              	pwmcHandle:
 136 0000 00000000 		.space	4
 137              		.section	.bss.pREMNG,"aw",%nobits
 138              		.align	2
 141              	pREMNG:
 142 0000 00000000 		.space	4
 143              		.section	.bss.hMFTaskCounterM1,"aw",%nobits
 144              		.align	1
 147              	hMFTaskCounterM1:
 148 0000 0000     		.space	2
 149              		.section	.bss.hBootCapDelayCounterM1,"aw",%nobits
 150              		.align	1
 153              	hBootCapDelayCounterM1:
 154 0000 0000     		.space	2
 155              		.section	.bss.hStopPermanencyCounterM1,"aw",%nobits
 156              		.align	1
 159              	hStopPermanencyCounterM1:
 160 0000 0000     		.space	2
 161              		.section	.bss.bMCBootCompleted,"aw",%nobits
 164              	bMCBootCompleted:
 165 0000 00       		.space	1
 166              		.global	PerfTraces
 167              		.section	.bss.PerfTraces,"aw",%nobits
 168              		.align	2
 171              	PerfTraces:
 172 0000 00000000 		.space	40
 172      00000000 
 172      00000000 
 172      00000000 
 172      00000000 
 173              		.section	.text.MCboot,"ax",%progbits
 174              		.align	1
 175              		.weak	MCboot
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	MCboot:
 181              	.LFB1095:
 182              		.file 2 "Src/mc_tasks.c"
   1:Src/mc_tasks.c **** 
   2:Src/mc_tasks.c **** /**
   3:Src/mc_tasks.c ****   ******************************************************************************
   4:Src/mc_tasks.c ****   * @file    mc_tasks.c
   5:Src/mc_tasks.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_tasks.c ****   * @brief   This file implements tasks definition
   7:Src/mc_tasks.c ****   *
   8:Src/mc_tasks.c ****   ******************************************************************************
   9:Src/mc_tasks.c ****   * @attention
  10:Src/mc_tasks.c ****   *
  11:Src/mc_tasks.c ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 18


  12:Src/mc_tasks.c ****   * All rights reserved.</center></h2>
  13:Src/mc_tasks.c ****   *
  14:Src/mc_tasks.c ****   * This software component is licensed by ST under Ultimate Liberty license
  15:Src/mc_tasks.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:Src/mc_tasks.c ****   * the License. You may obtain a copy of the License at:
  17:Src/mc_tasks.c ****   *                             www.st.com/SLA0044
  18:Src/mc_tasks.c ****   *
  19:Src/mc_tasks.c ****   ******************************************************************************
  20:Src/mc_tasks.c ****   */
  21:Src/mc_tasks.c **** 
  22:Src/mc_tasks.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/mc_tasks.c **** //cstat -MISRAC2012-Rule-21.1
  24:Src/mc_tasks.c **** #include "main.h"
  25:Src/mc_tasks.c **** //cstat +MISRAC2012-Rule-21.1
  26:Src/mc_tasks.c **** #include "mc_type.h"
  27:Src/mc_tasks.c **** #include "mc_math.h"
  28:Src/mc_tasks.c **** #include "motorcontrol.h"
  29:Src/mc_tasks.c **** #include "regular_conversion_manager.h"
  30:Src/mc_tasks.c **** #include "cmsis_os.h"
  31:Src/mc_tasks.c **** #include "mc_interface.h"
  32:Src/mc_tasks.c **** #include "digital_output.h"
  33:Src/mc_tasks.c **** #include "pwm_common.h"
  34:Src/mc_tasks.c **** #include "mc_tasks.h"
  35:Src/mc_tasks.c **** #include "parameters_conversion.h"
  36:Src/mc_tasks.c **** #include "mcp_config.h"
  37:Src/mc_tasks.c **** #include "mc_app_hooks.h"
  38:Src/mc_tasks.c **** 
  39:Src/mc_tasks.c **** /* USER CODE BEGIN Includes */
  40:Src/mc_tasks.c **** 
  41:Src/mc_tasks.c **** /* USER CODE END Includes */
  42:Src/mc_tasks.c **** 
  43:Src/mc_tasks.c **** /* USER CODE BEGIN Private define */
  44:Src/mc_tasks.c **** /* Private define ------------------------------------------------------------*/
  45:Src/mc_tasks.c **** /* Un-Comment this macro define in order to activate the smooth
  46:Src/mc_tasks.c ****    braking action on over voltage */
  47:Src/mc_tasks.c **** /* #define  MC.SMOOTH_BRAKING_ACTION_ON_OVERVOLTAGE */
  48:Src/mc_tasks.c **** 
  49:Src/mc_tasks.c **** #define STOPPERMANENCY_MS              ((uint16_t)400)
  50:Src/mc_tasks.c **** #define STOPPERMANENCY_MS2             ((uint16_t)400)
  51:Src/mc_tasks.c **** #define STOPPERMANENCY_TICKS           (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS)  / ((uin
  52:Src/mc_tasks.c **** #define STOPPERMANENCY_TICKS2          (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS2) / ((uin
  53:Src/mc_tasks.c **** /* USER CODE END Private define */
  54:Src/mc_tasks.c **** 
  55:Src/mc_tasks.c **** #define VBUS_TEMP_ERR_MASK (MC_OVER_VOLT| MC_UNDER_VOLT| MC_OVER_TEMP)
  56:Src/mc_tasks.c **** /* Private variables----------------------------------------------------------*/
  57:Src/mc_tasks.c **** 
  58:Src/mc_tasks.c **** static FOCVars_t FOCVars[NBR_OF_MOTORS];
  59:Src/mc_tasks.c **** static EncAlign_Handle_t *pEAC[NBR_OF_MOTORS];
  60:Src/mc_tasks.c **** 
  61:Src/mc_tasks.c **** static PWMC_Handle_t *pwmcHandle[NBR_OF_MOTORS];
  62:Src/mc_tasks.c **** //cstat !MISRAC2012-Rule-8.9_a
  63:Src/mc_tasks.c **** static RampExtMngr_Handle_t *pREMNG[NBR_OF_MOTORS];   /*!< Ramp manager used to modify the Iq ref
  64:Src/mc_tasks.c ****                                                     during the start-up switch over. */
  65:Src/mc_tasks.c **** 
  66:Src/mc_tasks.c **** static uint16_t hMFTaskCounterM1 = 0; //cstat !MISRAC2012-Rule-8.9_a
  67:Src/mc_tasks.c **** static volatile uint16_t hBootCapDelayCounterM1 = ((uint16_t)0);
  68:Src/mc_tasks.c **** static volatile uint16_t hStopPermanencyCounterM1 = ((uint16_t)0);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 19


  69:Src/mc_tasks.c **** 
  70:Src/mc_tasks.c **** static volatile uint8_t bMCBootCompleted = ((uint8_t)0);
  71:Src/mc_tasks.c **** 
  72:Src/mc_tasks.c **** /* Performs the CPU load measure of FOC main tasks */
  73:Src/mc_tasks.c **** MC_Perf_Handle_t PerfTraces;
  74:Src/mc_tasks.c **** 
  75:Src/mc_tasks.c **** #define M1_CHARGE_BOOT_CAP_TICKS          (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  76:Src/mc_tasks.c **** #define M1_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0.000\
  77:Src/mc_tasks.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES / 2U))
  78:Src/mc_tasks.c **** #define M2_CHARGE_BOOT_CAP_TICKS         (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  79:Src/mc_tasks.c **** #define M2_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0\
  80:Src/mc_tasks.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES2 / 2U))
  81:Src/mc_tasks.c **** 
  82:Src/mc_tasks.c **** /* USER CODE BEGIN Private Variables */
  83:Src/mc_tasks.c **** 
  84:Src/mc_tasks.c **** /* USER CODE END Private Variables */
  85:Src/mc_tasks.c **** 
  86:Src/mc_tasks.c **** /* Private functions ---------------------------------------------------------*/
  87:Src/mc_tasks.c **** void TSK_MediumFrequencyTaskM1(void);
  88:Src/mc_tasks.c **** void FOC_Clear(uint8_t bMotor);
  89:Src/mc_tasks.c **** void FOC_InitAdditionalMethods(uint8_t bMotor);
  90:Src/mc_tasks.c **** void FOC_CalcCurrRef(uint8_t bMotor);
  91:Src/mc_tasks.c **** void TSK_MF_StopProcessing(uint8_t motor);
  92:Src/mc_tasks.c **** MCI_Handle_t *GetMCI(uint8_t bMotor);
  93:Src/mc_tasks.c **** static uint16_t FOC_CurrControllerM1(void);
  94:Src/mc_tasks.c **** void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount);
  95:Src/mc_tasks.c **** bool TSK_ChargeBootCapDelayHasElapsedM1(void);
  96:Src/mc_tasks.c **** void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount);
  97:Src/mc_tasks.c **** bool TSK_StopPermanencyTimeHasElapsedM1(void);
  98:Src/mc_tasks.c **** void TSK_SafetyTask_PWMOFF(uint8_t motor);
  99:Src/mc_tasks.c **** 
 100:Src/mc_tasks.c **** /* USER CODE BEGIN Private Functions */
 101:Src/mc_tasks.c **** 
 102:Src/mc_tasks.c **** /* USER CODE END Private Functions */
 103:Src/mc_tasks.c **** /**
 104:Src/mc_tasks.c ****   * @brief  It initializes the whole MC core according to user defined
 105:Src/mc_tasks.c ****   *         parameters.
 106:Src/mc_tasks.c ****   * @param  pMCIList pointer to the vector of MCInterface objects that will be
 107:Src/mc_tasks.c ****   *         created and initialized. The vector must have length equal to the
 108:Src/mc_tasks.c ****   *         number of motor drives.
 109:Src/mc_tasks.c ****   */
 110:Src/mc_tasks.c **** __weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
 111:Src/mc_tasks.c **** {
 183              		.loc 2 111 1
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 16
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187 0000 90B5     		push	{r4, r7, lr}
 188              	.LCFI6:
 189              		.cfi_def_cfa_offset 12
 190              		.cfi_offset 4, -12
 191              		.cfi_offset 7, -8
 192              		.cfi_offset 14, -4
 193 0002 87B0     		sub	sp, sp, #28
 194              	.LCFI7:
 195              		.cfi_def_cfa_offset 40
 196 0004 02AF     		add	r7, sp, #8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 20


 197              	.LCFI8:
 198              		.cfi_def_cfa 7, 32
 199 0006 7860     		str	r0, [r7, #4]
 112:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 113:Src/mc_tasks.c **** 
 114:Src/mc_tasks.c ****   /* USER CODE END MCboot 0 */
 115:Src/mc_tasks.c **** 
 116:Src/mc_tasks.c ****   if (MC_NULL == pMCIList)
 200              		.loc 2 116 6
 201 0008 7B68     		ldr	r3, [r7, #4]
 202 000a 002B     		cmp	r3, #0
 203 000c 00F09580 		beq	.L4
 117:Src/mc_tasks.c ****   {
 118:Src/mc_tasks.c ****     /* Nothing to do */
 119:Src/mc_tasks.c ****   }
 120:Src/mc_tasks.c ****   else
 121:Src/mc_tasks.c ****   {
 122:Src/mc_tasks.c **** 
 123:Src/mc_tasks.c ****     bMCBootCompleted = (uint8_t )0;
 204              		.loc 2 123 22
 205 0010 4C4B     		ldr	r3, .L5
 206 0012 0022     		movs	r2, #0
 207 0014 1A70     		strb	r2, [r3]
 124:Src/mc_tasks.c **** 
 125:Src/mc_tasks.c ****     /**********************************************************/
 126:Src/mc_tasks.c ****     /*    PWM and current sensing component initialization    */
 127:Src/mc_tasks.c ****     /**********************************************************/
 128:Src/mc_tasks.c ****     pwmcHandle[M1] = &PWM_Handle_M1._Super;
 208              		.loc 2 128 20
 209 0016 4C4B     		ldr	r3, .L5+4
 210 0018 4C4A     		ldr	r2, .L5+8
 211 001a 1A60     		str	r2, [r3]
 129:Src/mc_tasks.c ****     R3_1_Init(&PWM_Handle_M1);
 212              		.loc 2 129 5
 213 001c 4B48     		ldr	r0, .L5+8
 214 001e FFF7FEFF 		bl	R3_1_Init
 130:Src/mc_tasks.c ****     ASPEP_start(&aspepOverUartA);
 215              		.loc 2 130 5
 216 0022 4B48     		ldr	r0, .L5+12
 217 0024 FFF7FEFF 		bl	ASPEP_start
 131:Src/mc_tasks.c **** 
 132:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 1 */
 133:Src/mc_tasks.c **** 
 134:Src/mc_tasks.c ****     /* USER CODE END MCboot 1 */
 135:Src/mc_tasks.c **** 
 136:Src/mc_tasks.c ****     /**************************************/
 137:Src/mc_tasks.c ****     /*    Start timers synchronously      */
 138:Src/mc_tasks.c ****     /**************************************/
 139:Src/mc_tasks.c ****     startTimers();
 218              		.loc 2 139 5
 219 0028 FFF7FEFF 		bl	startTimers
 140:Src/mc_tasks.c **** 
 141:Src/mc_tasks.c ****     /******************************************************/
 142:Src/mc_tasks.c ****     /*   PID component initialization: speed regulation   */
 143:Src/mc_tasks.c ****     /******************************************************/
 144:Src/mc_tasks.c ****     PID_HandleInit(&PIDSpeedHandle_M1);
 220              		.loc 2 144 5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 21


 221 002c 4948     		ldr	r0, .L5+16
 222 002e FFF7FEFF 		bl	PID_HandleInit
 145:Src/mc_tasks.c **** 
 146:Src/mc_tasks.c ****     /******************************************************/
 147:Src/mc_tasks.c ****     /*   Main speed sensor component initialization       */
 148:Src/mc_tasks.c ****     /******************************************************/
 149:Src/mc_tasks.c ****     ENC_Init (&ENCODER_M1);
 223              		.loc 2 149 5
 224 0032 4948     		ldr	r0, .L5+20
 225 0034 FFF7FEFF 		bl	ENC_Init
 150:Src/mc_tasks.c **** 
 151:Src/mc_tasks.c ****     /******************************************************/
 152:Src/mc_tasks.c ****     /*   Main encoder alignment component initialization  */
 153:Src/mc_tasks.c ****     /******************************************************/
 154:Src/mc_tasks.c ****     EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 226              		.loc 2 154 5
 227 0038 484B     		ldr	r3, .L5+24
 228 003a 1968     		ldr	r1, [r3]
 229 003c 464B     		ldr	r3, .L5+20
 230 003e 484A     		ldr	r2, .L5+28
 231 0040 4848     		ldr	r0, .L5+32
 232 0042 FFF7FEFF 		bl	EAC_Init
 155:Src/mc_tasks.c ****     pEAC[M1] = &EncAlignCtrlM1;
 233              		.loc 2 155 14
 234 0046 484B     		ldr	r3, .L5+36
 235 0048 464A     		ldr	r2, .L5+32
 236 004a 1A60     		str	r2, [r3]
 156:Src/mc_tasks.c **** 
 157:Src/mc_tasks.c ****     /******************************************************/
 158:Src/mc_tasks.c ****     /*   Position Control component initialization        */
 159:Src/mc_tasks.c ****     /******************************************************/
 160:Src/mc_tasks.c ****     PID_HandleInit(&PID_PosParamsM1);
 237              		.loc 2 160 5
 238 004c 4748     		ldr	r0, .L5+40
 239 004e FFF7FEFF 		bl	PID_HandleInit
 161:Src/mc_tasks.c ****     TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 240              		.loc 2 161 5
 241 0052 414B     		ldr	r3, .L5+20
 242 0054 464A     		ldr	r2, .L5+44
 243 0056 4549     		ldr	r1, .L5+40
 244 0058 4648     		ldr	r0, .L5+48
 245 005a FFF7FEFF 		bl	TC_Init
 162:Src/mc_tasks.c **** 
 163:Src/mc_tasks.c ****     /******************************************************/
 164:Src/mc_tasks.c ****     /*   Speed & torque component initialization          */
 165:Src/mc_tasks.c ****     /******************************************************/
 166:Src/mc_tasks.c ****     STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 246              		.loc 2 166 5
 247 005e 3F4B     		ldr	r3, .L5+24
 248 0060 1B68     		ldr	r3, [r3]
 249 0062 3D4A     		ldr	r2, .L5+20
 250 0064 3B49     		ldr	r1, .L5+16
 251 0066 1846     		mov	r0, r3
 252 0068 FFF7FEFF 		bl	STC_Init
 167:Src/mc_tasks.c **** 
 168:Src/mc_tasks.c ****     /****************************************************/
 169:Src/mc_tasks.c ****     /*   Virtual speed sensor component initialization  */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 22


 170:Src/mc_tasks.c ****     /****************************************************/
 171:Src/mc_tasks.c ****     VSS_Init(&VirtualSpeedSensorM1);
 253              		.loc 2 171 5
 254 006c 3C48     		ldr	r0, .L5+28
 255 006e FFF7FEFF 		bl	VSS_Init
 172:Src/mc_tasks.c **** 
 173:Src/mc_tasks.c ****     /********************************************************/
 174:Src/mc_tasks.c ****     /*   PID component initialization: current regulation   */
 175:Src/mc_tasks.c ****     /********************************************************/
 176:Src/mc_tasks.c ****     PID_HandleInit(&PIDIqHandle_M1);
 256              		.loc 2 176 5
 257 0072 4148     		ldr	r0, .L5+52
 258 0074 FFF7FEFF 		bl	PID_HandleInit
 177:Src/mc_tasks.c ****     PID_HandleInit(&PIDIdHandle_M1);
 259              		.loc 2 177 5
 260 0078 4048     		ldr	r0, .L5+56
 261 007a FFF7FEFF 		bl	PID_HandleInit
 178:Src/mc_tasks.c **** 
 179:Src/mc_tasks.c ****     /********************************************************/
 180:Src/mc_tasks.c ****     /*   Bus voltage sensor component initialization        */
 181:Src/mc_tasks.c ****     /********************************************************/
 182:Src/mc_tasks.c ****     (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 262              		.loc 2 182 5
 263 007e 4048     		ldr	r0, .L5+60
 264 0080 FFF7FEFF 		bl	RCM_RegisterRegConv
 183:Src/mc_tasks.c ****     RVBS_Init(&BusVoltageSensor_M1);
 265              		.loc 2 183 5
 266 0084 3F48     		ldr	r0, .L5+64
 267 0086 FFF7FEFF 		bl	RVBS_Init
 184:Src/mc_tasks.c **** 
 185:Src/mc_tasks.c ****     /*************************************************/
 186:Src/mc_tasks.c ****     /*   Power measurement component initialization  */
 187:Src/mc_tasks.c ****     /*************************************************/
 188:Src/mc_tasks.c ****     pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 268              		.loc 2 188 9
 269 008a 3F4B     		ldr	r3, .L5+68
 270 008c 1B68     		ldr	r3, [r3]
 271              		.loc 2 188 20
 272 008e 3D4A     		ldr	r2, .L5+64
 273 0090 DA60     		str	r2, [r3, #12]
 189:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 274              		.loc 2 189 9
 275 0092 3D4B     		ldr	r3, .L5+68
 276 0094 1B68     		ldr	r3, [r3]
 277              		.loc 2 189 24
 278 0096 3D4A     		ldr	r2, .L5+72
 279 0098 9A60     		str	r2, [r3, #8]
 190:Src/mc_tasks.c **** 
 191:Src/mc_tasks.c ****     /*******************************************************/
 192:Src/mc_tasks.c ****     /*   Temperature measurement component initialization  */
 193:Src/mc_tasks.c ****     /*******************************************************/
 194:Src/mc_tasks.c ****     (void)RCM_RegisterRegConv(&TempRegConv_M1);
 280              		.loc 2 194 5
 281 009a 3D48     		ldr	r0, .L5+76
 282 009c FFF7FEFF 		bl	RCM_RegisterRegConv
 195:Src/mc_tasks.c ****     NTC_Init(&TempSensor_M1);
 283              		.loc 2 195 5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 23


 284 00a0 3C48     		ldr	r0, .L5+80
 285 00a2 FFF7FEFF 		bl	NTC_Init
 196:Src/mc_tasks.c **** 
 197:Src/mc_tasks.c ****     pREMNG[M1] = &RampExtMngrHFParamsM1;
 286              		.loc 2 197 16
 287 00a6 3C4B     		ldr	r3, .L5+84
 288 00a8 3C4A     		ldr	r2, .L5+88
 289 00aa 1A60     		str	r2, [r3]
 198:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 290              		.loc 2 198 5
 291 00ac 3A4B     		ldr	r3, .L5+84
 292 00ae 1B68     		ldr	r3, [r3]
 293 00b0 1846     		mov	r0, r3
 294 00b2 FFF7FEFF 		bl	REMNG_Init
 199:Src/mc_tasks.c **** 
 200:Src/mc_tasks.c ****     FOC_Clear(M1);
 295              		.loc 2 200 5
 296 00b6 0020     		movs	r0, #0
 297 00b8 FFF7FEFF 		bl	FOC_Clear
 201:Src/mc_tasks.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 298              		.loc 2 201 29
 299 00bc 334B     		ldr	r3, .L5+72
 300 00be 0122     		movs	r2, #1
 301 00c0 83F82420 		strb	r2, [r3, #36]
 202:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 302              		.loc 2 202 26
 303 00c4 254B     		ldr	r3, .L5+24
 304 00c6 1B68     		ldr	r3, [r3]
 305 00c8 304C     		ldr	r4, .L5+72
 306 00ca 1846     		mov	r0, r3
 307 00cc FFF7FEFF 		bl	STC_GetDefaultIqdref
 308 00d0 0346     		mov	r3, r0
 309 00d2 2361     		str	r3, [r4, #16]
 203:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 310              		.loc 2 203 29
 311 00d4 214B     		ldr	r3, .L5+24
 312 00d6 1B68     		ldr	r3, [r3]
 313 00d8 1846     		mov	r0, r3
 314 00da FFF7FEFF 		bl	STC_GetDefaultIqdref
 315 00de 0346     		mov	r3, r0
 316 00e0 FB60     		str	r3, [r7, #12]
 317              		.loc 2 203 59
 318 00e2 B7F90E20 		ldrsh	r2, [r7, #14]
 319              		.loc 2 203 27
 320 00e6 294B     		ldr	r3, .L5+72
 321 00e8 9A82     		strh	r2, [r3, #20]	@ movhi
 204:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 322              		.loc 2 204 5
 323 00ea 1C4B     		ldr	r3, .L5+24
 324 00ec 1968     		ldr	r1, [r3]
 325 00ee 2C4B     		ldr	r3, .L5+92
 326 00f0 1A68     		ldr	r2, [r3]
 327 00f2 154B     		ldr	r3, .L5+4
 328 00f4 1B68     		ldr	r3, [r3]
 329 00f6 0093     		str	r3, [sp]
 330 00f8 1346     		mov	r3, r2
 331 00fa 244A     		ldr	r2, .L5+72
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 24


 332 00fc 2948     		ldr	r0, .L5+96
 333 00fe FFF7FEFF 		bl	MCI_Init
 205:Src/mc_tasks.c ****    Mci[M1].pScale = &scaleParams_M1;
 334              		.loc 2 205 19
 335 0102 284B     		ldr	r3, .L5+96
 336 0104 284A     		ldr	r2, .L5+100
 337 0106 1A62     		str	r2, [r3, #32]
 206:Src/mc_tasks.c **** 
 207:Src/mc_tasks.c ****     MCI_ExecSpeedRamp(&Mci[M1],
 338              		.loc 2 207 5
 339 0108 144B     		ldr	r3, .L5+24
 340 010a 1B68     		ldr	r3, [r3]
 341 010c 1846     		mov	r0, r3
 342 010e FFF7FEFF 		bl	STC_GetMecSpeedRefUnitDefault
 343 0112 0346     		mov	r3, r0
 344 0114 0022     		movs	r2, #0
 345 0116 1946     		mov	r1, r3
 346 0118 2248     		ldr	r0, .L5+96
 347 011a FFF7FEFF 		bl	MCI_ExecSpeedRamp
 208:Src/mc_tasks.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /* First command to STC */
 209:Src/mc_tasks.c ****     Mci[M1].pPerfMeasure = &PerfTraces;
 348              		.loc 2 209 26
 349 011e 214B     		ldr	r3, .L5+96
 350 0120 224A     		ldr	r2, .L5+104
 351 0122 DA60     		str	r2, [r3, #12]
 210:Src/mc_tasks.c ****     MC_Perf_Measure_Init(&PerfTraces);
 352              		.loc 2 210 5
 353 0124 2148     		ldr	r0, .L5+104
 354 0126 FFF7FEFF 		bl	MC_Perf_Measure_Init
 211:Src/mc_tasks.c ****     pMCIList[M1] = &Mci[M1];
 355              		.loc 2 211 18
 356 012a 7B68     		ldr	r3, [r7, #4]
 357 012c 1D4A     		ldr	r2, .L5+96
 358 012e 1A60     		str	r2, [r3]
 212:Src/mc_tasks.c **** 
 213:Src/mc_tasks.c ****     /* Applicative hook in MCBoot() */
 214:Src/mc_tasks.c ****     MC_APP_BootHook();
 359              		.loc 2 214 5
 360 0130 FFF7FEFF 		bl	MC_APP_BootHook
 215:Src/mc_tasks.c **** 
 216:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 2 */
 217:Src/mc_tasks.c **** 
 218:Src/mc_tasks.c ****     /* USER CODE END MCboot 2 */
 219:Src/mc_tasks.c **** 
 220:Src/mc_tasks.c ****     bMCBootCompleted = 1U;
 361              		.loc 2 220 22
 362 0134 034B     		ldr	r3, .L5
 363 0136 0122     		movs	r2, #1
 364 0138 1A70     		strb	r2, [r3]
 365              	.L4:
 221:Src/mc_tasks.c ****   }
 222:Src/mc_tasks.c **** }
 366              		.loc 2 222 1
 367 013a 00BF     		nop
 368 013c 1437     		adds	r7, r7, #20
 369              	.LCFI9:
 370              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 25


 371 013e BD46     		mov	sp, r7
 372              	.LCFI10:
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 0140 90BD     		pop	{r4, r7, pc}
 376              	.L6:
 377 0142 00BF     		.align	2
 378              	.L5:
 379 0144 00000000 		.word	bMCBootCompleted
 380 0148 00000000 		.word	pwmcHandle
 381 014c 00000000 		.word	PWM_Handle_M1
 382 0150 00000000 		.word	aspepOverUartA
 383 0154 00000000 		.word	PIDSpeedHandle_M1
 384 0158 00000000 		.word	ENCODER_M1
 385 015c 00000000 		.word	pSTC
 386 0160 00000000 		.word	VirtualSpeedSensorM1
 387 0164 00000000 		.word	EncAlignCtrlM1
 388 0168 00000000 		.word	pEAC
 389 016c 00000000 		.word	PID_PosParamsM1
 390 0170 00000000 		.word	SpeednTorqCtrlM1
 391 0174 00000000 		.word	PosCtrlM1
 392 0178 00000000 		.word	PIDIqHandle_M1
 393 017c 00000000 		.word	PIDIdHandle_M1
 394 0180 00000000 		.word	VbusRegConv_M1
 395 0184 00000000 		.word	BusVoltageSensor_M1
 396 0188 00000000 		.word	pMPM
 397 018c 00000000 		.word	FOCVars
 398 0190 00000000 		.word	TempRegConv_M1
 399 0194 00000000 		.word	TempSensor_M1
 400 0198 00000000 		.word	pREMNG
 401 019c 00000000 		.word	RampExtMngrHFParamsM1
 402 01a0 00000000 		.word	pPosCtrl
 403 01a4 00000000 		.word	Mci
 404 01a8 00000000 		.word	scaleParams_M1
 405 01ac 00000000 		.word	PerfTraces
 406              		.cfi_endproc
 407              	.LFE1095:
 409              		.section	.text.MC_RunMotorControlTasks,"ax",%progbits
 410              		.align	1
 411              		.weak	MC_RunMotorControlTasks
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 416              	MC_RunMotorControlTasks:
 417              	.LFB1096:
 223:Src/mc_tasks.c **** 
 224:Src/mc_tasks.c **** /**
 225:Src/mc_tasks.c ****  * @brief Runs all the Tasks of the Motor Control cockpit
 226:Src/mc_tasks.c ****  *
 227:Src/mc_tasks.c ****  * This function is to be called periodically at least at the Medium Frequency task
 228:Src/mc_tasks.c ****  * rate (It is typically called on the Systick interrupt). Exact invokation rate is
 229:Src/mc_tasks.c ****  * the Speed regulator execution rate set in the Motor Contorl Workbench.
 230:Src/mc_tasks.c ****  *
 231:Src/mc_tasks.c ****  * The following tasks are executed in this order:
 232:Src/mc_tasks.c ****  *
 233:Src/mc_tasks.c ****  * - Medium Frequency Tasks of each motors.
 234:Src/mc_tasks.c ****  * - Safety Task.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 26


 235:Src/mc_tasks.c ****  * - Power Factor Correction Task (if enabled).
 236:Src/mc_tasks.c ****  * - User Interface task.
 237:Src/mc_tasks.c ****  */
 238:Src/mc_tasks.c **** __weak void MC_RunMotorControlTasks(void)
 239:Src/mc_tasks.c **** {
 418              		.loc 2 239 1
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}
 423              	.LCFI11:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 0002 00AF     		add	r7, sp, #0
 428              	.LCFI12:
 429              		.cfi_def_cfa_register 7
 240:Src/mc_tasks.c ****   if (0U == bMCBootCompleted)
 430              		.loc 2 240 10
 431 0004 044B     		ldr	r3, .L10
 432 0006 1B78     		ldrb	r3, [r3]
 433 0008 DBB2     		uxtb	r3, r3
 434              		.loc 2 240 6
 435 000a 002B     		cmp	r3, #0
 436 000c 01D0     		beq	.L9
 241:Src/mc_tasks.c ****   {
 242:Src/mc_tasks.c ****     /* Nothing to do */
 243:Src/mc_tasks.c ****   }
 244:Src/mc_tasks.c ****   else
 245:Src/mc_tasks.c ****   {
 246:Src/mc_tasks.c ****     /* ** Medium Frequency Tasks ** */
 247:Src/mc_tasks.c ****     MC_Scheduler();
 437              		.loc 2 247 5
 438 000e FFF7FEFF 		bl	MC_Scheduler
 439              	.L9:
 248:Src/mc_tasks.c ****   }
 249:Src/mc_tasks.c **** }
 440              		.loc 2 249 1
 441 0012 00BF     		nop
 442 0014 80BD     		pop	{r7, pc}
 443              	.L11:
 444 0016 00BF     		.align	2
 445              	.L10:
 446 0018 00000000 		.word	bMCBootCompleted
 447              		.cfi_endproc
 448              	.LFE1096:
 450              		.section	.text.TSK_MF_StopProcessing,"ax",%progbits
 451              		.align	1
 452              		.global	TSK_MF_StopProcessing
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 457              	TSK_MF_StopProcessing:
 458              	.LFB1097:
 250:Src/mc_tasks.c **** 
 251:Src/mc_tasks.c **** /**
 252:Src/mc_tasks.c ****  * @brief Performs stop process and update the state machine.This function
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 27


 253:Src/mc_tasks.c ****  *        shall be called only during medium frequency task.
 254:Src/mc_tasks.c ****  */
 255:Src/mc_tasks.c **** void TSK_MF_StopProcessing(uint8_t motor)
 256:Src/mc_tasks.c **** {
 459              		.loc 2 256 1
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 8
 462              		@ frame_needed = 1, uses_anonymous_args = 0
 463 0000 80B5     		push	{r7, lr}
 464              	.LCFI13:
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 7, -8
 467              		.cfi_offset 14, -4
 468 0002 82B0     		sub	sp, sp, #8
 469              	.LCFI14:
 470              		.cfi_def_cfa_offset 16
 471 0004 00AF     		add	r7, sp, #0
 472              	.LCFI15:
 473              		.cfi_def_cfa_register 7
 474 0006 0346     		mov	r3, r0
 475 0008 FB71     		strb	r3, [r7, #7]
 257:Src/mc_tasks.c ****     R3_1_SwitchOffPWM(pwmcHandle[motor]);
 476              		.loc 2 257 5
 477 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 478 000c 114A     		ldr	r2, .L13
 479 000e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 480 0012 1846     		mov	r0, r3
 481 0014 FFF7FEFF 		bl	R3_1_SwitchOffPWM
 258:Src/mc_tasks.c **** 
 259:Src/mc_tasks.c ****   FOC_Clear(motor);
 482              		.loc 2 259 3
 483 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 484 001a 1846     		mov	r0, r3
 485 001c FFF7FEFF 		bl	FOC_Clear
 260:Src/mc_tasks.c ****   PQD_Clear(pMPM[motor]);
 486              		.loc 2 260 3
 487 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 488 0022 0D4A     		ldr	r2, .L13+4
 489 0024 52F82330 		ldr	r3, [r2, r3, lsl #2]
 490 0028 1846     		mov	r0, r3
 491 002a FFF7FEFF 		bl	PQD_Clear
 261:Src/mc_tasks.c ****   TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 492              		.loc 2 261 3
 493 002e 4FF44870 		mov	r0, #800
 494 0032 FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 262:Src/mc_tasks.c ****   Mci[motor].State = STOP;
 495              		.loc 2 262 13
 496 0036 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 497              		.loc 2 262 20
 498 0038 0849     		ldr	r1, .L13+8
 499 003a 1346     		mov	r3, r2
 500 003c 5B00     		lsls	r3, r3, #1
 501 003e 1344     		add	r3, r3, r2
 502 0040 1B01     		lsls	r3, r3, #4
 503 0042 0B44     		add	r3, r3, r1
 504 0044 2733     		adds	r3, r3, #39
 505 0046 0822     		movs	r2, #8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 28


 506 0048 1A70     		strb	r2, [r3]
 263:Src/mc_tasks.c **** }
 507              		.loc 2 263 1
 508 004a 00BF     		nop
 509 004c 0837     		adds	r7, r7, #8
 510              	.LCFI16:
 511              		.cfi_def_cfa_offset 8
 512 004e BD46     		mov	sp, r7
 513              	.LCFI17:
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 0050 80BD     		pop	{r7, pc}
 517              	.L14:
 518 0052 00BF     		.align	2
 519              	.L13:
 520 0054 00000000 		.word	pwmcHandle
 521 0058 00000000 		.word	pMPM
 522 005c 00000000 		.word	Mci
 523              		.cfi_endproc
 524              	.LFE1097:
 526              		.section	.text.MC_Scheduler,"ax",%progbits
 527              		.align	1
 528              		.weak	MC_Scheduler
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 533              	MC_Scheduler:
 534              	.LFB1098:
 264:Src/mc_tasks.c **** 
 265:Src/mc_tasks.c **** /**
 266:Src/mc_tasks.c ****  * @brief  Executes the Medium Frequency Task functions for each drive instance.
 267:Src/mc_tasks.c ****  *
 268:Src/mc_tasks.c ****  * It is to be clocked at the Systick frequency.
 269:Src/mc_tasks.c ****  */
 270:Src/mc_tasks.c **** __weak void MC_Scheduler(void)
 271:Src/mc_tasks.c **** {
 535              		.loc 2 271 1
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539 0000 98B5     		push	{r3, r4, r7, lr}
 540              	.LCFI18:
 541              		.cfi_def_cfa_offset 16
 542              		.cfi_offset 3, -16
 543              		.cfi_offset 4, -12
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 00AF     		add	r7, sp, #0
 547              	.LCFI19:
 548              		.cfi_def_cfa_register 7
 272:Src/mc_tasks.c **** /* USER CODE BEGIN MC_Scheduler 0 */
 273:Src/mc_tasks.c **** 
 274:Src/mc_tasks.c **** /* USER CODE END MC_Scheduler 0 */
 275:Src/mc_tasks.c **** 
 276:Src/mc_tasks.c ****   if (((uint8_t)1) == bMCBootCompleted)
 549              		.loc 2 276 20
 550 0004 2D4B     		ldr	r3, .L22
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 29


 551 0006 1B78     		ldrb	r3, [r3]
 552 0008 DBB2     		uxtb	r3, r3
 553              		.loc 2 276 6
 554 000a 012B     		cmp	r3, #1
 555 000c 54D1     		bne	.L21
 277:Src/mc_tasks.c ****   {
 278:Src/mc_tasks.c ****     if(hMFTaskCounterM1 > 0u)
 556              		.loc 2 278 25
 557 000e 2C4B     		ldr	r3, .L22+4
 558 0010 1B88     		ldrh	r3, [r3]
 559              		.loc 2 278 7
 560 0012 002B     		cmp	r3, #0
 561 0014 06D0     		beq	.L17
 279:Src/mc_tasks.c ****     {
 280:Src/mc_tasks.c ****       hMFTaskCounterM1--;
 562              		.loc 2 280 23
 563 0016 2A4B     		ldr	r3, .L22+4
 564 0018 1B88     		ldrh	r3, [r3]
 565 001a 013B     		subs	r3, r3, #1
 566 001c 9AB2     		uxth	r2, r3
 567 001e 284B     		ldr	r3, .L22+4
 568 0020 1A80     		strh	r2, [r3]	@ movhi
 569 0022 31E0     		b	.L18
 570              	.L17:
 281:Src/mc_tasks.c ****     }
 282:Src/mc_tasks.c ****     else
 283:Src/mc_tasks.c ****     {
 284:Src/mc_tasks.c ****       TSK_MediumFrequencyTaskM1();
 571              		.loc 2 284 7
 572 0024 FFF7FEFF 		bl	TSK_MediumFrequencyTaskM1
 285:Src/mc_tasks.c **** 
 286:Src/mc_tasks.c ****       /* Applicative hook at end of Medium Frequency for Motor 1 */
 287:Src/mc_tasks.c ****       MC_APP_PostMediumFrequencyHook_M1();
 573              		.loc 2 287 7
 574 0028 FFF7FEFF 		bl	MC_APP_PostMediumFrequencyHook_M1
 288:Src/mc_tasks.c **** 
 289:Src/mc_tasks.c ****       MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTr
 575              		.loc 2 289 47
 576 002c 254B     		ldr	r3, .L22+8
 577 002e 1B68     		ldr	r3, [r3]
 578              		.loc 2 289 63
 579 0030 9B68     		ldr	r3, [r3, #8]
 580              		.loc 2 289 33
 581 0032 244A     		ldr	r2, .L22+8
 582 0034 1268     		ldr	r2, [r2]
 583 0036 2449     		ldr	r1, .L22+12
 584 0038 1046     		mov	r0, r2
 585 003a 9847     		blx	r3
 586              	.LVL0:
 587 003c 0346     		mov	r3, r0
 588              		.loc 2 289 31
 589 003e 214A     		ldr	r2, .L22+8
 590 0040 5360     		str	r3, [r2, #4]
 290:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 291:Src/mc_tasks.c ****       if ( 0U == MCP_Over_UartA.rxBuffer)
 591              		.loc 2 291 32
 592 0042 204B     		ldr	r3, .L22+8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 30


 593 0044 5B68     		ldr	r3, [r3, #4]
 594              		.loc 2 291 10
 595 0046 002B     		cmp	r3, #0
 596 0048 1BD0     		beq	.L19
 292:Src/mc_tasks.c ****       {
 293:Src/mc_tasks.c ****         /* Nothing to do */
 294:Src/mc_tasks.c ****       }
 295:Src/mc_tasks.c ****       else
 296:Src/mc_tasks.c ****       {
 297:Src/mc_tasks.c ****         /* Synchronous answer */
 298:Src/mc_tasks.c ****         if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 597              		.loc 2 298 33
 598 004a 1E4B     		ldr	r3, .L22+8
 599 004c 1B68     		ldr	r3, [r3]
 600              		.loc 2 298 49
 601 004e 1B68     		ldr	r3, [r3]
 602              		.loc 2 298 19
 603 0050 1C4A     		ldr	r2, .L22+8
 604 0052 1068     		ldr	r0, [r2]
 605 0054 0A22     		movs	r2, #10
 606 0056 1D49     		ldr	r1, .L22+16
 607 0058 9847     		blx	r3
 608              	.LVL1:
 609 005a 0346     		mov	r3, r0
 610              		.loc 2 298 16
 611 005c 83F00103 		eor	r3, r3, #1
 612 0060 DBB2     		uxtb	r3, r3
 613              		.loc 2 298 12
 614 0062 002B     		cmp	r3, #0
 615 0064 0DD1     		bne	.L19
 299:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 300:Src/mc_tasks.c ****                                                      MCTL_SYNC))
 301:Src/mc_tasks.c ****         {
 302:Src/mc_tasks.c ****           /* No buffer available to build the answer ... should not occur */
 303:Src/mc_tasks.c ****         }
 304:Src/mc_tasks.c ****         else
 305:Src/mc_tasks.c ****         {
 306:Src/mc_tasks.c ****           MCP_ReceivedPacket(&MCP_Over_UartA);
 616              		.loc 2 306 11
 617 0066 1748     		ldr	r0, .L22+8
 618 0068 FFF7FEFF 		bl	MCP_ReceivedPacket
 307:Src/mc_tasks.c ****           MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_Uart
 619              		.loc 2 307 25
 620 006c 154B     		ldr	r3, .L22+8
 621 006e 1B68     		ldr	r3, [r3]
 622              		.loc 2 307 41
 623 0070 5C68     		ldr	r4, [r3, #4]
 624              		.loc 2 307 11
 625 0072 144B     		ldr	r3, .L22+8
 626 0074 1868     		ldr	r0, [r3]
 627              		.loc 2 307 101
 628 0076 134B     		ldr	r3, .L22+8
 629 0078 9968     		ldr	r1, [r3, #8]
 630              		.loc 2 307 11
 631 007a 124B     		ldr	r3, .L22+8
 632 007c DA89     		ldrh	r2, [r3, #14]
 633 007e 0A23     		movs	r3, #10
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 31


 634 0080 A047     		blx	r4
 635              	.LVL2:
 636              	.L19:
 308:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 309:Src/mc_tasks.c ****           /* No buffer available to build the answer ... should not occur */
 310:Src/mc_tasks.c ****         }
 311:Src/mc_tasks.c ****       }
 312:Src/mc_tasks.c **** 
 313:Src/mc_tasks.c ****       /* USER CODE BEGIN MC_Scheduler 1 */
 314:Src/mc_tasks.c **** 
 315:Src/mc_tasks.c ****       /* USER CODE END MC_Scheduler 1 */
 316:Src/mc_tasks.c ****       hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 637              		.loc 2 316 24
 638 0082 0F4B     		ldr	r3, .L22+4
 639 0084 0122     		movs	r2, #1
 640 0086 1A80     		strh	r2, [r3]	@ movhi
 641              	.L18:
 317:Src/mc_tasks.c ****     }
 318:Src/mc_tasks.c ****     if(hBootCapDelayCounterM1 > 0U)
 642              		.loc 2 318 31
 643 0088 114B     		ldr	r3, .L22+20
 644 008a 1B88     		ldrh	r3, [r3]	@ movhi
 645 008c 9BB2     		uxth	r3, r3
 646              		.loc 2 318 7
 647 008e 002B     		cmp	r3, #0
 648 0090 06D0     		beq	.L20
 319:Src/mc_tasks.c ****     {
 320:Src/mc_tasks.c ****       hBootCapDelayCounterM1--;
 649              		.loc 2 320 29
 650 0092 0F4B     		ldr	r3, .L22+20
 651 0094 1B88     		ldrh	r3, [r3]	@ movhi
 652 0096 9BB2     		uxth	r3, r3
 653 0098 013B     		subs	r3, r3, #1
 654 009a 9AB2     		uxth	r2, r3
 655 009c 0C4B     		ldr	r3, .L22+20
 656 009e 1A80     		strh	r2, [r3]	@ movhi
 657              	.L20:
 321:Src/mc_tasks.c ****     }
 322:Src/mc_tasks.c ****     else
 323:Src/mc_tasks.c ****     {
 324:Src/mc_tasks.c ****       /* Nothing to do */
 325:Src/mc_tasks.c ****     }
 326:Src/mc_tasks.c ****     if(hStopPermanencyCounterM1 > 0U)
 658              		.loc 2 326 33
 659 00a0 0C4B     		ldr	r3, .L22+24
 660 00a2 1B88     		ldrh	r3, [r3]	@ movhi
 661 00a4 9BB2     		uxth	r3, r3
 662              		.loc 2 326 7
 663 00a6 002B     		cmp	r3, #0
 664 00a8 06D0     		beq	.L21
 327:Src/mc_tasks.c ****     {
 328:Src/mc_tasks.c ****       hStopPermanencyCounterM1--;
 665              		.loc 2 328 31
 666 00aa 0A4B     		ldr	r3, .L22+24
 667 00ac 1B88     		ldrh	r3, [r3]	@ movhi
 668 00ae 9BB2     		uxth	r3, r3
 669 00b0 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 32


 670 00b2 9AB2     		uxth	r2, r3
 671 00b4 074B     		ldr	r3, .L22+24
 672 00b6 1A80     		strh	r2, [r3]	@ movhi
 673              	.L21:
 329:Src/mc_tasks.c ****     }
 330:Src/mc_tasks.c ****     else
 331:Src/mc_tasks.c ****     {
 332:Src/mc_tasks.c ****       /* Nothing to do */
 333:Src/mc_tasks.c ****     }
 334:Src/mc_tasks.c ****   }
 335:Src/mc_tasks.c ****   else
 336:Src/mc_tasks.c ****   {
 337:Src/mc_tasks.c ****     /* Nothing to do */
 338:Src/mc_tasks.c ****   }
 339:Src/mc_tasks.c ****   /* USER CODE BEGIN MC_Scheduler 2 */
 340:Src/mc_tasks.c **** 
 341:Src/mc_tasks.c ****   /* USER CODE END MC_Scheduler 2 */
 342:Src/mc_tasks.c **** }
 674              		.loc 2 342 1
 675 00b8 00BF     		nop
 676 00ba 98BD     		pop	{r3, r4, r7, pc}
 677              	.L23:
 678              		.align	2
 679              	.L22:
 680 00bc 00000000 		.word	bMCBootCompleted
 681 00c0 00000000 		.word	hMFTaskCounterM1
 682 00c4 00000000 		.word	MCP_Over_UartA
 683 00c8 0C000000 		.word	MCP_Over_UartA+12
 684 00cc 08000000 		.word	MCP_Over_UartA+8
 685 00d0 00000000 		.word	hBootCapDelayCounterM1
 686 00d4 00000000 		.word	hStopPermanencyCounterM1
 687              		.cfi_endproc
 688              	.LFE1098:
 690              		.section	.text.TSK_MediumFrequencyTaskM1,"ax",%progbits
 691              		.align	1
 692              		.weak	TSK_MediumFrequencyTaskM1
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 697              	TSK_MediumFrequencyTaskM1:
 698              	.LFB1099:
 343:Src/mc_tasks.c **** 
 344:Src/mc_tasks.c **** /**
 345:Src/mc_tasks.c ****   * @brief Executes medium frequency periodic Motor Control tasks
 346:Src/mc_tasks.c ****   *
 347:Src/mc_tasks.c ****   * This function performs some of the control duties on Motor 1 according to the
 348:Src/mc_tasks.c ****   * present state of its state machine. In particular, duties requiring a periodic
 349:Src/mc_tasks.c ****   * execution at a medium frequency rate (such as the speed controller for instance)
 350:Src/mc_tasks.c ****   * are executed here.
 351:Src/mc_tasks.c ****   */
 352:Src/mc_tasks.c **** __weak void TSK_MediumFrequencyTaskM1(void)
 353:Src/mc_tasks.c **** {
 699              		.loc 2 353 1
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 33


 704              	.LCFI20:
 705              		.cfi_def_cfa_offset 8
 706              		.cfi_offset 7, -8
 707              		.cfi_offset 14, -4
 708 0002 82B0     		sub	sp, sp, #8
 709              	.LCFI21:
 710              		.cfi_def_cfa_offset 16
 711 0004 00AF     		add	r7, sp, #0
 712              	.LCFI22:
 713              		.cfi_def_cfa_register 7
 354:Src/mc_tasks.c ****   MC_BG_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 714              		.loc 2 354 3
 715 0006 0121     		movs	r1, #1
 716 0008 BE48     		ldr	r0, .L66
 717 000a FFF7FEFF 		bl	MC_BG_Perf_Measure_Start
 355:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 356:Src/mc_tasks.c **** 
 357:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 0 */
 358:Src/mc_tasks.c **** 
 359:Src/mc_tasks.c ****   int16_t wAux = 0;
 718              		.loc 2 359 11
 719 000e 0023     		movs	r3, #0
 720 0010 BB80     		strh	r3, [r7, #4]	@ movhi
 360:Src/mc_tasks.c ****   (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 721              		.loc 2 360 9
 722 0012 3B1D     		adds	r3, r7, #4
 723 0014 1946     		mov	r1, r3
 724 0016 BC48     		ldr	r0, .L66+4
 725 0018 FFF7FEFF 		bl	ENC_CalcAvrgMecSpeedUnit
 361:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 726              		.loc 2 361 3
 727 001c BB4B     		ldr	r3, .L66+8
 728 001e 1B68     		ldr	r3, [r3]
 729 0020 1846     		mov	r0, r3
 730 0022 FFF7FEFF 		bl	PQD_CalcElMotorPower
 362:Src/mc_tasks.c **** 
 363:Src/mc_tasks.c ****   if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 731              		.loc 2 363 7
 732 0026 BA48     		ldr	r0, .L66+12
 733 0028 FFF7FEFF 		bl	MCI_GetCurrentFaults
 734 002c 0346     		mov	r3, r0
 735              		.loc 2 363 6
 736 002e 002B     		cmp	r3, #0
 737 0030 40F0D081 		bne	.L25
 364:Src/mc_tasks.c ****   {
 365:Src/mc_tasks.c ****     if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 738              		.loc 2 365 9
 739 0034 B648     		ldr	r0, .L66+12
 740 0036 FFF7FEFF 		bl	MCI_GetOccurredFaults
 741 003a 0346     		mov	r3, r0
 742              		.loc 2 365 8
 743 003c 002B     		cmp	r3, #0
 744 003e 40F0C481 		bne	.L26
 366:Src/mc_tasks.c ****     {
 367:Src/mc_tasks.c ****       switch (Mci[M1].State)
 745              		.loc 2 367 22
 746 0042 B34B     		ldr	r3, .L66+12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 34


 747 0044 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 748              		.loc 2 367 7
 749 0048 142B     		cmp	r3, #20
 750 004a 00F2C881 		bhi	.L59
 751 004e 01A2     		adr	r2, .L29
 752 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 753              		.p2align 2
 754              	.L29:
 755 0054 A9000000 		.word	.L37+1
 756 0058 DF030000 		.word	.L59+1
 757 005c 39020000 		.word	.L36+1
 758 0060 DF030000 		.word	.L59+1
 759 0064 DF030000 		.word	.L59+1
 760 0068 DF030000 		.word	.L59+1
 761 006c D9020000 		.word	.L35+1
 762 0070 DF030000 		.word	.L59+1
 763 0074 2D030000 		.word	.L34+1
 764 0078 DF030000 		.word	.L59+1
 765 007c 65030000 		.word	.L33+1
 766 0080 49030000 		.word	.L32+1
 767 0084 DF030000 		.word	.L59+1
 768 0088 DF030000 		.word	.L59+1
 769 008c DF030000 		.word	.L59+1
 770 0090 DF030000 		.word	.L59+1
 771 0094 87010000 		.word	.L31+1
 772 0098 19010000 		.word	.L30+1
 773 009c DF030000 		.word	.L59+1
 774 00a0 DF030000 		.word	.L59+1
 775 00a4 6F030000 		.word	.L28+1
 776              		.p2align 1
 777              	.L37:
 368:Src/mc_tasks.c ****       {
 369:Src/mc_tasks.c **** 
 370:Src/mc_tasks.c ****         case IDLE:
 371:Src/mc_tasks.c ****         {
 372:Src/mc_tasks.c ****           if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand
 778              		.loc 2 372 36
 779 00a8 994B     		ldr	r3, .L66+12
 780 00aa 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 781              		.loc 2 372 14
 782 00ae 012B     		cmp	r3, #1
 783 00b0 05D0     		beq	.L38
 784              		.loc 2 372 86 discriminator 1
 785 00b2 974B     		ldr	r3, .L66+12
 786 00b4 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 787              		.loc 2 372 52 discriminator 1
 788 00b8 032B     		cmp	r3, #3
 789 00ba 40F09281 		bne	.L60
 790              	.L38:
 373:Src/mc_tasks.c ****           {
 374:Src/mc_tasks.c ****             if (pwmcHandle[M1]->offsetCalibStatus == false)
 791              		.loc 2 374 27
 792 00be 954B     		ldr	r3, .L66+16
 793 00c0 1B68     		ldr	r3, [r3]
 794              		.loc 2 374 31
 795 00c2 93F88130 		ldrb	r3, [r3, #129]	@ zero_extendqisi2
 796              		.loc 2 374 51
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 35


 797 00c6 83F00103 		eor	r3, r3, #1
 798 00ca DBB2     		uxtb	r3, r3
 799              		.loc 2 374 16
 800 00cc 002B     		cmp	r3, #0
 801 00ce 0AD0     		beq	.L40
 375:Src/mc_tasks.c ****             {
 376:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 802              		.loc 2 376 21
 803 00d0 904B     		ldr	r3, .L66+16
 804 00d2 1B68     		ldr	r3, [r3]
 805 00d4 0021     		movs	r1, #0
 806 00d6 1846     		mov	r0, r3
 807 00d8 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 377:Src/mc_tasks.c ****               Mci[M1].State = OFFSET_CALIB;
 808              		.loc 2 377 29
 809 00dc 8C4B     		ldr	r3, .L66+12
 810 00de 1122     		movs	r2, #17
 811 00e0 83F82720 		strb	r2, [r3, #39]
 378:Src/mc_tasks.c ****             }
 379:Src/mc_tasks.c ****             else
 380:Src/mc_tasks.c ****             {
 381:Src/mc_tasks.c ****               /* Calibration already done. Enables only TIM channels */
 382:Src/mc_tasks.c ****               pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 383:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 384:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 385:Src/mc_tasks.c ****               TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 386:Src/mc_tasks.c ****               Mci[M1].State = CHARGE_BOOT_CAP;
 387:Src/mc_tasks.c ****             }
 388:Src/mc_tasks.c ****           }
 389:Src/mc_tasks.c ****           else
 390:Src/mc_tasks.c ****           {
 391:Src/mc_tasks.c ****             /* Nothing to be done, FW stays in IDLE state */
 392:Src/mc_tasks.c ****           }
 393:Src/mc_tasks.c ****           break;
 812              		.loc 2 393 11
 813 00e4 7DE1     		b	.L60
 814              	.L40:
 382:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 815              		.loc 2 382 25
 816 00e6 8B4B     		ldr	r3, .L66+16
 817 00e8 1B68     		ldr	r3, [r3]
 382:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 818              		.loc 2 382 56
 819 00ea 0122     		movs	r2, #1
 820 00ec A3F86020 		strh	r2, [r3, #96]	@ movhi
 383:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 821              		.loc 2 383 21
 822 00f0 884B     		ldr	r3, .L66+16
 823 00f2 1B68     		ldr	r3, [r3]
 824 00f4 0121     		movs	r1, #1
 825 00f6 1846     		mov	r0, r3
 826 00f8 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 384:Src/mc_tasks.c ****               TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 827              		.loc 2 384 15
 828 00fc 854B     		ldr	r3, .L66+16
 829 00fe 1B68     		ldr	r3, [r3]
 830 0100 0021     		movs	r1, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 36


 831 0102 1846     		mov	r0, r3
 832 0104 FFF7FEFF 		bl	R3_1_TurnOnLowSides
 385:Src/mc_tasks.c ****               Mci[M1].State = CHARGE_BOOT_CAP;
 833              		.loc 2 385 15
 834 0108 1420     		movs	r0, #20
 835 010a FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 386:Src/mc_tasks.c ****             }
 836              		.loc 2 386 29
 837 010e 804B     		ldr	r3, .L66+12
 838 0110 1022     		movs	r2, #16
 839 0112 83F82720 		strb	r2, [r3, #39]
 840              		.loc 2 393 11
 841 0116 64E1     		b	.L60
 842              	.L30:
 394:Src/mc_tasks.c ****         }
 395:Src/mc_tasks.c **** 
 396:Src/mc_tasks.c ****         case OFFSET_CALIB:
 397:Src/mc_tasks.c ****         {
 398:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 843              		.loc 2 398 34
 844 0118 7D4B     		ldr	r3, .L66+12
 845 011a 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 846              		.loc 2 398 14
 847 011e 052B     		cmp	r3, #5
 848 0120 03D1     		bne	.L42
 399:Src/mc_tasks.c ****           {
 400:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 849              		.loc 2 400 13
 850 0122 0020     		movs	r0, #0
 851 0124 FFF7FEFF 		bl	TSK_MF_StopProcessing
 401:Src/mc_tasks.c ****           }
 402:Src/mc_tasks.c ****           else
 403:Src/mc_tasks.c ****           {
 404:Src/mc_tasks.c ****             if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 405:Src/mc_tasks.c ****             {
 406:Src/mc_tasks.c ****               if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 407:Src/mc_tasks.c ****               {
 408:Src/mc_tasks.c ****                 FOC_Clear(M1);
 409:Src/mc_tasks.c ****                 PQD_Clear(pMPM[M1]);
 410:Src/mc_tasks.c ****                 Mci[M1].DirectCommand = MCI_NO_COMMAND;
 411:Src/mc_tasks.c ****                 Mci[M1].State = IDLE;
 412:Src/mc_tasks.c ****               }
 413:Src/mc_tasks.c ****               else
 414:Src/mc_tasks.c ****               {
 415:Src/mc_tasks.c ****                 R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 416:Src/mc_tasks.c ****                 TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 417:Src/mc_tasks.c ****                 Mci[M1].State = CHARGE_BOOT_CAP;
 418:Src/mc_tasks.c ****               }
 419:Src/mc_tasks.c ****             }
 420:Src/mc_tasks.c ****             else
 421:Src/mc_tasks.c ****             {
 422:Src/mc_tasks.c ****               /* Nothing to be done, FW waits for offset calibration to finish */
 423:Src/mc_tasks.c ****             }
 424:Src/mc_tasks.c ****           }
 425:Src/mc_tasks.c ****           break;
 852              		.loc 2 425 11
 853 0128 5DE1     		b	.L61
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 37


 854              	.L42:
 404:Src/mc_tasks.c ****             {
 855              		.loc 2 404 17
 856 012a 7A4B     		ldr	r3, .L66+16
 857 012c 1B68     		ldr	r3, [r3]
 858 012e 0121     		movs	r1, #1
 859 0130 1846     		mov	r0, r3
 860 0132 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 861 0136 0346     		mov	r3, r0
 404:Src/mc_tasks.c ****             {
 862              		.loc 2 404 16
 863 0138 002B     		cmp	r3, #0
 864 013a 00F05481 		beq	.L61
 406:Src/mc_tasks.c ****               {
 865              		.loc 2 406 49
 866 013e 744B     		ldr	r3, .L66+12
 867 0140 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 406:Src/mc_tasks.c ****               {
 868              		.loc 2 406 18
 869 0144 032B     		cmp	r3, #3
 870 0146 10D1     		bne	.L44
 408:Src/mc_tasks.c ****                 PQD_Clear(pMPM[M1]);
 871              		.loc 2 408 17
 872 0148 0020     		movs	r0, #0
 873 014a FFF7FEFF 		bl	FOC_Clear
 409:Src/mc_tasks.c ****                 Mci[M1].DirectCommand = MCI_NO_COMMAND;
 874              		.loc 2 409 17
 875 014e 6F4B     		ldr	r3, .L66+8
 876 0150 1B68     		ldr	r3, [r3]
 877 0152 1846     		mov	r0, r3
 878 0154 FFF7FEFF 		bl	PQD_Clear
 410:Src/mc_tasks.c ****                 Mci[M1].State = IDLE;
 879              		.loc 2 410 39
 880 0158 6D4B     		ldr	r3, .L66+12
 881 015a 0022     		movs	r2, #0
 882 015c 83F82620 		strb	r2, [r3, #38]
 411:Src/mc_tasks.c ****               }
 883              		.loc 2 411 31
 884 0160 6B4B     		ldr	r3, .L66+12
 885 0162 0022     		movs	r2, #0
 886 0164 83F82720 		strb	r2, [r3, #39]
 887              		.loc 2 425 11
 888 0168 3DE1     		b	.L61
 889              	.L44:
 415:Src/mc_tasks.c ****                 TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 890              		.loc 2 415 17
 891 016a 6A4B     		ldr	r3, .L66+16
 892 016c 1B68     		ldr	r3, [r3]
 893 016e 0021     		movs	r1, #0
 894 0170 1846     		mov	r0, r3
 895 0172 FFF7FEFF 		bl	R3_1_TurnOnLowSides
 416:Src/mc_tasks.c ****                 Mci[M1].State = CHARGE_BOOT_CAP;
 896              		.loc 2 416 17
 897 0176 1420     		movs	r0, #20
 898 0178 FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 417:Src/mc_tasks.c ****               }
 899              		.loc 2 417 31
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 38


 900 017c 644B     		ldr	r3, .L66+12
 901 017e 1022     		movs	r2, #16
 902 0180 83F82720 		strb	r2, [r3, #39]
 903              		.loc 2 425 11
 904 0184 2FE1     		b	.L61
 905              	.L31:
 426:Src/mc_tasks.c ****         }
 427:Src/mc_tasks.c **** 
 428:Src/mc_tasks.c ****         case CHARGE_BOOT_CAP:
 429:Src/mc_tasks.c ****         {
 430:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 906              		.loc 2 430 34
 907 0186 624B     		ldr	r3, .L66+12
 908 0188 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 909              		.loc 2 430 14
 910 018c 052B     		cmp	r3, #5
 911 018e 03D1     		bne	.L45
 431:Src/mc_tasks.c ****           {
 432:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 912              		.loc 2 432 13
 913 0190 0020     		movs	r0, #0
 914 0192 FFF7FEFF 		bl	TSK_MF_StopProcessing
 433:Src/mc_tasks.c ****           }
 434:Src/mc_tasks.c ****           else
 435:Src/mc_tasks.c ****           {
 436:Src/mc_tasks.c ****             if (TSK_ChargeBootCapDelayHasElapsedM1())
 437:Src/mc_tasks.c ****             {
 438:Src/mc_tasks.c ****               R3_1_SwitchOffPWM(pwmcHandle[M1]);
 439:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 440:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 441:Src/mc_tasks.c ****               ENC_Clear(&ENCODER_M1);
 442:Src/mc_tasks.c ****               FOC_Clear( M1 );
 443:Src/mc_tasks.c **** 
 444:Src/mc_tasks.c ****               if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 445:Src/mc_tasks.c ****               {
 446:Src/mc_tasks.c ****                 EAC_StartAlignment(&EncAlignCtrlM1);
 447:Src/mc_tasks.c ****                 Mci[M1].State = ALIGNMENT;
 448:Src/mc_tasks.c ****               }
 449:Src/mc_tasks.c ****               else
 450:Src/mc_tasks.c ****               {
 451:Src/mc_tasks.c ****                 STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 452:Src/mc_tasks.c ****                 STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 453:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 454:Src/mc_tasks.c ****                 FOC_CalcCurrRef(M1);
 455:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 456:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 457:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 458:Src/mc_tasks.c ****               }
 459:Src/mc_tasks.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 460:Src/mc_tasks.c ****             }
 461:Src/mc_tasks.c ****             else
 462:Src/mc_tasks.c ****             {
 463:Src/mc_tasks.c ****               /* Nothing to be done, FW waits for bootstrap capacitor to charge */
 464:Src/mc_tasks.c ****             }
 465:Src/mc_tasks.c ****           }
 466:Src/mc_tasks.c ****           break;
 915              		.loc 2 466 11
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 39


 916 0196 28E1     		b	.L62
 917              	.L45:
 436:Src/mc_tasks.c ****             {
 918              		.loc 2 436 17
 919 0198 FFF7FEFF 		bl	TSK_ChargeBootCapDelayHasElapsedM1
 920 019c 0346     		mov	r3, r0
 436:Src/mc_tasks.c ****             {
 921              		.loc 2 436 16
 922 019e 002B     		cmp	r3, #0
 923 01a0 00F02381 		beq	.L62
 438:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 924              		.loc 2 438 15
 925 01a4 5B4B     		ldr	r3, .L66+16
 926 01a6 1B68     		ldr	r3, [r3]
 927 01a8 1846     		mov	r0, r3
 928 01aa FFF7FEFF 		bl	R3_1_SwitchOffPWM
 439:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 929              		.loc 2 439 39
 930 01ae 5A4B     		ldr	r3, .L66+20
 931 01b0 0122     		movs	r2, #1
 932 01b2 83F82420 		strb	r2, [r3, #36]
 440:Src/mc_tasks.c ****               ENC_Clear(&ENCODER_M1);
 933              		.loc 2 440 15
 934 01b6 594B     		ldr	r3, .L66+24
 935 01b8 1B68     		ldr	r3, [r3]
 936 01ba 5949     		ldr	r1, .L66+28
 937 01bc 1846     		mov	r0, r3
 938 01be FFF7FEFF 		bl	STC_SetSpeedSensor
 441:Src/mc_tasks.c ****               FOC_Clear( M1 );
 939              		.loc 2 441 15
 940 01c2 5148     		ldr	r0, .L66+4
 941 01c4 FFF7FEFF 		bl	ENC_Clear
 442:Src/mc_tasks.c **** 
 942              		.loc 2 442 15
 943 01c8 0020     		movs	r0, #0
 944 01ca FFF7FEFF 		bl	FOC_Clear
 444:Src/mc_tasks.c ****               {
 945              		.loc 2 444 19
 946 01ce 5548     		ldr	r0, .L66+32
 947 01d0 FFF7FEFF 		bl	EAC_IsAligned
 948 01d4 0346     		mov	r3, r0
 444:Src/mc_tasks.c ****               {
 949              		.loc 2 444 50
 950 01d6 83F00103 		eor	r3, r3, #1
 951 01da DBB2     		uxtb	r3, r3
 444:Src/mc_tasks.c ****               {
 952              		.loc 2 444 18
 953 01dc 002B     		cmp	r3, #0
 954 01de 07D0     		beq	.L47
 446:Src/mc_tasks.c ****                 Mci[M1].State = ALIGNMENT;
 955              		.loc 2 446 17
 956 01e0 5048     		ldr	r0, .L66+32
 957 01e2 FFF7FEFF 		bl	EAC_StartAlignment
 447:Src/mc_tasks.c ****               }
 958              		.loc 2 447 31
 959 01e6 4A4B     		ldr	r3, .L66+12
 960 01e8 0222     		movs	r2, #2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 40


 961 01ea 83F82720 		strb	r2, [r3, #39]
 962 01ee 1DE0     		b	.L48
 963              	.L47:
 451:Src/mc_tasks.c ****                 STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 964              		.loc 2 451 17
 965 01f0 4A4B     		ldr	r3, .L66+24
 966 01f2 1B68     		ldr	r3, [r3]
 967 01f4 0321     		movs	r1, #3
 968 01f6 1846     		mov	r0, r3
 969 01f8 FFF7FEFF 		bl	STC_SetControlMode
 452:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 970              		.loc 2 452 17
 971 01fc 474B     		ldr	r3, .L66+24
 972 01fe 1B68     		ldr	r3, [r3]
 973 0200 4149     		ldr	r1, .L66+4
 974 0202 1846     		mov	r0, r3
 975 0204 FFF7FEFF 		bl	STC_SetSpeedSensor
 453:Src/mc_tasks.c ****                 FOC_CalcCurrRef(M1);
 976              		.loc 2 453 17
 977 0208 0020     		movs	r0, #0
 978 020a FFF7FEFF 		bl	FOC_InitAdditionalMethods
 454:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 979              		.loc 2 454 17
 980 020e 0020     		movs	r0, #0
 981 0210 FFF7FEFF 		bl	FOC_CalcCurrRef
 455:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 982              		.loc 2 455 17
 983 0214 414B     		ldr	r3, .L66+24
 984 0216 1B68     		ldr	r3, [r3]
 985 0218 1846     		mov	r0, r3
 986 021a FFF7FEFF 		bl	STC_ForceSpeedReferenceToCurrentSpeed
 456:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 987              		.loc 2 456 17
 988 021e 3C48     		ldr	r0, .L66+12
 989 0220 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 457:Src/mc_tasks.c ****               }
 990              		.loc 2 457 31
 991 0224 3A4B     		ldr	r3, .L66+12
 992 0226 0622     		movs	r2, #6
 993 0228 83F82720 		strb	r2, [r3, #39]
 994              	.L48:
 459:Src/mc_tasks.c ****             }
 995              		.loc 2 459 15
 996 022c 394B     		ldr	r3, .L66+16
 997 022e 1B68     		ldr	r3, [r3]
 998 0230 1846     		mov	r0, r3
 999 0232 FFF7FEFF 		bl	PWMC_SwitchOnPWM
 1000              		.loc 2 466 11
 1001 0236 D8E0     		b	.L62
 1002              	.L36:
 467:Src/mc_tasks.c ****         }
 468:Src/mc_tasks.c **** 
 469:Src/mc_tasks.c ****         case ALIGNMENT:
 470:Src/mc_tasks.c ****         {
 471:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 1003              		.loc 2 471 34
 1004 0238 354B     		ldr	r3, .L66+12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 41


 1005 023a 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 1006              		.loc 2 471 14
 1007 023e 052B     		cmp	r3, #5
 1008 0240 03D1     		bne	.L49
 472:Src/mc_tasks.c ****           {
 473:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 1009              		.loc 2 473 13
 1010 0242 0020     		movs	r0, #0
 1011 0244 FFF7FEFF 		bl	TSK_MF_StopProcessing
 474:Src/mc_tasks.c ****           }
 475:Src/mc_tasks.c ****           else
 476:Src/mc_tasks.c ****           {
 477:Src/mc_tasks.c ****             bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 478:Src/mc_tasks.c ****             bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 479:Src/mc_tasks.c ****             if ((isAligned == false)  && (EACDone == false))
 480:Src/mc_tasks.c ****             {
 481:Src/mc_tasks.c ****               qd_t IqdRef;
 482:Src/mc_tasks.c ****               IqdRef.q = 0;
 483:Src/mc_tasks.c ****               IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 484:Src/mc_tasks.c ****               FOCVars[M1].Iqdref = IqdRef;
 485:Src/mc_tasks.c ****             }
 486:Src/mc_tasks.c ****             else
 487:Src/mc_tasks.c ****             {
 488:Src/mc_tasks.c ****               R3_1_SwitchOffPWM( pwmcHandle[M1] );
 489:Src/mc_tasks.c ****               STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 490:Src/mc_tasks.c ****               STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 491:Src/mc_tasks.c ****               FOC_Clear(M1);
 492:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 493:Src/mc_tasks.c ****               TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 494:Src/mc_tasks.c ****               Mci[M1].State = WAIT_STOP_MOTOR;
 495:Src/mc_tasks.c ****               /* USER CODE BEGIN MediumFrequencyTask M1 EndOfEncAlignment */
 496:Src/mc_tasks.c **** 
 497:Src/mc_tasks.c ****               /* USER CODE END MediumFrequencyTask M1 EndOfEncAlignment */
 498:Src/mc_tasks.c ****             }
 499:Src/mc_tasks.c ****           }
 500:Src/mc_tasks.c ****           break;
 1012              		.loc 2 500 11
 1013 0248 D6E0     		b	.L58
 1014              	.L49:
 1015              	.LBB2:
 477:Src/mc_tasks.c ****             bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 1016              		.loc 2 477 30
 1017 024a 3648     		ldr	r0, .L66+32
 1018 024c FFF7FEFF 		bl	EAC_IsAligned
 1019 0250 0346     		mov	r3, r0
 1020 0252 FB71     		strb	r3, [r7, #7]
 478:Src/mc_tasks.c ****             if ((isAligned == false)  && (EACDone == false))
 1021              		.loc 2 478 28
 1022 0254 3348     		ldr	r0, .L66+32
 1023 0256 FFF7FEFF 		bl	EAC_Exec
 1024 025a 0346     		mov	r3, r0
 1025 025c BB71     		strb	r3, [r7, #6]
 479:Src/mc_tasks.c ****             {
 1026              		.loc 2 479 28
 1027 025e FB79     		ldrb	r3, [r7, #7]
 1028 0260 83F00103 		eor	r3, r3, #1
 1029 0264 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 42


 479:Src/mc_tasks.c ****             {
 1030              		.loc 2 479 16
 1031 0266 002B     		cmp	r3, #0
 1032 0268 13D0     		beq	.L51
 479:Src/mc_tasks.c ****             {
 1033              		.loc 2 479 51 discriminator 1
 1034 026a BB79     		ldrb	r3, [r7, #6]
 1035 026c 83F00103 		eor	r3, r3, #1
 1036 0270 DBB2     		uxtb	r3, r3
 479:Src/mc_tasks.c ****             {
 1037              		.loc 2 479 39 discriminator 1
 1038 0272 002B     		cmp	r3, #0
 1039 0274 0DD0     		beq	.L51
 1040              	.LBB3:
 482:Src/mc_tasks.c ****               IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 1041              		.loc 2 482 24
 1042 0276 0023     		movs	r3, #0
 1043 0278 3B80     		strh	r3, [r7]	@ movhi
 483:Src/mc_tasks.c ****               FOCVars[M1].Iqdref = IqdRef;
 1044              		.loc 2 483 26
 1045 027a 284B     		ldr	r3, .L66+24
 1046 027c 1B68     		ldr	r3, [r3]
 1047 027e 1846     		mov	r0, r3
 1048 0280 FFF7FEFF 		bl	STC_CalcTorqueReference
 1049 0284 0346     		mov	r3, r0
 483:Src/mc_tasks.c ****               FOCVars[M1].Iqdref = IqdRef;
 1050              		.loc 2 483 24
 1051 0286 7B80     		strh	r3, [r7, #2]	@ movhi
 484:Src/mc_tasks.c ****             }
 1052              		.loc 2 484 34
 1053 0288 234A     		ldr	r2, .L66+20
 1054 028a 3B68     		ldr	r3, [r7]
 1055 028c 1361     		str	r3, [r2, #16]
 1056              	.LBE3:
 480:Src/mc_tasks.c ****               qd_t IqdRef;
 1057              		.loc 2 480 13
 1058 028e 00BF     		nop
 1059              	.LBE2:
 1060              		.loc 2 500 11
 1061 0290 B2E0     		b	.L58
 1062              	.L51:
 1063              	.LBB4:
 488:Src/mc_tasks.c ****               STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 1064              		.loc 2 488 15
 1065 0292 204B     		ldr	r3, .L66+16
 1066 0294 1B68     		ldr	r3, [r3]
 1067 0296 1846     		mov	r0, r3
 1068 0298 FFF7FEFF 		bl	R3_1_SwitchOffPWM
 489:Src/mc_tasks.c ****               STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 1069              		.loc 2 489 15
 1070 029c 1F4B     		ldr	r3, .L66+24
 1071 029e 1B68     		ldr	r3, [r3]
 1072 02a0 0321     		movs	r1, #3
 1073 02a2 1846     		mov	r0, r3
 1074 02a4 FFF7FEFF 		bl	STC_SetControlMode
 490:Src/mc_tasks.c ****               FOC_Clear(M1);
 1075              		.loc 2 490 15
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 43


 1076 02a8 1C4B     		ldr	r3, .L66+24
 1077 02aa 1B68     		ldr	r3, [r3]
 1078 02ac 1649     		ldr	r1, .L66+4
 1079 02ae 1846     		mov	r0, r3
 1080 02b0 FFF7FEFF 		bl	STC_SetSpeedSensor
 491:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 1081              		.loc 2 491 15
 1082 02b4 0020     		movs	r0, #0
 1083 02b6 FFF7FEFF 		bl	FOC_Clear
 492:Src/mc_tasks.c ****               TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 1084              		.loc 2 492 15
 1085 02ba 164B     		ldr	r3, .L66+16
 1086 02bc 1B68     		ldr	r3, [r3]
 1087 02be 0021     		movs	r1, #0
 1088 02c0 1846     		mov	r0, r3
 1089 02c2 FFF7FEFF 		bl	R3_1_TurnOnLowSides
 493:Src/mc_tasks.c ****               Mci[M1].State = WAIT_STOP_MOTOR;
 1090              		.loc 2 493 15
 1091 02c6 4FF44870 		mov	r0, #800
 1092 02ca FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 494:Src/mc_tasks.c ****               /* USER CODE BEGIN MediumFrequencyTask M1 EndOfEncAlignment */
 1093              		.loc 2 494 29
 1094 02ce 104B     		ldr	r3, .L66+12
 1095 02d0 1422     		movs	r2, #20
 1096 02d2 83F82720 		strb	r2, [r3, #39]
 1097              	.LBE4:
 1098              		.loc 2 500 11
 1099 02d6 8FE0     		b	.L58
 1100              	.L35:
 501:Src/mc_tasks.c ****         }
 502:Src/mc_tasks.c **** 
 503:Src/mc_tasks.c ****         case RUN:
 504:Src/mc_tasks.c ****         {
 505:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 1101              		.loc 2 505 34
 1102 02d8 0D4B     		ldr	r3, .L66+12
 1103 02da 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 1104              		.loc 2 505 14
 1105 02de 052B     		cmp	r3, #5
 1106 02e0 03D1     		bne	.L52
 506:Src/mc_tasks.c ****           {
 507:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 1107              		.loc 2 507 13
 1108 02e2 0020     		movs	r0, #0
 1109 02e4 FFF7FEFF 		bl	TSK_MF_StopProcessing
 508:Src/mc_tasks.c ****           }
 509:Src/mc_tasks.c ****           else
 510:Src/mc_tasks.c ****           {
 511:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 2 */
 512:Src/mc_tasks.c **** 
 513:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 514:Src/mc_tasks.c **** 
 515:Src/mc_tasks.c ****             TC_PositionRegulation(pPosCtrl[M1]);
 516:Src/mc_tasks.c ****             MCI_ExecBufferedCommands(&Mci[M1]);
 517:Src/mc_tasks.c **** 
 518:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 519:Src/mc_tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 44


 520:Src/mc_tasks.c ****           }
 521:Src/mc_tasks.c ****           break;
 1110              		.loc 2 521 11
 1111 02e8 86E0     		b	.L58
 1112              	.L52:
 515:Src/mc_tasks.c ****             MCI_ExecBufferedCommands(&Mci[M1]);
 1113              		.loc 2 515 13
 1114 02ea 0F4B     		ldr	r3, .L66+36
 1115 02ec 1B68     		ldr	r3, [r3]
 1116 02ee 1846     		mov	r0, r3
 1117 02f0 FFF7FEFF 		bl	TC_PositionRegulation
 516:Src/mc_tasks.c **** 
 1118              		.loc 2 516 13
 1119 02f4 0648     		ldr	r0, .L66+12
 1120 02f6 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 518:Src/mc_tasks.c **** 
 1121              		.loc 2 518 15
 1122 02fa 0020     		movs	r0, #0
 1123 02fc FFF7FEFF 		bl	FOC_CalcCurrRef
 1124              		.loc 2 521 11
 1125 0300 7AE0     		b	.L58
 1126              	.L67:
 1127 0302 00BF     		.align	2
 1128              	.L66:
 1129 0304 00000000 		.word	PerfTraces
 1130 0308 00000000 		.word	ENCODER_M1
 1131 030c 00000000 		.word	pMPM
 1132 0310 00000000 		.word	Mci
 1133 0314 00000000 		.word	pwmcHandle
 1134 0318 00000000 		.word	FOCVars
 1135 031c 00000000 		.word	pSTC
 1136 0320 00000000 		.word	VirtualSpeedSensorM1
 1137 0324 00000000 		.word	EncAlignCtrlM1
 1138 0328 00000000 		.word	pPosCtrl
 1139              	.L34:
 522:Src/mc_tasks.c ****         }
 523:Src/mc_tasks.c **** 
 524:Src/mc_tasks.c ****         case STOP:
 525:Src/mc_tasks.c ****         {
 526:Src/mc_tasks.c ****           if (TSK_StopPermanencyTimeHasElapsedM1())
 1140              		.loc 2 526 15
 1141 032c FFF7FEFF 		bl	TSK_StopPermanencyTimeHasElapsedM1
 1142 0330 0346     		mov	r3, r0
 1143              		.loc 2 526 14
 1144 0332 002B     		cmp	r3, #0
 1145 0334 5BD0     		beq	.L63
 527:Src/mc_tasks.c ****           {
 528:Src/mc_tasks.c **** 
 529:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 5 */
 530:Src/mc_tasks.c **** 
 531:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 5 */
 532:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 1146              		.loc 2 532 35
 1147 0336 344B     		ldr	r3, .L68
 1148 0338 0022     		movs	r2, #0
 1149 033a 83F82620 		strb	r2, [r3, #38]
 533:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 45


 1150              		.loc 2 533 27
 1151 033e 324B     		ldr	r3, .L68
 1152 0340 0022     		movs	r2, #0
 1153 0342 83F82720 		strb	r2, [r3, #39]
 534:Src/mc_tasks.c ****           }
 535:Src/mc_tasks.c ****           else
 536:Src/mc_tasks.c ****           {
 537:Src/mc_tasks.c ****             /* Nothing to do, FW waits for to stop */
 538:Src/mc_tasks.c ****           }
 539:Src/mc_tasks.c ****           break;
 1154              		.loc 2 539 11
 1155 0346 52E0     		b	.L63
 1156              	.L32:
 540:Src/mc_tasks.c ****         }
 541:Src/mc_tasks.c **** 
 542:Src/mc_tasks.c ****         case FAULT_OVER:
 543:Src/mc_tasks.c ****         {
 544:Src/mc_tasks.c ****           if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 1157              		.loc 2 544 40
 1158 0348 2F4B     		ldr	r3, .L68
 1159 034a 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 1160              		.loc 2 544 14
 1161 034e 022B     		cmp	r3, #2
 1162 0350 4FD1     		bne	.L64
 545:Src/mc_tasks.c ****           {
 546:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 1163              		.loc 2 546 35
 1164 0352 2D4B     		ldr	r3, .L68
 1165 0354 0022     		movs	r2, #0
 1166 0356 83F82620 		strb	r2, [r3, #38]
 547:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1167              		.loc 2 547 27
 1168 035a 2B4B     		ldr	r3, .L68
 1169 035c 0022     		movs	r2, #0
 1170 035e 83F82720 		strb	r2, [r3, #39]
 548:Src/mc_tasks.c ****           }
 549:Src/mc_tasks.c ****           else
 550:Src/mc_tasks.c ****           {
 551:Src/mc_tasks.c ****             /* Nothing to do, FW stays in FAULT_OVER state until acknowledgement */
 552:Src/mc_tasks.c ****           }
 553:Src/mc_tasks.c ****           break;
 1171              		.loc 2 553 11
 1172 0362 46E0     		b	.L64
 1173              	.L33:
 554:Src/mc_tasks.c ****         }
 555:Src/mc_tasks.c **** 
 556:Src/mc_tasks.c ****         case FAULT_NOW:
 557:Src/mc_tasks.c ****         {
 558:Src/mc_tasks.c ****           Mci[M1].State = FAULT_OVER;
 1174              		.loc 2 558 25
 1175 0364 284B     		ldr	r3, .L68
 1176 0366 0B22     		movs	r2, #11
 1177 0368 83F82720 		strb	r2, [r3, #39]
 559:Src/mc_tasks.c ****           break;
 1178              		.loc 2 559 11
 1179 036c 44E0     		b	.L58
 1180              	.L28:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 46


 560:Src/mc_tasks.c ****         }
 561:Src/mc_tasks.c **** 
 562:Src/mc_tasks.c ****         case WAIT_STOP_MOTOR:
 563:Src/mc_tasks.c ****         {
 564:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 1181              		.loc 2 564 34
 1182 036e 264B     		ldr	r3, .L68
 1183 0370 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 1184              		.loc 2 564 14
 1185 0374 052B     		cmp	r3, #5
 1186 0376 03D1     		bne	.L56
 565:Src/mc_tasks.c ****           {
 566:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 1187              		.loc 2 566 13
 1188 0378 0020     		movs	r0, #0
 1189 037a FFF7FEFF 		bl	TSK_MF_StopProcessing
 567:Src/mc_tasks.c ****           }
 568:Src/mc_tasks.c ****           else
 569:Src/mc_tasks.c ****           {
 570:Src/mc_tasks.c ****             if (TSK_StopPermanencyTimeHasElapsedM1())
 571:Src/mc_tasks.c ****             {
 572:Src/mc_tasks.c ****               ENC_Clear(&ENCODER_M1);
 573:Src/mc_tasks.c ****               R3_1_SwitchOnPWM(pwmcHandle[M1]);
 574:Src/mc_tasks.c ****               TC_EncAlignmentCommand(pPosCtrl[M1]);
 575:Src/mc_tasks.c ****               FOC_InitAdditionalMethods(M1);
 576:Src/mc_tasks.c ****               STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to curre
 577:Src/mc_tasks.c ****               MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the spee
 578:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 579:Src/mc_tasks.c ****               Mci[M1].State = RUN;
 580:Src/mc_tasks.c ****             }
 581:Src/mc_tasks.c ****             else
 582:Src/mc_tasks.c ****             {
 583:Src/mc_tasks.c ****               /* Nothing to do */
 584:Src/mc_tasks.c ****             }
 585:Src/mc_tasks.c ****           }
 586:Src/mc_tasks.c ****           break;
 1190              		.loc 2 586 11
 1191 037e 3AE0     		b	.L65
 1192              	.L56:
 570:Src/mc_tasks.c ****             {
 1193              		.loc 2 570 17
 1194 0380 FFF7FEFF 		bl	TSK_StopPermanencyTimeHasElapsedM1
 1195 0384 0346     		mov	r3, r0
 570:Src/mc_tasks.c ****             {
 1196              		.loc 2 570 16
 1197 0386 002B     		cmp	r3, #0
 1198 0388 35D0     		beq	.L65
 572:Src/mc_tasks.c ****               R3_1_SwitchOnPWM(pwmcHandle[M1]);
 1199              		.loc 2 572 15
 1200 038a 2048     		ldr	r0, .L68+4
 1201 038c FFF7FEFF 		bl	ENC_Clear
 573:Src/mc_tasks.c ****               TC_EncAlignmentCommand(pPosCtrl[M1]);
 1202              		.loc 2 573 15
 1203 0390 1F4B     		ldr	r3, .L68+8
 1204 0392 1B68     		ldr	r3, [r3]
 1205 0394 1846     		mov	r0, r3
 1206 0396 FFF7FEFF 		bl	R3_1_SwitchOnPWM
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 47


 574:Src/mc_tasks.c ****               FOC_InitAdditionalMethods(M1);
 1207              		.loc 2 574 15
 1208 039a 1E4B     		ldr	r3, .L68+12
 1209 039c 1B68     		ldr	r3, [r3]
 1210 039e 1846     		mov	r0, r3
 1211 03a0 FFF7FEFF 		bl	TC_EncAlignmentCommand
 575:Src/mc_tasks.c ****               STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to curre
 1212              		.loc 2 575 15
 1213 03a4 0020     		movs	r0, #0
 1214 03a6 FFF7FEFF 		bl	FOC_InitAdditionalMethods
 576:Src/mc_tasks.c ****               MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the spee
 1215              		.loc 2 576 15
 1216 03aa 1B4B     		ldr	r3, .L68+16
 1217 03ac 1B68     		ldr	r3, [r3]
 1218 03ae 1846     		mov	r0, r3
 1219 03b0 FFF7FEFF 		bl	STC_ForceSpeedReferenceToCurrentSpeed
 577:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 1220              		.loc 2 577 15
 1221 03b4 1448     		ldr	r0, .L68
 1222 03b6 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 578:Src/mc_tasks.c ****               Mci[M1].State = RUN;
 1223              		.loc 2 578 15
 1224 03ba 0020     		movs	r0, #0
 1225 03bc FFF7FEFF 		bl	FOC_CalcCurrRef
 579:Src/mc_tasks.c ****             }
 1226              		.loc 2 579 29
 1227 03c0 114B     		ldr	r3, .L68
 1228 03c2 0622     		movs	r2, #6
 1229 03c4 83F82720 		strb	r2, [r3, #39]
 1230              		.loc 2 586 11
 1231 03c8 15E0     		b	.L65
 1232              	.L26:
 587:Src/mc_tasks.c ****         }
 588:Src/mc_tasks.c **** 
 589:Src/mc_tasks.c ****         default:
 590:Src/mc_tasks.c ****           break;
 591:Src/mc_tasks.c ****        }
 592:Src/mc_tasks.c ****     }
 593:Src/mc_tasks.c ****     else
 594:Src/mc_tasks.c ****     {
 595:Src/mc_tasks.c ****       Mci[M1].State = FAULT_OVER;
 1233              		.loc 2 595 21
 1234 03ca 0F4B     		ldr	r3, .L68
 1235 03cc 0B22     		movs	r2, #11
 1236 03ce 83F82720 		strb	r2, [r3, #39]
 1237 03d2 11E0     		b	.L58
 1238              	.L25:
 596:Src/mc_tasks.c ****     }
 597:Src/mc_tasks.c ****   }
 598:Src/mc_tasks.c ****   else
 599:Src/mc_tasks.c ****   {
 600:Src/mc_tasks.c ****     Mci[M1].State = FAULT_NOW;
 1239              		.loc 2 600 19
 1240 03d4 0C4B     		ldr	r3, .L68
 1241 03d6 0A22     		movs	r2, #10
 1242 03d8 83F82720 		strb	r2, [r3, #39]
 1243 03dc 0CE0     		b	.L58
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 48


 1244              	.L59:
 590:Src/mc_tasks.c ****        }
 1245              		.loc 2 590 11
 1246 03de 00BF     		nop
 1247 03e0 0AE0     		b	.L58
 1248              	.L60:
 393:Src/mc_tasks.c ****         }
 1249              		.loc 2 393 11
 1250 03e2 00BF     		nop
 1251 03e4 08E0     		b	.L58
 1252              	.L61:
 425:Src/mc_tasks.c ****         }
 1253              		.loc 2 425 11
 1254 03e6 00BF     		nop
 1255 03e8 06E0     		b	.L58
 1256              	.L62:
 466:Src/mc_tasks.c ****         }
 1257              		.loc 2 466 11
 1258 03ea 00BF     		nop
 1259 03ec 04E0     		b	.L58
 1260              	.L63:
 539:Src/mc_tasks.c ****         }
 1261              		.loc 2 539 11
 1262 03ee 00BF     		nop
 1263 03f0 02E0     		b	.L58
 1264              	.L64:
 553:Src/mc_tasks.c ****         }
 1265              		.loc 2 553 11
 1266 03f2 00BF     		nop
 1267 03f4 00E0     		b	.L58
 1268              	.L65:
 586:Src/mc_tasks.c ****         }
 1269              		.loc 2 586 11
 1270 03f6 00BF     		nop
 1271              	.L58:
 601:Src/mc_tasks.c ****   }
 602:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 6 */
 603:Src/mc_tasks.c **** 
 604:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 6 */
 605:Src/mc_tasks.c ****   MC_BG_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 1272              		.loc 2 605 3
 1273 03f8 0121     		movs	r1, #1
 1274 03fa 0848     		ldr	r0, .L68+20
 1275 03fc FFF7FEFF 		bl	MC_BG_Perf_Measure_Stop
 606:Src/mc_tasks.c **** }
 1276              		.loc 2 606 1
 1277 0400 00BF     		nop
 1278 0402 0837     		adds	r7, r7, #8
 1279              	.LCFI23:
 1280              		.cfi_def_cfa_offset 8
 1281 0404 BD46     		mov	sp, r7
 1282              	.LCFI24:
 1283              		.cfi_def_cfa_register 13
 1284              		@ sp needed
 1285 0406 80BD     		pop	{r7, pc}
 1286              	.L69:
 1287              		.align	2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 49


 1288              	.L68:
 1289 0408 00000000 		.word	Mci
 1290 040c 00000000 		.word	ENCODER_M1
 1291 0410 00000000 		.word	pwmcHandle
 1292 0414 00000000 		.word	pPosCtrl
 1293 0418 00000000 		.word	pSTC
 1294 041c 00000000 		.word	PerfTraces
 1295              		.cfi_endproc
 1296              	.LFE1099:
 1298              		.section	.text.FOC_Clear,"ax",%progbits
 1299              		.align	1
 1300              		.weak	FOC_Clear
 1301              		.syntax unified
 1302              		.thumb
 1303              		.thumb_func
 1305              	FOC_Clear:
 1306              	.LFB1100:
 607:Src/mc_tasks.c **** 
 608:Src/mc_tasks.c **** /**
 609:Src/mc_tasks.c ****   * @brief  It re-initializes the current and voltage variables. Moreover
 610:Src/mc_tasks.c ****   *         it clears qd currents PI controllers, voltage sensor and SpeednTorque
 611:Src/mc_tasks.c ****   *         controller. It must be called before each motor restart.
 612:Src/mc_tasks.c ****   *         It does not clear speed sensor.
 613:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2.
 614:Src/mc_tasks.c ****   */
 615:Src/mc_tasks.c **** __weak void FOC_Clear(uint8_t bMotor)
 616:Src/mc_tasks.c **** {
 1307              		.loc 2 616 1
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 24
 1310              		@ frame_needed = 1, uses_anonymous_args = 0
 1311 0000 80B5     		push	{r7, lr}
 1312              	.LCFI25:
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 86B0     		sub	sp, sp, #24
 1317              	.LCFI26:
 1318              		.cfi_def_cfa_offset 32
 1319 0004 00AF     		add	r7, sp, #0
 1320              	.LCFI27:
 1321              		.cfi_def_cfa_register 7
 1322 0006 0346     		mov	r3, r0
 1323 0008 FB71     		strb	r3, [r7, #7]
 617:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 0 */
 618:Src/mc_tasks.c **** 
 619:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 0 */
 620:Src/mc_tasks.c **** 
 621:Src/mc_tasks.c ****   ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
 1324              		.loc 2 621 8
 1325 000a 0023     		movs	r3, #0
 1326 000c BB82     		strh	r3, [r7, #20]	@ movhi
 1327 000e 0023     		movs	r3, #0
 1328 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 622:Src/mc_tasks.c ****   qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
 1329              		.loc 2 622 8
 1330 0012 0023     		movs	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 50


 1331 0014 3B82     		strh	r3, [r7, #16]	@ movhi
 1332 0016 0023     		movs	r3, #0
 1333 0018 7B82     		strh	r3, [r7, #18]	@ movhi
 623:Src/mc_tasks.c ****   alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};
 1334              		.loc 2 623 15
 1335 001a 0023     		movs	r3, #0
 1336 001c BB81     		strh	r3, [r7, #12]	@ movhi
 1337 001e 0023     		movs	r3, #0
 1338 0020 FB81     		strh	r3, [r7, #14]	@ movhi
 624:Src/mc_tasks.c **** 
 625:Src/mc_tasks.c ****   FOCVars[bMotor].Iab = NULL_ab;
 1339              		.loc 2 625 18
 1340 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1341              		.loc 2 625 23
 1342 0024 3F4A     		ldr	r2, .L71
 1343 0026 2621     		movs	r1, #38
 1344 0028 01FB03F3 		mul	r3, r1, r3
 1345 002c 1344     		add	r3, r3, r2
 1346 002e 1A46     		mov	r2, r3
 1347 0030 07F11403 		add	r3, r7, #20
 1348 0034 1868     		ldr	r0, [r3]
 1349 0036 1060     		str	r0, [r2]	@ unaligned
 626:Src/mc_tasks.c ****   FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 1350              		.loc 2 626 18
 1351 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1352              		.loc 2 626 30
 1353 003a 3A4A     		ldr	r2, .L71
 1354 003c 2621     		movs	r1, #38
 1355 003e 01FB03F3 		mul	r3, r1, r3
 1356 0042 1344     		add	r3, r3, r2
 1357 0044 0433     		adds	r3, r3, #4
 1358 0046 1A46     		mov	r2, r3
 1359 0048 07F10C03 		add	r3, r7, #12
 1360 004c 1868     		ldr	r0, [r3]
 1361 004e 1060     		str	r0, [r2]	@ unaligned
 627:Src/mc_tasks.c ****   FOCVars[bMotor].Iqd = NULL_qd;
 1362              		.loc 2 627 18
 1363 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1364              		.loc 2 627 23
 1365 0052 344A     		ldr	r2, .L71
 1366 0054 2621     		movs	r1, #38
 1367 0056 01FB03F3 		mul	r3, r1, r3
 1368 005a 1344     		add	r3, r3, r2
 1369 005c 0C33     		adds	r3, r3, #12
 1370 005e 1A46     		mov	r2, r3
 1371 0060 07F11003 		add	r3, r7, #16
 1372 0064 1868     		ldr	r0, [r3]
 1373 0066 1060     		str	r0, [r2]	@ unaligned
 628:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
 1374              		.loc 2 628 20
 1375 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1376              		.loc 2 628 28
 1377 006a 2E4A     		ldr	r2, .L71
 1378 006c 2621     		movs	r1, #38
 1379 006e 01FB03F3 		mul	r3, r1, r3
 1380 0072 1344     		add	r3, r3, r2
 1381 0074 1033     		adds	r3, r3, #16
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 51


 1382 0076 1A46     		mov	r2, r3
 1383 0078 07F11003 		add	r3, r7, #16
 1384 007c 1868     		ldr	r0, [r3]
 1385 007e 1060     		str	r0, [r2]	@ unaligned
 629:Src/mc_tasks.c ****   FOCVars[bMotor].hTeref = (int16_t)0;
 1386              		.loc 2 629 18
 1387 0080 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1388              		.loc 2 629 26
 1389 0082 284A     		ldr	r2, .L71
 1390 0084 2621     		movs	r1, #38
 1391 0086 01FB03F3 		mul	r3, r1, r3
 1392 008a 1344     		add	r3, r3, r2
 1393 008c 1E33     		adds	r3, r3, #30
 1394 008e 0022     		movs	r2, #0
 1395 0090 1A80     		strh	r2, [r3]	@ movhi
 630:Src/mc_tasks.c ****   FOCVars[bMotor].Vqd = NULL_qd;
 1396              		.loc 2 630 18
 1397 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1398              		.loc 2 630 23
 1399 0094 234A     		ldr	r2, .L71
 1400 0096 2621     		movs	r1, #38
 1401 0098 01FB03F3 		mul	r3, r1, r3
 1402 009c 1344     		add	r3, r3, r2
 1403 009e 1033     		adds	r3, r3, #16
 1404 00a0 0633     		adds	r3, r3, #6
 1405 00a2 07F11002 		add	r2, r7, #16
 1406 00a6 1068     		ldr	r0, [r2]
 1407 00a8 1860     		str	r0, [r3]	@ unaligned
 631:Src/mc_tasks.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 1408              		.loc 2 631 18
 1409 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1410              		.loc 2 631 30
 1411 00ac 1D4A     		ldr	r2, .L71
 1412 00ae 2621     		movs	r1, #38
 1413 00b0 01FB03F3 		mul	r3, r1, r3
 1414 00b4 1344     		add	r3, r3, r2
 1415 00b6 1833     		adds	r3, r3, #24
 1416 00b8 0233     		adds	r3, r3, #2
 1417 00ba 07F10C02 		add	r2, r7, #12
 1418 00be 1068     		ldr	r0, [r2]
 1419 00c0 1860     		str	r0, [r3]	@ unaligned
 632:Src/mc_tasks.c ****   FOCVars[bMotor].hElAngle = (int16_t)0;
 1420              		.loc 2 632 18
 1421 00c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1422              		.loc 2 632 28
 1423 00c4 174A     		ldr	r2, .L71
 1424 00c6 2621     		movs	r1, #38
 1425 00c8 01FB03F3 		mul	r3, r1, r3
 1426 00cc 1344     		add	r3, r3, r2
 1427 00ce 2033     		adds	r3, r3, #32
 1428 00d0 0022     		movs	r2, #0
 1429 00d2 1A80     		strh	r2, [r3]	@ movhi
 633:Src/mc_tasks.c **** 
 634:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 1430              		.loc 2 634 3
 1431 00d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1432 00d6 144A     		ldr	r2, .L71+4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 52


 1433 00d8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1434 00dc 0021     		movs	r1, #0
 1435 00de 1846     		mov	r0, r3
 1436 00e0 FFF7FEFF 		bl	PID_SetIntegralTerm
 635:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 1437              		.loc 2 635 3
 1438 00e4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1439 00e6 114A     		ldr	r2, .L71+8
 1440 00e8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1441 00ec 0021     		movs	r1, #0
 1442 00ee 1846     		mov	r0, r3
 1443 00f0 FFF7FEFF 		bl	PID_SetIntegralTerm
 636:Src/mc_tasks.c **** 
 637:Src/mc_tasks.c ****   STC_Clear(pSTC[bMotor]);
 1444              		.loc 2 637 3
 1445 00f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1446 00f6 0E4A     		ldr	r2, .L71+12
 1447 00f8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1448 00fc 1846     		mov	r0, r3
 1449 00fe FFF7FEFF 		bl	STC_Clear
 638:Src/mc_tasks.c **** 
 639:Src/mc_tasks.c ****   PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 1450              		.loc 2 639 3
 1451 0102 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1452 0104 0B4A     		ldr	r2, .L71+16
 1453 0106 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1454 010a 1846     		mov	r0, r3
 1455 010c FFF7FEFF 		bl	PWMC_SwitchOffPWM
 640:Src/mc_tasks.c **** 
 641:Src/mc_tasks.c ****   MC_Perf_Clear(&PerfTraces,bMotor);
 1456              		.loc 2 641 3
 1457 0110 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1458 0112 1946     		mov	r1, r3
 1459 0114 0848     		ldr	r0, .L71+20
 1460 0116 FFF7FEFF 		bl	MC_Perf_Clear
 642:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 1 */
 643:Src/mc_tasks.c **** 
 644:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 1 */
 645:Src/mc_tasks.c **** }
 1461              		.loc 2 645 1
 1462 011a 00BF     		nop
 1463 011c 1837     		adds	r7, r7, #24
 1464              	.LCFI28:
 1465              		.cfi_def_cfa_offset 8
 1466 011e BD46     		mov	sp, r7
 1467              	.LCFI29:
 1468              		.cfi_def_cfa_register 13
 1469              		@ sp needed
 1470 0120 80BD     		pop	{r7, pc}
 1471              	.L72:
 1472 0122 00BF     		.align	2
 1473              	.L71:
 1474 0124 00000000 		.word	FOCVars
 1475 0128 00000000 		.word	pPIDIq
 1476 012c 00000000 		.word	pPIDId
 1477 0130 00000000 		.word	pSTC
 1478 0134 00000000 		.word	pwmcHandle
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 53


 1479 0138 00000000 		.word	PerfTraces
 1480              		.cfi_endproc
 1481              	.LFE1100:
 1483              		.section	.text.FOC_InitAdditionalMethods,"ax",%progbits
 1484              		.align	1
 1485              		.weak	FOC_InitAdditionalMethods
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1490              	FOC_InitAdditionalMethods:
 1491              	.LFB1101:
 646:Src/mc_tasks.c **** 
 647:Src/mc_tasks.c **** /**
 648:Src/mc_tasks.c ****   * @brief  Use this method to initialize additional methods (if any) in
 649:Src/mc_tasks.c ****   *         START_TO_RUN state.
 650:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2.
 651:Src/mc_tasks.c ****   */
 652:Src/mc_tasks.c **** __weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
 653:Src/mc_tasks.c **** {
 1492              		.loc 2 653 1
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 8
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496              		@ link register save eliminated.
 1497 0000 80B4     		push	{r7}
 1498              	.LCFI30:
 1499              		.cfi_def_cfa_offset 4
 1500              		.cfi_offset 7, -4
 1501 0002 83B0     		sub	sp, sp, #12
 1502              	.LCFI31:
 1503              		.cfi_def_cfa_offset 16
 1504 0004 00AF     		add	r7, sp, #0
 1505              	.LCFI32:
 1506              		.cfi_def_cfa_register 7
 1507 0006 0346     		mov	r3, r0
 1508 0008 FB71     		strb	r3, [r7, #7]
 654:Src/mc_tasks.c ****     if (M_NONE == bMotor)
 655:Src/mc_tasks.c ****     {
 656:Src/mc_tasks.c ****       /* Nothing to do */
 657:Src/mc_tasks.c ****     }
 658:Src/mc_tasks.c ****     else
 659:Src/mc_tasks.c ****     {
 660:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */
 661:Src/mc_tasks.c **** 
 662:Src/mc_tasks.c ****   /* USER CODE END FOC_InitAdditionalMethods 0 */
 663:Src/mc_tasks.c ****     }
 664:Src/mc_tasks.c **** }
 1509              		.loc 2 664 1
 1510 000a 00BF     		nop
 1511 000c 0C37     		adds	r7, r7, #12
 1512              	.LCFI33:
 1513              		.cfi_def_cfa_offset 4
 1514 000e BD46     		mov	sp, r7
 1515              	.LCFI34:
 1516              		.cfi_def_cfa_register 13
 1517              		@ sp needed
 1518 0010 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 54


 1519              	.LCFI35:
 1520              		.cfi_restore 7
 1521              		.cfi_def_cfa_offset 0
 1522 0014 7047     		bx	lr
 1523              		.cfi_endproc
 1524              	.LFE1101:
 1526              		.section	.text.FOC_CalcCurrRef,"ax",%progbits
 1527              		.align	1
 1528              		.weak	FOC_CalcCurrRef
 1529              		.syntax unified
 1530              		.thumb
 1531              		.thumb_func
 1533              	FOC_CalcCurrRef:
 1534              	.LFB1102:
 665:Src/mc_tasks.c **** 
 666:Src/mc_tasks.c **** /**
 667:Src/mc_tasks.c ****   * @brief  It computes the new values of Iqdref (current references on qd
 668:Src/mc_tasks.c ****   *         reference frame) based on the required electrical torque information
 669:Src/mc_tasks.c ****   *         provided by oTSC object (internally clocked).
 670:Src/mc_tasks.c ****   *         If implemented in the derived class it executes flux weakening and/or
 671:Src/mc_tasks.c ****   *         MTPA algorithm(s). It must be called with the periodicity specified
 672:Src/mc_tasks.c ****   *         in oTSC parameters.
 673:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2.
 674:Src/mc_tasks.c ****   */
 675:Src/mc_tasks.c **** __weak void FOC_CalcCurrRef(uint8_t bMotor)
 676:Src/mc_tasks.c **** {
 1535              		.loc 2 676 1
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 8
 1538              		@ frame_needed = 1, uses_anonymous_args = 0
 1539 0000 90B5     		push	{r4, r7, lr}
 1540              	.LCFI36:
 1541              		.cfi_def_cfa_offset 12
 1542              		.cfi_offset 4, -12
 1543              		.cfi_offset 7, -8
 1544              		.cfi_offset 14, -4
 1545 0002 83B0     		sub	sp, sp, #12
 1546              	.LCFI37:
 1547              		.cfi_def_cfa_offset 24
 1548 0004 00AF     		add	r7, sp, #0
 1549              	.LCFI38:
 1550              		.cfi_def_cfa_register 7
 1551 0006 0346     		mov	r3, r0
 1552 0008 FB71     		strb	r3, [r7, #7]
 677:Src/mc_tasks.c **** 
 678:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 0 */
 679:Src/mc_tasks.c **** 
 680:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 0 */
 681:Src/mc_tasks.c ****   if (INTERNAL == FOCVars[bMotor].bDriveInput)
 1553              		.loc 2 681 34
 1554 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1555 000c 184A     		ldr	r2, .L77
 1556 000e 2621     		movs	r1, #38
 1557 0010 01FB03F3 		mul	r3, r1, r3
 1558 0014 1344     		add	r3, r3, r2
 1559 0016 2433     		adds	r3, r3, #36
 1560 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 55


 1561              		.loc 2 681 6
 1562 001a 002B     		cmp	r3, #0
 1563 001c 23D1     		bne	.L76
 682:Src/mc_tasks.c ****   {
 683:Src/mc_tasks.c ****     FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 1564              		.loc 2 683 30
 1565 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1566 0020 144A     		ldr	r2, .L77+4
 1567 0022 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1568              		.loc 2 683 20
 1569 0026 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 1570              		.loc 2 683 30
 1571 0028 1846     		mov	r0, r3
 1572 002a FFF7FEFF 		bl	STC_CalcTorqueReference
 1573 002e 0346     		mov	r3, r0
 1574 0030 1946     		mov	r1, r3
 1575              		.loc 2 683 28
 1576 0032 0F4A     		ldr	r2, .L77
 1577 0034 2623     		movs	r3, #38
 1578 0036 04FB03F3 		mul	r3, r4, r3
 1579 003a 1344     		add	r3, r3, r2
 1580 003c 1E33     		adds	r3, r3, #30
 1581 003e 0A46     		mov	r2, r1	@ movhi
 1582 0040 1A80     		strh	r2, [r3]	@ movhi
 684:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 1583              		.loc 2 684 47
 1584 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1585              		.loc 2 684 27
 1586 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1587              		.loc 2 684 47
 1588 0046 0A49     		ldr	r1, .L77
 1589 0048 2620     		movs	r0, #38
 1590 004a 00FB02F2 		mul	r2, r0, r2
 1591 004e 0A44     		add	r2, r2, r1
 1592 0050 1E32     		adds	r2, r2, #30
 1593 0052 B2F90000 		ldrsh	r0, [r2]
 1594              		.loc 2 684 30
 1595 0056 064A     		ldr	r2, .L77
 1596 0058 2621     		movs	r1, #38
 1597 005a 01FB03F3 		mul	r3, r1, r3
 1598 005e 1344     		add	r3, r3, r2
 1599 0060 1033     		adds	r3, r3, #16
 1600 0062 0246     		mov	r2, r0	@ movhi
 1601 0064 1A80     		strh	r2, [r3]	@ movhi
 1602              	.L76:
 685:Src/mc_tasks.c **** 
 686:Src/mc_tasks.c ****   }
 687:Src/mc_tasks.c ****   else
 688:Src/mc_tasks.c ****   {
 689:Src/mc_tasks.c ****     /* Nothing to do */
 690:Src/mc_tasks.c ****   }
 691:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 1 */
 692:Src/mc_tasks.c **** 
 693:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 1 */
 694:Src/mc_tasks.c **** }
 1603              		.loc 2 694 1
 1604 0066 00BF     		nop
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 56


 1605 0068 0C37     		adds	r7, r7, #12
 1606              	.LCFI39:
 1607              		.cfi_def_cfa_offset 12
 1608 006a BD46     		mov	sp, r7
 1609              	.LCFI40:
 1610              		.cfi_def_cfa_register 13
 1611              		@ sp needed
 1612 006c 90BD     		pop	{r4, r7, pc}
 1613              	.L78:
 1614 006e 00BF     		.align	2
 1615              	.L77:
 1616 0070 00000000 		.word	FOCVars
 1617 0074 00000000 		.word	pSTC
 1618              		.cfi_endproc
 1619              	.LFE1102:
 1621              		.section	.text.TSK_SetChargeBootCapDelayM1,"ax",%progbits
 1622              		.align	1
 1623              		.weak	TSK_SetChargeBootCapDelayM1
 1624              		.syntax unified
 1625              		.thumb
 1626              		.thumb_func
 1628              	TSK_SetChargeBootCapDelayM1:
 1629              	.LFB1103:
 695:Src/mc_tasks.c **** 
 696:Src/mc_tasks.c **** /**
 697:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the delay required
 698:Src/mc_tasks.c ****   *         for drivers boot capacitors charging of motor 1.
 699:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted.
 700:Src/mc_tasks.c ****   * @retval void
 701:Src/mc_tasks.c ****   */
 702:Src/mc_tasks.c **** __weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
 703:Src/mc_tasks.c **** {
 1630              		.loc 2 703 1
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 8
 1633              		@ frame_needed = 1, uses_anonymous_args = 0
 1634              		@ link register save eliminated.
 1635 0000 80B4     		push	{r7}
 1636              	.LCFI41:
 1637              		.cfi_def_cfa_offset 4
 1638              		.cfi_offset 7, -4
 1639 0002 83B0     		sub	sp, sp, #12
 1640              	.LCFI42:
 1641              		.cfi_def_cfa_offset 16
 1642 0004 00AF     		add	r7, sp, #0
 1643              	.LCFI43:
 1644              		.cfi_def_cfa_register 7
 1645 0006 0346     		mov	r3, r0
 1646 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 704:Src/mc_tasks.c ****    hBootCapDelayCounterM1 = hTickCount;
 1647              		.loc 2 704 27
 1648 000a 044A     		ldr	r2, .L80
 1649 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 1650 000e 1380     		strh	r3, [r2]	@ movhi
 705:Src/mc_tasks.c **** }
 1651              		.loc 2 705 1
 1652 0010 00BF     		nop
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 57


 1653 0012 0C37     		adds	r7, r7, #12
 1654              	.LCFI44:
 1655              		.cfi_def_cfa_offset 4
 1656 0014 BD46     		mov	sp, r7
 1657              	.LCFI45:
 1658              		.cfi_def_cfa_register 13
 1659              		@ sp needed
 1660 0016 5DF8047B 		ldr	r7, [sp], #4
 1661              	.LCFI46:
 1662              		.cfi_restore 7
 1663              		.cfi_def_cfa_offset 0
 1664 001a 7047     		bx	lr
 1665              	.L81:
 1666              		.align	2
 1667              	.L80:
 1668 001c 00000000 		.word	hBootCapDelayCounterM1
 1669              		.cfi_endproc
 1670              	.LFE1103:
 1672              		.section	.text.TSK_ChargeBootCapDelayHasElapsedM1,"ax",%progbits
 1673              		.align	1
 1674              		.weak	TSK_ChargeBootCapDelayHasElapsedM1
 1675              		.syntax unified
 1676              		.thumb
 1677              		.thumb_func
 1679              	TSK_ChargeBootCapDelayHasElapsedM1:
 1680              	.LFB1104:
 706:Src/mc_tasks.c **** 
 707:Src/mc_tasks.c **** /**
 708:Src/mc_tasks.c ****   * @brief  Use this function to know whether the time required to charge boot
 709:Src/mc_tasks.c ****   *         capacitors of motor 1 has elapsed.
 710:Src/mc_tasks.c ****   * @param  none
 711:Src/mc_tasks.c ****   * @retval bool true if time has elapsed, false otherwise.
 712:Src/mc_tasks.c ****   */
 713:Src/mc_tasks.c **** __weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
 714:Src/mc_tasks.c **** {
 1681              		.loc 2 714 1
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 8
 1684              		@ frame_needed = 1, uses_anonymous_args = 0
 1685              		@ link register save eliminated.
 1686 0000 80B4     		push	{r7}
 1687              	.LCFI47:
 1688              		.cfi_def_cfa_offset 4
 1689              		.cfi_offset 7, -4
 1690 0002 83B0     		sub	sp, sp, #12
 1691              	.LCFI48:
 1692              		.cfi_def_cfa_offset 16
 1693 0004 00AF     		add	r7, sp, #0
 1694              	.LCFI49:
 1695              		.cfi_def_cfa_register 7
 715:Src/mc_tasks.c ****   bool retVal = false;
 1696              		.loc 2 715 8
 1697 0006 0023     		movs	r3, #0
 1698 0008 FB71     		strb	r3, [r7, #7]
 716:Src/mc_tasks.c ****   if (((uint16_t)0) == hBootCapDelayCounterM1)
 1699              		.loc 2 716 21
 1700 000a 074B     		ldr	r3, .L85
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 58


 1701 000c 1B88     		ldrh	r3, [r3]	@ movhi
 1702 000e 9BB2     		uxth	r3, r3
 1703              		.loc 2 716 6
 1704 0010 002B     		cmp	r3, #0
 1705 0012 01D1     		bne	.L83
 717:Src/mc_tasks.c ****   {
 718:Src/mc_tasks.c ****     retVal = true;
 1706              		.loc 2 718 12
 1707 0014 0123     		movs	r3, #1
 1708 0016 FB71     		strb	r3, [r7, #7]
 1709              	.L83:
 719:Src/mc_tasks.c ****   }
 720:Src/mc_tasks.c ****   return (retVal);
 1710              		.loc 2 720 10
 1711 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 721:Src/mc_tasks.c **** }
 1712              		.loc 2 721 1
 1713 001a 1846     		mov	r0, r3
 1714 001c 0C37     		adds	r7, r7, #12
 1715              	.LCFI50:
 1716              		.cfi_def_cfa_offset 4
 1717 001e BD46     		mov	sp, r7
 1718              	.LCFI51:
 1719              		.cfi_def_cfa_register 13
 1720              		@ sp needed
 1721 0020 5DF8047B 		ldr	r7, [sp], #4
 1722              	.LCFI52:
 1723              		.cfi_restore 7
 1724              		.cfi_def_cfa_offset 0
 1725 0024 7047     		bx	lr
 1726              	.L86:
 1727 0026 00BF     		.align	2
 1728              	.L85:
 1729 0028 00000000 		.word	hBootCapDelayCounterM1
 1730              		.cfi_endproc
 1731              	.LFE1104:
 1733              		.section	.text.TSK_SetStopPermanencyTimeM1,"ax",%progbits
 1734              		.align	1
 1735              		.weak	TSK_SetStopPermanencyTimeM1
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1740              	TSK_SetStopPermanencyTimeM1:
 1741              	.LFB1105:
 722:Src/mc_tasks.c **** 
 723:Src/mc_tasks.c **** /**
 724:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the permanency
 725:Src/mc_tasks.c ****   *         time in STOP state of motor 1.
 726:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted.
 727:Src/mc_tasks.c ****   * @retval void
 728:Src/mc_tasks.c ****   */
 729:Src/mc_tasks.c **** __weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
 730:Src/mc_tasks.c **** {
 1742              		.loc 2 730 1
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 8
 1745              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 59


 1746              		@ link register save eliminated.
 1747 0000 80B4     		push	{r7}
 1748              	.LCFI53:
 1749              		.cfi_def_cfa_offset 4
 1750              		.cfi_offset 7, -4
 1751 0002 83B0     		sub	sp, sp, #12
 1752              	.LCFI54:
 1753              		.cfi_def_cfa_offset 16
 1754 0004 00AF     		add	r7, sp, #0
 1755              	.LCFI55:
 1756              		.cfi_def_cfa_register 7
 1757 0006 0346     		mov	r3, r0
 1758 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 731:Src/mc_tasks.c ****   hStopPermanencyCounterM1 = hTickCount;
 1759              		.loc 2 731 28
 1760 000a 044A     		ldr	r2, .L88
 1761 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 1762 000e 1380     		strh	r3, [r2]	@ movhi
 732:Src/mc_tasks.c **** }
 1763              		.loc 2 732 1
 1764 0010 00BF     		nop
 1765 0012 0C37     		adds	r7, r7, #12
 1766              	.LCFI56:
 1767              		.cfi_def_cfa_offset 4
 1768 0014 BD46     		mov	sp, r7
 1769              	.LCFI57:
 1770              		.cfi_def_cfa_register 13
 1771              		@ sp needed
 1772 0016 5DF8047B 		ldr	r7, [sp], #4
 1773              	.LCFI58:
 1774              		.cfi_restore 7
 1775              		.cfi_def_cfa_offset 0
 1776 001a 7047     		bx	lr
 1777              	.L89:
 1778              		.align	2
 1779              	.L88:
 1780 001c 00000000 		.word	hStopPermanencyCounterM1
 1781              		.cfi_endproc
 1782              	.LFE1105:
 1784              		.section	.text.TSK_StopPermanencyTimeHasElapsedM1,"ax",%progbits
 1785              		.align	1
 1786              		.weak	TSK_StopPermanencyTimeHasElapsedM1
 1787              		.syntax unified
 1788              		.thumb
 1789              		.thumb_func
 1791              	TSK_StopPermanencyTimeHasElapsedM1:
 1792              	.LFB1106:
 733:Src/mc_tasks.c **** 
 734:Src/mc_tasks.c **** /**
 735:Src/mc_tasks.c ****   * @brief  Use this function to know whether the permanency time in STOP state
 736:Src/mc_tasks.c ****   *         of motor 1 has elapsed.
 737:Src/mc_tasks.c ****   * @param  none
 738:Src/mc_tasks.c ****   * @retval bool true if time is elapsed, false otherwise.
 739:Src/mc_tasks.c ****   */
 740:Src/mc_tasks.c **** __weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
 741:Src/mc_tasks.c **** {
 1793              		.loc 2 741 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 60


 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 8
 1796              		@ frame_needed = 1, uses_anonymous_args = 0
 1797              		@ link register save eliminated.
 1798 0000 80B4     		push	{r7}
 1799              	.LCFI59:
 1800              		.cfi_def_cfa_offset 4
 1801              		.cfi_offset 7, -4
 1802 0002 83B0     		sub	sp, sp, #12
 1803              	.LCFI60:
 1804              		.cfi_def_cfa_offset 16
 1805 0004 00AF     		add	r7, sp, #0
 1806              	.LCFI61:
 1807              		.cfi_def_cfa_register 7
 742:Src/mc_tasks.c ****   bool retVal = false;
 1808              		.loc 2 742 8
 1809 0006 0023     		movs	r3, #0
 1810 0008 FB71     		strb	r3, [r7, #7]
 743:Src/mc_tasks.c ****   if (((uint16_t)0) == hStopPermanencyCounterM1)
 1811              		.loc 2 743 21
 1812 000a 074B     		ldr	r3, .L93
 1813 000c 1B88     		ldrh	r3, [r3]	@ movhi
 1814 000e 9BB2     		uxth	r3, r3
 1815              		.loc 2 743 6
 1816 0010 002B     		cmp	r3, #0
 1817 0012 01D1     		bne	.L91
 744:Src/mc_tasks.c ****   {
 745:Src/mc_tasks.c ****     retVal = true;
 1818              		.loc 2 745 12
 1819 0014 0123     		movs	r3, #1
 1820 0016 FB71     		strb	r3, [r7, #7]
 1821              	.L91:
 746:Src/mc_tasks.c ****   }
 747:Src/mc_tasks.c ****   return (retVal);
 1822              		.loc 2 747 10
 1823 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 748:Src/mc_tasks.c **** }
 1824              		.loc 2 748 1
 1825 001a 1846     		mov	r0, r3
 1826 001c 0C37     		adds	r7, r7, #12
 1827              	.LCFI62:
 1828              		.cfi_def_cfa_offset 4
 1829 001e BD46     		mov	sp, r7
 1830              	.LCFI63:
 1831              		.cfi_def_cfa_register 13
 1832              		@ sp needed
 1833 0020 5DF8047B 		ldr	r7, [sp], #4
 1834              	.LCFI64:
 1835              		.cfi_restore 7
 1836              		.cfi_def_cfa_offset 0
 1837 0024 7047     		bx	lr
 1838              	.L94:
 1839 0026 00BF     		.align	2
 1840              	.L93:
 1841 0028 00000000 		.word	hStopPermanencyCounterM1
 1842              		.cfi_endproc
 1843              	.LFE1106:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 61


 1845              		.section	.text.TSK_HighFrequencyTask,"ax",%progbits
 1846              		.align	1
 1847              		.weak	TSK_HighFrequencyTask
 1848              		.syntax unified
 1849              		.thumb
 1850              		.thumb_func
 1852              	TSK_HighFrequencyTask:
 1853              	.LFB1107:
 749:Src/mc_tasks.c **** 
 750:Src/mc_tasks.c **** #if defined (CCMRAM)
 751:Src/mc_tasks.c **** #if defined (__ICCARM__)
 752:Src/mc_tasks.c **** #pragma location = ".ccmram"
 753:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 754:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 755:Src/mc_tasks.c **** #endif
 756:Src/mc_tasks.c **** #endif
 757:Src/mc_tasks.c **** 
 758:Src/mc_tasks.c **** extern ADC_HandleTypeDef hadc2;
 759:Src/mc_tasks.c **** 
 760:Src/mc_tasks.c **** /**
 761:Src/mc_tasks.c ****   * @brief  Executes the Motor Control duties that require a high frequency rate and a precise timi
 762:Src/mc_tasks.c ****   *
 763:Src/mc_tasks.c ****   *  This is mainly the FOC current control loop. It is executed depending on the state of the Moto
 764:Src/mc_tasks.c ****   * subsystem (see the state machine(s)).
 765:Src/mc_tasks.c ****   *
 766:Src/mc_tasks.c ****   * @retval Number of the  motor instance which FOC loop was executed.
 767:Src/mc_tasks.c ****   */
 768:Src/mc_tasks.c **** __weak uint8_t TSK_HighFrequencyTask(void)
 769:Src/mc_tasks.c **** {
 1854              		.loc 2 769 1
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 24
 1857              		@ frame_needed = 1, uses_anonymous_args = 0
 1858 0000 80B5     		push	{r7, lr}
 1859              	.LCFI65:
 1860              		.cfi_def_cfa_offset 8
 1861              		.cfi_offset 7, -8
 1862              		.cfi_offset 14, -4
 1863 0002 86B0     		sub	sp, sp, #24
 1864              	.LCFI66:
 1865              		.cfi_def_cfa_offset 32
 1866 0004 00AF     		add	r7, sp, #0
 1867              	.LCFI67:
 1868              		.cfi_def_cfa_register 7
 770:Src/mc_tasks.c **** 
 771:Src/mc_tasks.c ****   uint16_t hFOCreturn;
 772:Src/mc_tasks.c ****   uint8_t bMotorNbr = 0;
 1869              		.loc 2 772 11
 1870 0006 0023     		movs	r3, #0
 1871 0008 FB75     		strb	r3, [r7, #23]
 773:Src/mc_tasks.c ****   uint32_t adcValue1, adcValue2, adcValue3;
 774:Src/mc_tasks.c ****   MC_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 1872              		.loc 2 774 3
 1873 000a 0021     		movs	r1, #0
 1874 000c 1F48     		ldr	r0, .L100
 1875 000e FFF7FEFF 		bl	MC_Perf_Measure_Start
 775:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 0 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 62


 776:Src/mc_tasks.c **** 
 777:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 0 */
 778:Src/mc_tasks.c **** 
 779:Src/mc_tasks.c ****   //(void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 780:Src/mc_tasks.c **** 
 781:Src/mc_tasks.c ****   // if (LL_ADC_IsActiveFlag_EOS(ADC2) )
 782:Src/mc_tasks.c ****   // {
 783:Src/mc_tasks.c ****   //   LL_ADC_ClearFlag_EOS( ADC2 );
 784:Src/mc_tasks.c ****   //   adcValue1 = HAL_ADC_GetValue()
 785:Src/mc_tasks.c ****   //   adcValue2 = HAL_ADC_GetValue();
 786:Src/mc_tasks.c ****   //   adcValue3 = HAL_ADC_GetValue();
 787:Src/mc_tasks.c **** 
 788:Src/mc_tasks.c **** 
 789:Src/mc_tasks.c ****   //   (void)HALL_CalcAngle(&HALL_M1);
 790:Src/mc_tasks.c ****   //   // Add your code here
 791:Src/mc_tasks.c ****   // }
 792:Src/mc_tasks.c **** 
 793:Src/mc_tasks.c ****     if (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOS))
 1876              		.loc 2 793 9
 1877 0012 1F4B     		ldr	r3, .L100+4
 1878 0014 1B68     		ldr	r3, [r3]
 1879 0016 1B68     		ldr	r3, [r3]
 1880 0018 03F00803 		and	r3, r3, #8
 1881              		.loc 2 793 8
 1882 001c 082B     		cmp	r3, #8
 1883 001e 12D1     		bne	.L96
 794:Src/mc_tasks.c ****     {
 795:Src/mc_tasks.c ****         // EOS est actif, on peut lire les valeurs
 796:Src/mc_tasks.c ****         adcValue1 = HAL_ADC_GetValue(&hadc2); // Lecture de la première valeur
 1884              		.loc 2 796 21
 1885 0020 1B48     		ldr	r0, .L100+4
 1886 0022 FFF7FEFF 		bl	HAL_ADC_GetValue
 1887 0026 3861     		str	r0, [r7, #16]
 797:Src/mc_tasks.c ****         adcValue2 = HAL_ADC_GetValue(&hadc2); // Lecture de la deuxième valeur
 1888              		.loc 2 797 21
 1889 0028 1948     		ldr	r0, .L100+4
 1890 002a FFF7FEFF 		bl	HAL_ADC_GetValue
 1891 002e F860     		str	r0, [r7, #12]
 798:Src/mc_tasks.c ****         adcValue3 = HAL_ADC_GetValue(&hadc2); // Lecture de la troisième valeur
 1892              		.loc 2 798 21
 1893 0030 1748     		ldr	r0, .L100+4
 1894 0032 FFF7FEFF 		bl	HAL_ADC_GetValue
 1895 0036 B860     		str	r0, [r7, #8]
 799:Src/mc_tasks.c **** 
 800:Src/mc_tasks.c ****         (void)HALL_CalcAngle(&HALL_M1);
 1896              		.loc 2 800 15
 1897 0038 1648     		ldr	r0, .L100+8
 1898 003a FFF7FEFF 		bl	HALL_CalcAngle
 801:Src/mc_tasks.c **** 
 802:Src/mc_tasks.c ****         __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_EOS);
 1899              		.loc 2 802 9
 1900 003e 144B     		ldr	r3, .L100+4
 1901 0040 1B68     		ldr	r3, [r3]
 1902 0042 0822     		movs	r2, #8
 1903 0044 1A60     		str	r2, [r3]
 1904              	.L96:
 803:Src/mc_tasks.c ****     }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 63


 804:Src/mc_tasks.c **** 
 805:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */
 806:Src/mc_tasks.c **** 
 807:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
 808:Src/mc_tasks.c ****   hFOCreturn = FOC_CurrControllerM1();
 1905              		.loc 2 808 16
 1906 0046 FFF7FEFF 		bl	FOC_CurrControllerM1
 1907 004a 0346     		mov	r3, r0
 1908 004c FB80     		strh	r3, [r7, #6]	@ movhi
 809:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */
 810:Src/mc_tasks.c **** 
 811:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
 812:Src/mc_tasks.c ****   if(hFOCreturn == MC_DURATION)
 1909              		.loc 2 812 5
 1910 004e FB88     		ldrh	r3, [r7, #6]
 1911 0050 012B     		cmp	r3, #1
 1912 0052 04D1     		bne	.L97
 813:Src/mc_tasks.c ****   {
 814:Src/mc_tasks.c ****     MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 1913              		.loc 2 814 5
 1914 0054 0022     		movs	r2, #0
 1915 0056 0121     		movs	r1, #1
 1916 0058 0F48     		ldr	r0, .L100+12
 1917 005a FFF7FEFF 		bl	MCI_FaultProcessing
 1918              	.L97:
 815:Src/mc_tasks.c ****   }
 816:Src/mc_tasks.c ****   else
 817:Src/mc_tasks.c ****   {
 818:Src/mc_tasks.c ****     /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_3 */
 819:Src/mc_tasks.c **** 
 820:Src/mc_tasks.c ****     /* USER CODE END HighFrequencyTask SINGLEDRIVE_3 */
 821:Src/mc_tasks.c ****   }
 822:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 1 */
 823:Src/mc_tasks.c **** 
 824:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 1 */
 825:Src/mc_tasks.c **** 
 826:Src/mc_tasks.c ****   GLOBAL_TIMESTAMP++;
 1919              		.loc 2 826 19
 1920 005e 0F4B     		ldr	r3, .L100+16
 1921 0060 1B68     		ldr	r3, [r3]
 1922 0062 0133     		adds	r3, r3, #1
 1923 0064 0D4A     		ldr	r2, .L100+16
 1924 0066 1360     		str	r3, [r2]
 827:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 1925              		.loc 2 827 24
 1926 0068 0D4B     		ldr	r3, .L100+20
 1927 006a 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 1928              		.loc 2 827 6
 1929 006e 002B     		cmp	r3, #0
 1930 0070 02D0     		beq	.L98
 828:Src/mc_tasks.c ****   {
 829:Src/mc_tasks.c ****     /* Nothing to do */
 830:Src/mc_tasks.c ****   }
 831:Src/mc_tasks.c ****   else
 832:Src/mc_tasks.c ****   {
 833:Src/mc_tasks.c ****     MCPA_dataLog (&MCPA_UART_A);
 1931              		.loc 2 833 5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 64


 1932 0072 0B48     		ldr	r0, .L100+20
 1933 0074 FFF7FEFF 		bl	MCPA_dataLog
 1934              	.L98:
 834:Src/mc_tasks.c ****   }
 835:Src/mc_tasks.c **** 
 836:Src/mc_tasks.c ****   MC_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 1935              		.loc 2 836 3
 1936 0078 0021     		movs	r1, #0
 1937 007a 0448     		ldr	r0, .L100
 1938 007c FFF7FEFF 		bl	MC_Perf_Measure_Stop
 837:Src/mc_tasks.c ****   return (bMotorNbr);
 1939              		.loc 2 837 10
 1940 0080 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 838:Src/mc_tasks.c **** 
 839:Src/mc_tasks.c **** }
 1941              		.loc 2 839 1
 1942 0082 1846     		mov	r0, r3
 1943 0084 1837     		adds	r7, r7, #24
 1944              	.LCFI68:
 1945              		.cfi_def_cfa_offset 8
 1946 0086 BD46     		mov	sp, r7
 1947              	.LCFI69:
 1948              		.cfi_def_cfa_register 13
 1949              		@ sp needed
 1950 0088 80BD     		pop	{r7, pc}
 1951              	.L101:
 1952 008a 00BF     		.align	2
 1953              	.L100:
 1954 008c 00000000 		.word	PerfTraces
 1955 0090 00000000 		.word	hadc2
 1956 0094 00000000 		.word	HALL_M1
 1957 0098 00000000 		.word	Mci
 1958 009c 00000000 		.word	GLOBAL_TIMESTAMP
 1959 00a0 00000000 		.word	MCPA_UART_A
 1960              		.cfi_endproc
 1961              	.LFE1107:
 1963              		.section	.text.FOC_CurrControllerM1,"ax",%progbits
 1964              		.align	1
 1965              		.syntax unified
 1966              		.thumb
 1967              		.thumb_func
 1969              	FOC_CurrControllerM1:
 1970              	.LFB1108:
 840:Src/mc_tasks.c **** 
 841:Src/mc_tasks.c **** #if defined (CCMRAM)
 842:Src/mc_tasks.c **** #if defined (__ICCARM__)
 843:Src/mc_tasks.c **** #pragma location = ".ccmram"
 844:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 845:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 846:Src/mc_tasks.c **** #endif
 847:Src/mc_tasks.c **** #endif
 848:Src/mc_tasks.c **** /**
 849:Src/mc_tasks.c ****   * @brief It executes the core of FOC drive that is the controllers for Iqd
 850:Src/mc_tasks.c ****   *        currents regulation. Reference frame transformations are carried out
 851:Src/mc_tasks.c ****   *        accordingly to the active speed sensor. It must be called periodically
 852:Src/mc_tasks.c ****   *        when new motor currents have been converted
 853:Src/mc_tasks.c ****   * @param this related object of class CFOC.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 65


 854:Src/mc_tasks.c ****   * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
 855:Src/mc_tasks.c ****   *         next PWM Update event, MC_DURATION otherwise
 856:Src/mc_tasks.c ****   */
 857:Src/mc_tasks.c **** inline uint16_t FOC_CurrControllerM1(void)
 858:Src/mc_tasks.c **** {
 1971              		.loc 2 858 1
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 32
 1974              		@ frame_needed = 1, uses_anonymous_args = 0
 1975 0000 80B5     		push	{r7, lr}
 1976              	.LCFI70:
 1977              		.cfi_def_cfa_offset 8
 1978              		.cfi_offset 7, -8
 1979              		.cfi_offset 14, -4
 1980 0002 88B0     		sub	sp, sp, #32
 1981              	.LCFI71:
 1982              		.cfi_def_cfa_offset 40
 1983 0004 00AF     		add	r7, sp, #0
 1984              	.LCFI72:
 1985              		.cfi_def_cfa_register 7
 859:Src/mc_tasks.c ****   qd_t Iqd, Vqd;
 860:Src/mc_tasks.c ****   ab_t Iab;
 861:Src/mc_tasks.c ****   alphabeta_t Ialphabeta, Valphabeta;
 862:Src/mc_tasks.c ****   int16_t hElAngle;
 863:Src/mc_tasks.c ****   uint16_t hCodeError;
 864:Src/mc_tasks.c ****   SpeednPosFdbk_Handle_t *speedHandle;
 865:Src/mc_tasks.c ****   speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 1986              		.loc 2 865 17
 1987 0006 3C4B     		ldr	r3, .L104
 1988 0008 1B68     		ldr	r3, [r3]
 1989 000a 1846     		mov	r0, r3
 1990 000c FFF7FEFF 		bl	STC_GetSpeedSensor
 1991 0010 F861     		str	r0, [r7, #28]
 866:Src/mc_tasks.c ****   hElAngle = SPD_GetElAngle(speedHandle);
 1992              		.loc 2 866 14
 1993 0012 F869     		ldr	r0, [r7, #28]
 1994 0014 FFF7FEFF 		bl	SPD_GetElAngle
 1995 0018 0346     		mov	r3, r0
 1996 001a 7B83     		strh	r3, [r7, #26]	@ movhi
 867:Src/mc_tasks.c ****   PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 1997              		.loc 2 867 3
 1998 001c 374B     		ldr	r3, .L104+4
 1999 001e 1B68     		ldr	r3, [r3]
 2000 0020 07F10C02 		add	r2, r7, #12
 2001 0024 1146     		mov	r1, r2
 2002 0026 1846     		mov	r0, r3
 2003 0028 FFF7FEFF 		bl	PWMC_GetPhaseCurrents
 868:Src/mc_tasks.c ****   Ialphabeta = MCM_Clarke(Iab);
 2004              		.loc 2 868 16
 2005 002c F868     		ldr	r0, [r7, #12]
 2006 002e FFF7FEFF 		bl	MCM_Clarke
 2007 0032 0346     		mov	r3, r0
 2008 0034 BB60     		str	r3, [r7, #8]
 869:Src/mc_tasks.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 2009              		.loc 2 869 9
 2010 0036 B7F91A30 		ldrsh	r3, [r7, #26]
 2011 003a 1946     		mov	r1, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 66


 2012 003c B868     		ldr	r0, [r7, #8]
 2013 003e FFF7FEFF 		bl	MCM_Park
 2014 0042 0346     		mov	r3, r0
 2015 0044 7B61     		str	r3, [r7, #20]
 870:Src/mc_tasks.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 2016              		.loc 2 870 11
 2017 0046 2E4B     		ldr	r3, .L104+8
 2018 0048 1B68     		ldr	r3, [r3]
 2019              		.loc 2 870 65
 2020 004a 2E4A     		ldr	r2, .L104+12
 2021 004c B2F91020 		ldrsh	r2, [r2, #16]
 2022              		.loc 2 870 37
 2023 0050 1146     		mov	r1, r2
 2024              		.loc 2 870 74
 2025 0052 B7F91420 		ldrsh	r2, [r7, #20]
 2026              		.loc 2 870 11
 2027 0056 8A1A     		subs	r2, r1, r2
 2028 0058 1146     		mov	r1, r2
 2029 005a 1846     		mov	r0, r3
 2030 005c FFF7FEFF 		bl	PI_Controller
 2031 0060 0346     		mov	r3, r0
 2032              		.loc 2 870 9
 2033 0062 3B82     		strh	r3, [r7, #16]	@ movhi
 871:Src/mc_tasks.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 2034              		.loc 2 871 11
 2035 0064 284B     		ldr	r3, .L104+16
 2036 0066 1B68     		ldr	r3, [r3]
 2037              		.loc 2 871 65
 2038 0068 264A     		ldr	r2, .L104+12
 2039 006a B2F91220 		ldrsh	r2, [r2, #18]
 2040              		.loc 2 871 37
 2041 006e 1146     		mov	r1, r2
 2042              		.loc 2 871 74
 2043 0070 B7F91620 		ldrsh	r2, [r7, #22]
 2044              		.loc 2 871 11
 2045 0074 8A1A     		subs	r2, r1, r2
 2046 0076 1146     		mov	r1, r2
 2047 0078 1846     		mov	r0, r3
 2048 007a FFF7FEFF 		bl	PI_Controller
 2049 007e 0346     		mov	r3, r0
 2050              		.loc 2 871 9
 2051 0080 7B82     		strh	r3, [r7, #18]	@ movhi
 872:Src/mc_tasks.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 2052              		.loc 2 872 9
 2053 0082 3969     		ldr	r1, [r7, #16]
 2054 0084 2148     		ldr	r0, .L104+20
 2055 0086 FFF7FEFF 		bl	Circle_Limitation
 2056 008a 0346     		mov	r3, r0
 2057 008c 3B61     		str	r3, [r7, #16]
 873:Src/mc_tasks.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 2058              		.loc 2 873 15
 2059 008e F869     		ldr	r0, [r7, #28]
 2060 0090 FFF7FEFF 		bl	SPD_GetInstElSpeedDpp
 2061              		.loc 2 873 49
 2062 0094 0023     		movs	r3, #0
 2063              		.loc 2 873 12
 2064 0096 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 67


 2065 0098 7B8B     		ldrh	r3, [r7, #26]
 2066 009a 1344     		add	r3, r3, r2
 2067 009c 9BB2     		uxth	r3, r3
 2068 009e 7B83     		strh	r3, [r7, #26]	@ movhi
 874:Src/mc_tasks.c ****   Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 2069              		.loc 2 874 16
 2070 00a0 B7F91A30 		ldrsh	r3, [r7, #26]
 2071 00a4 1946     		mov	r1, r3
 2072 00a6 3869     		ldr	r0, [r7, #16]
 2073 00a8 FFF7FEFF 		bl	MCM_Rev_Park
 2074 00ac 0346     		mov	r3, r0
 2075 00ae 7B60     		str	r3, [r7, #4]
 875:Src/mc_tasks.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 2076              		.loc 2 875 16
 2077 00b0 124B     		ldr	r3, .L104+4
 2078 00b2 1B68     		ldr	r3, [r3]
 2079 00b4 7968     		ldr	r1, [r7, #4]
 2080 00b6 1846     		mov	r0, r3
 2081 00b8 FFF7FEFF 		bl	PWMC_SetPhaseVoltage
 2082 00bc 0346     		mov	r3, r0
 2083 00be 3B83     		strh	r3, [r7, #24]	@ movhi
 876:Src/mc_tasks.c **** 
 877:Src/mc_tasks.c ****   FOCVars[M1].Vqd = Vqd;
 2084              		.loc 2 877 19
 2085 00c0 104B     		ldr	r3, .L104+12
 2086 00c2 1633     		adds	r3, r3, #22
 2087 00c4 07F11002 		add	r2, r7, #16
 2088 00c8 1068     		ldr	r0, [r2]
 2089 00ca 1860     		str	r0, [r3]	@ unaligned
 878:Src/mc_tasks.c ****   FOCVars[M1].Iab = Iab;
 2090              		.loc 2 878 19
 2091 00cc 0D4A     		ldr	r2, .L104+12
 2092 00ce FB68     		ldr	r3, [r7, #12]
 2093 00d0 1360     		str	r3, [r2]
 879:Src/mc_tasks.c ****   FOCVars[M1].Ialphabeta = Ialphabeta;
 2094              		.loc 2 879 26
 2095 00d2 0C4A     		ldr	r2, .L104+12
 2096 00d4 BB68     		ldr	r3, [r7, #8]
 2097 00d6 5360     		str	r3, [r2, #4]
 880:Src/mc_tasks.c ****   FOCVars[M1].Iqd = Iqd;
 2098              		.loc 2 880 19
 2099 00d8 0A4A     		ldr	r2, .L104+12
 2100 00da 7B69     		ldr	r3, [r7, #20]
 2101 00dc D360     		str	r3, [r2, #12]
 881:Src/mc_tasks.c ****   FOCVars[M1].Valphabeta = Valphabeta;
 2102              		.loc 2 881 26
 2103 00de 094B     		ldr	r3, .L104+12
 2104 00e0 1A33     		adds	r3, r3, #26
 2105 00e2 3A1D     		adds	r2, r7, #4
 2106 00e4 1068     		ldr	r0, [r2]
 2107 00e6 1860     		str	r0, [r3]	@ unaligned
 882:Src/mc_tasks.c ****   FOCVars[M1].hElAngle = hElAngle;
 2108              		.loc 2 882 24
 2109 00e8 064A     		ldr	r2, .L104+12
 2110 00ea 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 2111 00ec 1384     		strh	r3, [r2, #32]	@ movhi
 883:Src/mc_tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 68


 884:Src/mc_tasks.c ****   return (hCodeError);
 2112              		.loc 2 884 10
 2113 00ee 3B8B     		ldrh	r3, [r7, #24]
 885:Src/mc_tasks.c **** }
 2114              		.loc 2 885 1
 2115 00f0 1846     		mov	r0, r3
 2116 00f2 2037     		adds	r7, r7, #32
 2117              	.LCFI73:
 2118              		.cfi_def_cfa_offset 8
 2119 00f4 BD46     		mov	sp, r7
 2120              	.LCFI74:
 2121              		.cfi_def_cfa_register 13
 2122              		@ sp needed
 2123 00f6 80BD     		pop	{r7, pc}
 2124              	.L105:
 2125              		.align	2
 2126              	.L104:
 2127 00f8 00000000 		.word	pSTC
 2128 00fc 00000000 		.word	pwmcHandle
 2129 0100 00000000 		.word	pPIDIq
 2130 0104 00000000 		.word	FOCVars
 2131 0108 00000000 		.word	pPIDId
 2132 010c 00000000 		.word	CircleLimitationM1
 2133              		.cfi_endproc
 2134              	.LFE1108:
 2136              		.section	.text.TSK_SafetyTask,"ax",%progbits
 2137              		.align	1
 2138              		.weak	TSK_SafetyTask
 2139              		.syntax unified
 2140              		.thumb
 2141              		.thumb_func
 2143              	TSK_SafetyTask:
 2144              	.LFB1109:
 886:Src/mc_tasks.c **** 
 887:Src/mc_tasks.c **** /**
 888:Src/mc_tasks.c ****   * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
 889:Src/mc_tasks.c ****   *
 890:Src/mc_tasks.c ****   * Faults flags are updated here.
 891:Src/mc_tasks.c ****   */
 892:Src/mc_tasks.c **** __weak void TSK_SafetyTask(void)
 893:Src/mc_tasks.c **** {
 2145              		.loc 2 893 1
 2146              		.cfi_startproc
 2147              		@ args = 0, pretend = 0, frame = 0
 2148              		@ frame_needed = 1, uses_anonymous_args = 0
 2149 0000 80B5     		push	{r7, lr}
 2150              	.LCFI75:
 2151              		.cfi_def_cfa_offset 8
 2152              		.cfi_offset 7, -8
 2153              		.cfi_offset 14, -4
 2154 0002 00AF     		add	r7, sp, #0
 2155              	.LCFI76:
 2156              		.cfi_def_cfa_register 7
 894:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 0 */
 895:Src/mc_tasks.c **** 
 896:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 0 */
 897:Src/mc_tasks.c ****   if (1U == bMCBootCompleted)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 69


 2157              		.loc 2 897 10
 2158 0004 054B     		ldr	r3, .L109
 2159 0006 1B78     		ldrb	r3, [r3]
 2160 0008 DBB2     		uxtb	r3, r3
 2161              		.loc 2 897 6
 2162 000a 012B     		cmp	r3, #1
 2163 000c 04D1     		bne	.L108
 898:Src/mc_tasks.c ****   {
 899:Src/mc_tasks.c ****     TSK_SafetyTask_PWMOFF(M1);
 2164              		.loc 2 899 5
 2165 000e 0020     		movs	r0, #0
 2166 0010 FFF7FEFF 		bl	TSK_SafetyTask_PWMOFF
 900:Src/mc_tasks.c ****     /* User conversion execution */
 901:Src/mc_tasks.c ****     RCM_ExecUserConv();
 2167              		.loc 2 901 5
 2168 0014 FFF7FEFF 		bl	RCM_ExecUserConv
 2169              	.L108:
 902:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 1 */
 903:Src/mc_tasks.c **** 
 904:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 1 */
 905:Src/mc_tasks.c ****   }
 906:Src/mc_tasks.c ****   else
 907:Src/mc_tasks.c ****   {
 908:Src/mc_tasks.c ****     /* Nothing to do */
 909:Src/mc_tasks.c ****   }
 910:Src/mc_tasks.c **** }
 2170              		.loc 2 910 1
 2171 0018 00BF     		nop
 2172 001a 80BD     		pop	{r7, pc}
 2173              	.L110:
 2174              		.align	2
 2175              	.L109:
 2176 001c 00000000 		.word	bMCBootCompleted
 2177              		.cfi_endproc
 2178              	.LFE1109:
 2180              		.section	.text.TSK_SafetyTask_PWMOFF,"ax",%progbits
 2181              		.align	1
 2182              		.weak	TSK_SafetyTask_PWMOFF
 2183              		.syntax unified
 2184              		.thumb
 2185              		.thumb_func
 2187              	TSK_SafetyTask_PWMOFF:
 2188              	.LFB1110:
 911:Src/mc_tasks.c **** 
 912:Src/mc_tasks.c **** /**
 913:Src/mc_tasks.c ****   * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
 914:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 915:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink.
 916:Src/mc_tasks.c ****   */
 917:Src/mc_tasks.c **** __weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
 918:Src/mc_tasks.c **** {
 2189              		.loc 2 918 1
 2190              		.cfi_startproc
 2191              		@ args = 0, pretend = 0, frame = 16
 2192              		@ frame_needed = 1, uses_anonymous_args = 0
 2193 0000 90B5     		push	{r4, r7, lr}
 2194              	.LCFI77:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 70


 2195              		.cfi_def_cfa_offset 12
 2196              		.cfi_offset 4, -12
 2197              		.cfi_offset 7, -8
 2198              		.cfi_offset 14, -4
 2199 0002 85B0     		sub	sp, sp, #20
 2200              	.LCFI78:
 2201              		.cfi_def_cfa_offset 32
 2202 0004 00AF     		add	r7, sp, #0
 2203              	.LCFI79:
 2204              		.cfi_def_cfa_register 7
 2205 0006 0346     		mov	r3, r0
 2206 0008 FB71     		strb	r3, [r7, #7]
 919:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */
 920:Src/mc_tasks.c **** 
 921:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
 922:Src/mc_tasks.c ****   uint16_t CodeReturn = MC_NO_ERROR;
 2207              		.loc 2 922 12
 2208 000a 0023     		movs	r3, #0
 2209 000c FB81     		strh	r3, [r7, #14]	@ movhi
 923:Src/mc_tasks.c ****   const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 2210              		.loc 2 923 18
 2211 000e 0E23     		movs	r3, #14
 2212 0010 3B81     		strh	r3, [r7, #8]	@ movhi
 924:Src/mc_tasks.c ****   /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 925:Src/mc_tasks.c ****   if (M1 == bMotor)
 2213              		.loc 2 925 6
 2214 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2215 0014 002B     		cmp	r3, #0
 2216 0016 18D1     		bne	.L112
 2217              	.LBB5:
 926:Src/mc_tasks.c ****   {
 927:Src/mc_tasks.c ****     uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 2218              		.loc 2 927 27
 2219 0018 4348     		ldr	r0, .L118
 2220 001a FFF7FEFF 		bl	RCM_ExecRegularConv
 2221 001e 0346     		mov	r3, r0
 2222 0020 BB81     		strh	r3, [r7, #12]	@ movhi
 928:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 2223              		.loc 2 928 26
 2224 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2225 0024 5B00     		lsls	r3, r3, #1
 2226 0026 1033     		adds	r3, r3, #16
 2227 0028 3B44     		add	r3, r3, r7
 2228 002a 33F8084C 		ldrh	r4, [r3, #-8]
 2229              		.loc 2 928 37
 2230 002e BB89     		ldrh	r3, [r7, #12]
 2231 0030 1946     		mov	r1, r3
 2232 0032 3E48     		ldr	r0, .L118+4
 2233 0034 FFF7FEFF 		bl	NTC_CalcAvTemp
 2234 0038 0346     		mov	r3, r0
 2235              		.loc 2 928 35
 2236 003a 2340     		ands	r3, r3, r4
 2237 003c 9BB2     		uxth	r3, r3
 2238              		.loc 2 928 16
 2239 003e 1AB2     		sxth	r2, r3
 2240 0040 B7F90E30 		ldrsh	r3, [r7, #14]
 2241 0044 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 71


 2242 0046 1BB2     		sxth	r3, r3
 2243 0048 FB81     		strh	r3, [r7, #14]	@ movhi
 2244              	.L112:
 2245              	.LBE5:
 929:Src/mc_tasks.c ****   }
 930:Src/mc_tasks.c ****   else
 931:Src/mc_tasks.c ****   {
 932:Src/mc_tasks.c ****     /* Nothing to do */
 933:Src/mc_tasks.c ****   }
 934:Src/mc_tasks.c ****   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER
 2246              		.loc 2 934 17
 2247 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2248 004c 384A     		ldr	r2, .L118+8
 2249 004e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2250 0052 1846     		mov	r0, r3
 2251 0054 FFF7FEFF 		bl	PWMC_IsFaultOccurred
 2252 0058 0346     		mov	r3, r0
 2253 005a 1A46     		mov	r2, r3
 2254              		.loc 2 934 14
 2255 005c FB89     		ldrh	r3, [r7, #14]	@ movhi
 2256 005e 1343     		orrs	r3, r3, r2
 2257 0060 FB81     		strh	r3, [r7, #14]	@ movhi
 935:Src/mc_tasks.c ****                                                     (for STM32F30x can return MC_OVER_VOLT in case 
 936:Src/mc_tasks.c ****   if (M1 == bMotor)
 2258              		.loc 2 936 6
 2259 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2260 0064 002B     		cmp	r3, #0
 2261 0066 18D1     		bne	.L113
 2262              	.LBB6:
 937:Src/mc_tasks.c ****   {
 938:Src/mc_tasks.c ****     uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 2263              		.loc 2 938 28
 2264 0068 3248     		ldr	r0, .L118+12
 2265 006a FFF7FEFF 		bl	RCM_ExecRegularConv
 2266 006e 0346     		mov	r3, r0
 2267 0070 7B81     		strh	r3, [r7, #10]	@ movhi
 939:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 2268              		.loc 2 939 26
 2269 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2270 0074 5B00     		lsls	r3, r3, #1
 2271 0076 1033     		adds	r3, r3, #16
 2272 0078 3B44     		add	r3, r3, r7
 2273 007a 33F8084C 		ldrh	r4, [r3, #-8]
 2274              		.loc 2 939 37
 2275 007e 7B89     		ldrh	r3, [r7, #10]
 2276 0080 1946     		mov	r1, r3
 2277 0082 2D48     		ldr	r0, .L118+16
 2278 0084 FFF7FEFF 		bl	RVBS_CalcAvVbus
 2279 0088 0346     		mov	r3, r0
 2280              		.loc 2 939 35
 2281 008a 2340     		ands	r3, r3, r4
 2282 008c 9BB2     		uxth	r3, r3
 2283              		.loc 2 939 16
 2284 008e 1AB2     		sxth	r2, r3
 2285 0090 B7F90E30 		ldrsh	r3, [r7, #14]
 2286 0094 1343     		orrs	r3, r3, r2
 2287 0096 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 72


 2288 0098 FB81     		strh	r3, [r7, #14]	@ movhi
 2289              	.L113:
 2290              	.LBE6:
 940:Src/mc_tasks.c ****   }
 941:Src/mc_tasks.c ****   else
 942:Src/mc_tasks.c ****   {
 943:Src/mc_tasks.c ****     /* Nothing to do */
 944:Src/mc_tasks.c ****   }
 945:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 2291              		.loc 2 945 27
 2292 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2293              		.loc 2 945 3
 2294 009c 1346     		mov	r3, r2
 2295 009e 5B00     		lsls	r3, r3, #1
 2296 00a0 1344     		add	r3, r3, r2
 2297 00a2 1B01     		lsls	r3, r3, #4
 2298 00a4 254A     		ldr	r2, .L118+20
 2299 00a6 9818     		adds	r0, r3, r2
 2300 00a8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2301 00aa DB43     		mvns	r3, r3
 2302 00ac 9AB2     		uxth	r2, r3
 2303 00ae FB89     		ldrh	r3, [r7, #14]
 2304 00b0 1946     		mov	r1, r3
 2305 00b2 FFF7FEFF 		bl	MCI_FaultProcessing
 946:Src/mc_tasks.c **** 
 947:Src/mc_tasks.c ****   if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 2306              		.loc 2 947 29
 2307 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2308              		.loc 2 947 7
 2309 00b8 1346     		mov	r3, r2
 2310 00ba 5B00     		lsls	r3, r3, #1
 2311 00bc 1344     		add	r3, r3, r2
 2312 00be 1B01     		lsls	r3, r3, #4
 2313 00c0 1E4A     		ldr	r2, .L118+20
 2314 00c2 1344     		add	r3, r3, r2
 2315 00c4 1846     		mov	r0, r3
 2316 00c6 FFF7FEFF 		bl	MCI_GetFaultState
 2317 00ca 0346     		mov	r3, r0
 2318              		.loc 2 947 6
 2319 00cc 002B     		cmp	r3, #0
 2320 00ce 27D0     		beq	.L117
 948:Src/mc_tasks.c ****   {
 949:Src/mc_tasks.c ****     /* Reset Encoder state */
 950:Src/mc_tasks.c ****     if (pEAC[bMotor] != MC_NULL)
 2321              		.loc 2 950 13
 2322 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2323 00d2 1B4A     		ldr	r2, .L118+24
 2324 00d4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2325              		.loc 2 950 8
 2326 00d8 002B     		cmp	r3, #0
 2327 00da 07D0     		beq	.L115
 951:Src/mc_tasks.c ****     {
 952:Src/mc_tasks.c ****       EAC_SetRestartState(pEAC[bMotor], false);
 2328              		.loc 2 952 7
 2329 00dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2330 00de 184A     		ldr	r2, .L118+24
 2331 00e0 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 73


 2332 00e4 0021     		movs	r1, #0
 2333 00e6 1846     		mov	r0, r3
 2334 00e8 FFF7FEFF 		bl	EAC_SetRestartState
 2335              	.L115:
 953:Src/mc_tasks.c ****     }
 954:Src/mc_tasks.c ****     else
 955:Src/mc_tasks.c ****     {
 956:Src/mc_tasks.c ****       /* Nothing to do */
 957:Src/mc_tasks.c ****     }
 958:Src/mc_tasks.c ****     PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 2336              		.loc 2 958 5
 2337 00ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2338 00ee 104A     		ldr	r2, .L118+8
 2339 00f0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2340 00f4 1846     		mov	r0, r3
 2341 00f6 FFF7FEFF 		bl	PWMC_SwitchOffPWM
 959:Src/mc_tasks.c ****     if (MCPA_UART_A.Mark != 0U)
 2342              		.loc 2 959 20
 2343 00fa 124B     		ldr	r3, .L118+28
 2344 00fc 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 2345              		.loc 2 959 8
 2346 0100 002B     		cmp	r3, #0
 2347 0102 02D0     		beq	.L116
 960:Src/mc_tasks.c ****     {
 961:Src/mc_tasks.c ****       MCPA_flushDataLog (&MCPA_UART_A);
 2348              		.loc 2 961 7
 2349 0104 0F48     		ldr	r0, .L118+28
 2350 0106 FFF7FEFF 		bl	MCPA_flushDataLog
 2351              	.L116:
 962:Src/mc_tasks.c ****     }
 963:Src/mc_tasks.c ****     else
 964:Src/mc_tasks.c ****     {
 965:Src/mc_tasks.c ****       /* Nothing to do */
 966:Src/mc_tasks.c ****     }
 967:Src/mc_tasks.c ****     FOC_Clear(bMotor);
 2352              		.loc 2 967 5
 2353 010a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2354 010c 1846     		mov	r0, r3
 2355 010e FFF7FEFF 		bl	FOC_Clear
 968:Src/mc_tasks.c ****     PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 2356              		.loc 2 968 5
 2357 0112 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2358 0114 0C4A     		ldr	r2, .L118+32
 2359 0116 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2360 011a 1846     		mov	r0, r3
 2361 011c FFF7FEFF 		bl	PQD_Clear
 2362              	.L117:
 969:Src/mc_tasks.c ****     /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */
 970:Src/mc_tasks.c **** 
 971:Src/mc_tasks.c ****     /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
 972:Src/mc_tasks.c ****   }
 973:Src/mc_tasks.c ****   else
 974:Src/mc_tasks.c ****   {
 975:Src/mc_tasks.c ****     /* No errors */
 976:Src/mc_tasks.c ****   }
 977:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */
 978:Src/mc_tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 74


 979:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
 980:Src/mc_tasks.c **** }
 2363              		.loc 2 980 1
 2364 0120 00BF     		nop
 2365 0122 1437     		adds	r7, r7, #20
 2366              	.LCFI80:
 2367              		.cfi_def_cfa_offset 12
 2368 0124 BD46     		mov	sp, r7
 2369              	.LCFI81:
 2370              		.cfi_def_cfa_register 13
 2371              		@ sp needed
 2372 0126 90BD     		pop	{r4, r7, pc}
 2373              	.L119:
 2374              		.align	2
 2375              	.L118:
 2376 0128 00000000 		.word	TempRegConv_M1
 2377 012c 00000000 		.word	TempSensor_M1
 2378 0130 00000000 		.word	pwmcHandle
 2379 0134 00000000 		.word	VbusRegConv_M1
 2380 0138 00000000 		.word	BusVoltageSensor_M1
 2381 013c 00000000 		.word	Mci
 2382 0140 00000000 		.word	pEAC
 2383 0144 00000000 		.word	MCPA_UART_A
 2384 0148 00000000 		.word	pMPM
 2385              		.cfi_endproc
 2386              	.LFE1110:
 2388              		.section	.text.GetMCI,"ax",%progbits
 2389              		.align	1
 2390              		.weak	GetMCI
 2391              		.syntax unified
 2392              		.thumb
 2393              		.thumb_func
 2395              	GetMCI:
 2396              	.LFB1111:
 981:Src/mc_tasks.c **** 
 982:Src/mc_tasks.c **** /**
 983:Src/mc_tasks.c ****   * @brief  This function returns the reference of the MCInterface relative to
 984:Src/mc_tasks.c ****   *         the selected drive.
 985:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 986:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink.
 987:Src/mc_tasks.c ****   * @retval MCI_Handle_t * Reference to MCInterface relative to the selected drive.
 988:Src/mc_tasks.c ****   *         Note: it can be MC_NULL if MCInterface of selected drive is not
 989:Src/mc_tasks.c ****   *         allocated.
 990:Src/mc_tasks.c ****   */
 991:Src/mc_tasks.c **** __weak MCI_Handle_t *GetMCI(uint8_t bMotor)
 992:Src/mc_tasks.c **** {
 2397              		.loc 2 992 1
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 16
 2400              		@ frame_needed = 1, uses_anonymous_args = 0
 2401              		@ link register save eliminated.
 2402 0000 80B4     		push	{r7}
 2403              	.LCFI82:
 2404              		.cfi_def_cfa_offset 4
 2405              		.cfi_offset 7, -4
 2406 0002 85B0     		sub	sp, sp, #20
 2407              	.LCFI83:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 75


 2408              		.cfi_def_cfa_offset 24
 2409 0004 00AF     		add	r7, sp, #0
 2410              	.LCFI84:
 2411              		.cfi_def_cfa_register 7
 2412 0006 0346     		mov	r3, r0
 2413 0008 FB71     		strb	r3, [r7, #7]
 993:Src/mc_tasks.c ****   MCI_Handle_t *retVal = MC_NULL; //cstat !MISRAC2012-Rule-8.13
 2414              		.loc 2 993 17
 2415 000a 0023     		movs	r3, #0
 2416 000c FB60     		str	r3, [r7, #12]
 994:Src/mc_tasks.c ****   if (bMotor < (uint8_t)NBR_OF_MOTORS)
 2417              		.loc 2 994 6
 2418 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2419 0010 002B     		cmp	r3, #0
 2420 0012 07D1     		bne	.L121
 995:Src/mc_tasks.c ****   {
 996:Src/mc_tasks.c ****     retVal = &Mci[bMotor];
 2421              		.loc 2 996 18
 2422 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2423              		.loc 2 996 12
 2424 0016 1346     		mov	r3, r2
 2425 0018 5B00     		lsls	r3, r3, #1
 2426 001a 1344     		add	r3, r3, r2
 2427 001c 1B01     		lsls	r3, r3, #4
 2428 001e 054A     		ldr	r2, .L123
 2429 0020 1344     		add	r3, r3, r2
 2430 0022 FB60     		str	r3, [r7, #12]
 2431              	.L121:
 997:Src/mc_tasks.c ****   }
 998:Src/mc_tasks.c ****   else
 999:Src/mc_tasks.c ****   {
1000:Src/mc_tasks.c ****     /* Nothing to do */
1001:Src/mc_tasks.c ****   }
1002:Src/mc_tasks.c ****   return (retVal);
 2432              		.loc 2 1002 10
 2433 0024 FB68     		ldr	r3, [r7, #12]
1003:Src/mc_tasks.c **** }
 2434              		.loc 2 1003 1
 2435 0026 1846     		mov	r0, r3
 2436 0028 1437     		adds	r7, r7, #20
 2437              	.LCFI85:
 2438              		.cfi_def_cfa_offset 4
 2439 002a BD46     		mov	sp, r7
 2440              	.LCFI86:
 2441              		.cfi_def_cfa_register 13
 2442              		@ sp needed
 2443 002c 5DF8047B 		ldr	r7, [sp], #4
 2444              	.LCFI87:
 2445              		.cfi_restore 7
 2446              		.cfi_def_cfa_offset 0
 2447 0030 7047     		bx	lr
 2448              	.L124:
 2449 0032 00BF     		.align	2
 2450              	.L123:
 2451 0034 00000000 		.word	Mci
 2452              		.cfi_endproc
 2453              	.LFE1111:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 76


 2455              		.section	.text.TSK_HardwareFaultTask,"ax",%progbits
 2456              		.align	1
 2457              		.weak	TSK_HardwareFaultTask
 2458              		.syntax unified
 2459              		.thumb
 2460              		.thumb_func
 2462              	TSK_HardwareFaultTask:
 2463              	.LFB1112:
1004:Src/mc_tasks.c **** 
1005:Src/mc_tasks.c **** /**
1006:Src/mc_tasks.c ****   * @brief  Puts the Motor Control subsystem in in safety conditions on a Hard Fault
1007:Src/mc_tasks.c ****   *
1008:Src/mc_tasks.c ****   *  This function is to be executed when a general hardware failure has been detected
1009:Src/mc_tasks.c ****   * by the microcontroller and is used to put the system in safety condition.
1010:Src/mc_tasks.c ****   */
1011:Src/mc_tasks.c **** __weak void TSK_HardwareFaultTask(void)
1012:Src/mc_tasks.c **** {
 2464              		.loc 2 1012 1
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 1, uses_anonymous_args = 0
 2468 0000 80B5     		push	{r7, lr}
 2469              	.LCFI88:
 2470              		.cfi_def_cfa_offset 8
 2471              		.cfi_offset 7, -8
 2472              		.cfi_offset 14, -4
 2473 0002 00AF     		add	r7, sp, #0
 2474              	.LCFI89:
 2475              		.cfi_def_cfa_register 7
1013:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 0 */
1014:Src/mc_tasks.c **** 
1015:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 0 */
1016:Src/mc_tasks.c ****   R3_1_SwitchOffPWM(pwmcHandle[M1]);
 2476              		.loc 2 1016 3
 2477 0004 054B     		ldr	r3, .L126
 2478 0006 1B68     		ldr	r3, [r3]
 2479 0008 1846     		mov	r0, r3
 2480 000a FFF7FEFF 		bl	R3_1_SwitchOffPWM
1017:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 2481              		.loc 2 1017 3
 2482 000e 0022     		movs	r2, #0
 2483 0010 8021     		movs	r1, #128
 2484 0012 0348     		ldr	r0, .L126+4
 2485 0014 FFF7FEFF 		bl	MCI_FaultProcessing
1018:Src/mc_tasks.c **** 
1019:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 1 */
1020:Src/mc_tasks.c **** 
1021:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 1 */
1022:Src/mc_tasks.c **** }
 2486              		.loc 2 1022 1
 2487 0018 00BF     		nop
 2488 001a 80BD     		pop	{r7, pc}
 2489              	.L127:
 2490              		.align	2
 2491              	.L126:
 2492 001c 00000000 		.word	pwmcHandle
 2493 0020 00000000 		.word	Mci
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 77


 2494              		.cfi_endproc
 2495              	.LFE1112:
 2497              		.section	.text.startMediumFrequencyTask,"ax",%progbits
 2498              		.align	1
 2499              		.global	startMediumFrequencyTask
 2500              		.syntax unified
 2501              		.thumb
 2502              		.thumb_func
 2504              	startMediumFrequencyTask:
 2505              	.LFB1113:
1023:Src/mc_tasks.c **** 
1024:Src/mc_tasks.c **** /* startMediumFrequencyTask function */
1025:Src/mc_tasks.c **** void startMediumFrequencyTask(void const * argument)
1026:Src/mc_tasks.c **** {
 2506              		.loc 2 1026 1
 2507              		.cfi_startproc
 2508              		@ args = 0, pretend = 0, frame = 8
 2509              		@ frame_needed = 1, uses_anonymous_args = 0
 2510 0000 80B5     		push	{r7, lr}
 2511              	.LCFI90:
 2512              		.cfi_def_cfa_offset 8
 2513              		.cfi_offset 7, -8
 2514              		.cfi_offset 14, -4
 2515 0002 82B0     		sub	sp, sp, #8
 2516              	.LCFI91:
 2517              		.cfi_def_cfa_offset 16
 2518 0004 00AF     		add	r7, sp, #0
 2519              	.LCFI92:
 2520              		.cfi_def_cfa_register 7
 2521 0006 7860     		str	r0, [r7, #4]
 2522              	.L129:
1027:Src/mc_tasks.c ****   /* USER CODE BEGIN MF task 1 */
1028:Src/mc_tasks.c ****   /* Infinite loop */
1029:Src/mc_tasks.c ****   for(;;)
1030:Src/mc_tasks.c ****   {
1031:Src/mc_tasks.c ****     /* Delay of 500us */
1032:Src/mc_tasks.c ****     vTaskDelay(1);
 2523              		.loc 2 1032 5 discriminator 1
 2524 0008 0120     		movs	r0, #1
 2525 000a FFF7FEFF 		bl	vTaskDelay
1033:Src/mc_tasks.c ****     MC_RunMotorControlTasks();
 2526              		.loc 2 1033 5 discriminator 1
 2527 000e FFF7FEFF 		bl	MC_RunMotorControlTasks
1032:Src/mc_tasks.c ****     MC_RunMotorControlTasks();
 2528              		.loc 2 1032 5 discriminator 1
 2529 0012 F9E7     		b	.L129
 2530              		.cfi_endproc
 2531              	.LFE1113:
 2533              		.section	.text.StartSafetyTask,"ax",%progbits
 2534              		.align	1
 2535              		.global	StartSafetyTask
 2536              		.syntax unified
 2537              		.thumb
 2538              		.thumb_func
 2540              	StartSafetyTask:
 2541              	.LFB1114:
1034:Src/mc_tasks.c ****   }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 78


1035:Src/mc_tasks.c ****   /* USER CODE END MF task 1 */
1036:Src/mc_tasks.c **** }
1037:Src/mc_tasks.c **** 
1038:Src/mc_tasks.c **** /* startSafetyTask function */
1039:Src/mc_tasks.c **** void StartSafetyTask(void const * argument)
1040:Src/mc_tasks.c **** {
 2542              		.loc 2 1040 1
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 8
 2545              		@ frame_needed = 1, uses_anonymous_args = 0
 2546 0000 80B5     		push	{r7, lr}
 2547              	.LCFI93:
 2548              		.cfi_def_cfa_offset 8
 2549              		.cfi_offset 7, -8
 2550              		.cfi_offset 14, -4
 2551 0002 82B0     		sub	sp, sp, #8
 2552              	.LCFI94:
 2553              		.cfi_def_cfa_offset 16
 2554 0004 00AF     		add	r7, sp, #0
 2555              	.LCFI95:
 2556              		.cfi_def_cfa_register 7
 2557 0006 7860     		str	r0, [r7, #4]
 2558              	.L131:
1041:Src/mc_tasks.c ****   /* USER CODE BEGIN SF task 1 */
1042:Src/mc_tasks.c ****   /* Infinite loop */
1043:Src/mc_tasks.c ****   for(;;)
1044:Src/mc_tasks.c ****   {
1045:Src/mc_tasks.c ****     /* Delay of 500us */
1046:Src/mc_tasks.c ****     vTaskDelay(1);
 2559              		.loc 2 1046 5 discriminator 1
 2560 0008 0120     		movs	r0, #1
 2561 000a FFF7FEFF 		bl	vTaskDelay
1047:Src/mc_tasks.c ****     TSK_SafetyTask();
 2562              		.loc 2 1047 5 discriminator 1
 2563 000e FFF7FEFF 		bl	TSK_SafetyTask
1046:Src/mc_tasks.c ****     TSK_SafetyTask();
 2564              		.loc 2 1046 5 discriminator 1
 2565 0012 F9E7     		b	.L131
 2566              		.cfi_endproc
 2567              	.LFE1114:
 2569              		.section	.text.UI_HandleStartStopButton_cb,"ax",%progbits
 2570              		.align	1
 2571              		.weak	UI_HandleStartStopButton_cb
 2572              		.syntax unified
 2573              		.thumb
 2574              		.thumb_func
 2576              	UI_HandleStartStopButton_cb:
 2577              	.LFB1115:
1048:Src/mc_tasks.c ****   }
1049:Src/mc_tasks.c ****   /* USER CODE END SF task 1 */
1050:Src/mc_tasks.c **** }
1051:Src/mc_tasks.c **** 
1052:Src/mc_tasks.c **** __weak void UI_HandleStartStopButton_cb (void)
1053:Src/mc_tasks.c **** {
 2578              		.loc 2 1053 1
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 79


 2581              		@ frame_needed = 1, uses_anonymous_args = 0
 2582 0000 80B5     		push	{r7, lr}
 2583              	.LCFI96:
 2584              		.cfi_def_cfa_offset 8
 2585              		.cfi_offset 7, -8
 2586              		.cfi_offset 14, -4
 2587 0002 00AF     		add	r7, sp, #0
 2588              	.LCFI97:
 2589              		.cfi_def_cfa_register 7
1054:Src/mc_tasks.c **** /* USER CODE BEGIN START_STOP_BTN */
1055:Src/mc_tasks.c ****   if (IDLE == MC_GetSTMStateMotor1())
 2590              		.loc 2 1055 15
 2591 0004 FFF7FEFF 		bl	MC_GetSTMStateMotor1
 2592 0008 0346     		mov	r3, r0
 2593              		.loc 2 1055 6
 2594 000a 002B     		cmp	r3, #0
 2595 000c 02D1     		bne	.L133
1056:Src/mc_tasks.c ****   {
1057:Src/mc_tasks.c ****     /* Ramp parameters should be tuned for the actual motor */
1058:Src/mc_tasks.c ****     (void)MC_StartMotor1();
 2596              		.loc 2 1058 11
 2597 000e FFF7FEFF 		bl	MC_StartMotor1
1059:Src/mc_tasks.c ****   }
1060:Src/mc_tasks.c ****   else
1061:Src/mc_tasks.c ****   {
1062:Src/mc_tasks.c ****     (void)MC_StopMotor1();
1063:Src/mc_tasks.c ****   }
1064:Src/mc_tasks.c **** /* USER CODE END START_STOP_BTN */
1065:Src/mc_tasks.c **** }
 2598              		.loc 2 1065 1
 2599 0012 01E0     		b	.L135
 2600              	.L133:
1062:Src/mc_tasks.c ****   }
 2601              		.loc 2 1062 11
 2602 0014 FFF7FEFF 		bl	MC_StopMotor1
 2603              	.L135:
 2604              		.loc 2 1065 1
 2605 0018 00BF     		nop
 2606 001a 80BD     		pop	{r7, pc}
 2607              		.cfi_endproc
 2608              	.LFE1115:
 2610              		.section	.text.mc_lock_pins,"ax",%progbits
 2611              		.align	1
 2612              		.weak	mc_lock_pins
 2613              		.syntax unified
 2614              		.thumb
 2615              		.thumb_func
 2617              	mc_lock_pins:
 2618              	.LFB1116:
1066:Src/mc_tasks.c **** 
1067:Src/mc_tasks.c ****  /**
1068:Src/mc_tasks.c ****   * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
1069:Src/mc_tasks.c ****   */
1070:Src/mc_tasks.c **** __weak void mc_lock_pins (void)
1071:Src/mc_tasks.c **** {
 2619              		.loc 2 1071 1
 2620              		.cfi_startproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 80


 2621              		@ args = 0, pretend = 0, frame = 0
 2622              		@ frame_needed = 1, uses_anonymous_args = 0
 2623 0000 80B5     		push	{r7, lr}
 2624              	.LCFI98:
 2625              		.cfi_def_cfa_offset 8
 2626              		.cfi_offset 7, -8
 2627              		.cfi_offset 14, -4
 2628 0002 00AF     		add	r7, sp, #0
 2629              	.LCFI99:
 2630              		.cfi_def_cfa_register 7
1072:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_A_GPIO_Port, M1_ENCODER_A_Pin);
 2631              		.loc 2 1072 1
 2632 0004 4021     		movs	r1, #64
 2633 0006 2348     		ldr	r0, .L137
 2634 0008 FFF7FEFF 		bl	LL_GPIO_LockPin
1073:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_B_GPIO_Port, M1_ENCODER_B_Pin);
 2635              		.loc 2 1073 1
 2636 000c 8021     		movs	r1, #128
 2637 000e 2148     		ldr	r0, .L137
 2638 0010 FFF7FEFF 		bl	LL_GPIO_LockPin
1074:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 2639              		.loc 2 1074 1
 2640 0014 4FF48071 		mov	r1, #256
 2641 0018 4FF09040 		mov	r0, #1207959552
 2642 001c FFF7FEFF 		bl	LL_GPIO_LockPin
1075:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 2643              		.loc 2 1075 1
 2644 0020 4FF40071 		mov	r1, #512
 2645 0024 4FF09040 		mov	r0, #1207959552
 2646 0028 FFF7FEFF 		bl	LL_GPIO_LockPin
1076:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_DP_GPIO_Port, M1_DP_Pin);
 2647              		.loc 2 1076 1
 2648 002c 4FF40061 		mov	r1, #2048
 2649 0030 4FF09040 		mov	r0, #1207959552
 2650 0034 FFF7FEFF 		bl	LL_GPIO_LockPin
1077:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 2651              		.loc 2 1077 1
 2652 0038 4FF48061 		mov	r1, #1024
 2653 003c 4FF09040 		mov	r0, #1207959552
 2654 0040 FFF7FEFF 		bl	LL_GPIO_LockPin
1078:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_EN_V_GPIO_Port, M1_PWM_EN_V_Pin);
 2655              		.loc 2 1078 1
 2656 0044 4FF48041 		mov	r1, #16384
 2657 0048 1348     		ldr	r0, .L137+4
 2658 004a FFF7FEFF 		bl	LL_GPIO_LockPin
1079:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
 2659              		.loc 2 1079 1
 2660 004e 4FF40051 		mov	r1, #8192
 2661 0052 1148     		ldr	r0, .L137+4
 2662 0054 FFF7FEFF 		bl	LL_GPIO_LockPin
1080:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
 2663              		.loc 2 1080 1
 2664 0058 4FF40041 		mov	r1, #32768
 2665 005c 0E48     		ldr	r0, .L137+4
 2666 005e FFF7FEFF 		bl	LL_GPIO_LockPin
1081:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 2667              		.loc 2 1081 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 81


 2668 0062 0121     		movs	r1, #1
 2669 0064 0C48     		ldr	r0, .L137+4
 2670 0066 FFF7FEFF 		bl	LL_GPIO_LockPin
1082:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 2671              		.loc 2 1082 1
 2672 006a 0221     		movs	r1, #2
 2673 006c 0A48     		ldr	r0, .L137+4
 2674 006e FFF7FEFF 		bl	LL_GPIO_LockPin
1083:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 2675              		.loc 2 1083 1
 2676 0072 0121     		movs	r1, #1
 2677 0074 4FF09040 		mov	r0, #1207959552
 2678 0078 FFF7FEFF 		bl	LL_GPIO_LockPin
1084:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 2679              		.loc 2 1084 1
 2680 007c 0221     		movs	r1, #2
 2681 007e 4FF09040 		mov	r0, #1207959552
 2682 0082 FFF7FEFF 		bl	LL_GPIO_LockPin
1085:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 2683              		.loc 2 1085 1
 2684 0086 1021     		movs	r1, #16
 2685 0088 0248     		ldr	r0, .L137
 2686 008a FFF7FEFF 		bl	LL_GPIO_LockPin
1086:Src/mc_tasks.c **** }
 2687              		.loc 2 1086 1
 2688 008e 00BF     		nop
 2689 0090 80BD     		pop	{r7, pc}
 2690              	.L138:
 2691 0092 00BF     		.align	2
 2692              	.L137:
 2693 0094 00080048 		.word	1207961600
 2694 0098 00040048 		.word	1207960576
 2695              		.cfi_endproc
 2696              	.LFE1116:
 2698              		.text
 2699              	.Letext0:
 2700              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2701              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2702              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 2703              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 2704              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 2705              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 2706              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 2707              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 2708              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 2709              		.file 12 "Inc/mc_type.h"
 2710              		.file 13 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2711              		.file 14 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2712              		.file 15 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2713              		.file 16 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2714              		.file 17 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 2715              		.file 18 "Inc/pwm_curr_fdbk.h"
 2716              		.file 19 "Inc/mc_perf.h"
 2717              		.file 20 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/encoder_speed_pos_fdbk.h"
 2718              		.file 21 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/enc_align_ctrl.h"
 2719              		.file 22 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/trajectory_ctrl.h"
 2720              		.file 23 "Inc/mc_interface.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 82


 2721              		.file 24 "Inc/regular_conversion_manager.h"
 2722              		.file 25 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 2723              		.file 26 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 2724              		.file 27 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 2725              		.file 28 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/L4xx/Inc/r3_1_l4xx_pwm_curr_fdbk.h"
 2726              		.file 29 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/hall_speed_pos_fdbk.h"
 2727              		.file 30 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 2728              		.file 31 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 2729              		.file 32 "Inc/mc_config.h"
 2730              		.file 33 "Inc/mc_parameters.h"
 2731              		.file 34 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 2732              		.file 35 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 2733              		.file 36 "Inc/aspep.h"
 2734              		.file 37 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcpa.h"
 2735              		.file 38 "Inc/mcp_config.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 83


DEFINED SYMBOLS
                            *ABS*:00000000 mc_tasks.c
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:20     .rodata.OFFSET_TAB_CCMRx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:23     .rodata.OFFSET_TAB_CCMRx:00000000 OFFSET_TAB_CCMRx
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:26     .rodata.SHIFT_TAB_OCxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:29     .rodata.SHIFT_TAB_OCxx:00000000 SHIFT_TAB_OCxx
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:32     .rodata.SHIFT_TAB_ICxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:35     .rodata.SHIFT_TAB_ICxx:00000000 SHIFT_TAB_ICxx
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:38     .rodata.SHIFT_TAB_CCxP:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:41     .rodata.SHIFT_TAB_CCxP:00000000 SHIFT_TAB_CCxP
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:44     .rodata.SHIFT_TAB_OISx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:47     .rodata.SHIFT_TAB_OISx:00000000 SHIFT_TAB_OISx
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:50     .text.LL_GPIO_LockPin:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:55     .text.LL_GPIO_LockPin:00000000 LL_GPIO_LockPin
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:114    .rodata.CHANNEL_OFFSET_TAB:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:117    .rodata.CHANNEL_OFFSET_TAB:00000000 CHANNEL_OFFSET_TAB
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:120    .bss.FOCVars:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:123    .bss.FOCVars:00000000 FOCVars
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:126    .bss.pEAC:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:129    .bss.pEAC:00000000 pEAC
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:132    .bss.pwmcHandle:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:135    .bss.pwmcHandle:00000000 pwmcHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:138    .bss.pREMNG:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:141    .bss.pREMNG:00000000 pREMNG
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:144    .bss.hMFTaskCounterM1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:147    .bss.hMFTaskCounterM1:00000000 hMFTaskCounterM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:150    .bss.hBootCapDelayCounterM1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:153    .bss.hBootCapDelayCounterM1:00000000 hBootCapDelayCounterM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:156    .bss.hStopPermanencyCounterM1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:159    .bss.hStopPermanencyCounterM1:00000000 hStopPermanencyCounterM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:164    .bss.bMCBootCompleted:00000000 bMCBootCompleted
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:165    .bss.bMCBootCompleted:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:171    .bss.PerfTraces:00000000 PerfTraces
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:168    .bss.PerfTraces:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:174    .text.MCboot:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:180    .text.MCboot:00000000 MCboot
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1305   .text.FOC_Clear:00000000 FOC_Clear
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:379    .text.MCboot:00000144 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:410    .text.MC_RunMotorControlTasks:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:416    .text.MC_RunMotorControlTasks:00000000 MC_RunMotorControlTasks
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:533    .text.MC_Scheduler:00000000 MC_Scheduler
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:446    .text.MC_RunMotorControlTasks:00000018 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:451    .text.TSK_MF_StopProcessing:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:457    .text.TSK_MF_StopProcessing:00000000 TSK_MF_StopProcessing
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1740   .text.TSK_SetStopPermanencyTimeM1:00000000 TSK_SetStopPermanencyTimeM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:520    .text.TSK_MF_StopProcessing:00000054 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:527    .text.MC_Scheduler:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:697    .text.TSK_MediumFrequencyTaskM1:00000000 TSK_MediumFrequencyTaskM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:680    .text.MC_Scheduler:000000bc $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:691    .text.TSK_MediumFrequencyTaskM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:755    .text.TSK_MediumFrequencyTaskM1:00000054 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:776    .text.TSK_MediumFrequencyTaskM1:000000a8 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1628   .text.TSK_SetChargeBootCapDelayM1:00000000 TSK_SetChargeBootCapDelayM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1679   .text.TSK_ChargeBootCapDelayHasElapsedM1:00000000 TSK_ChargeBootCapDelayHasElapsedM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1490   .text.FOC_InitAdditionalMethods:00000000 FOC_InitAdditionalMethods
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1533   .text.FOC_CalcCurrRef:00000000 FOC_CalcCurrRef
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1129   .text.TSK_MediumFrequencyTaskM1:00000304 $d
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 84


C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1791   .text.TSK_StopPermanencyTimeHasElapsedM1:00000000 TSK_StopPermanencyTimeHasElapsedM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1141   .text.TSK_MediumFrequencyTaskM1:0000032c $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1289   .text.TSK_MediumFrequencyTaskM1:00000408 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1299   .text.FOC_Clear:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1474   .text.FOC_Clear:00000124 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1484   .text.FOC_InitAdditionalMethods:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1527   .text.FOC_CalcCurrRef:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1616   .text.FOC_CalcCurrRef:00000070 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1622   .text.TSK_SetChargeBootCapDelayM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1668   .text.TSK_SetChargeBootCapDelayM1:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1673   .text.TSK_ChargeBootCapDelayHasElapsedM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1729   .text.TSK_ChargeBootCapDelayHasElapsedM1:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1734   .text.TSK_SetStopPermanencyTimeM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1780   .text.TSK_SetStopPermanencyTimeM1:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1785   .text.TSK_StopPermanencyTimeHasElapsedM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1841   .text.TSK_StopPermanencyTimeHasElapsedM1:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1846   .text.TSK_HighFrequencyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1852   .text.TSK_HighFrequencyTask:00000000 TSK_HighFrequencyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1969   .text.FOC_CurrControllerM1:00000000 FOC_CurrControllerM1
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1954   .text.TSK_HighFrequencyTask:0000008c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:1964   .text.FOC_CurrControllerM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2127   .text.FOC_CurrControllerM1:000000f8 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2137   .text.TSK_SafetyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2143   .text.TSK_SafetyTask:00000000 TSK_SafetyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2187   .text.TSK_SafetyTask_PWMOFF:00000000 TSK_SafetyTask_PWMOFF
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2176   .text.TSK_SafetyTask:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2181   .text.TSK_SafetyTask_PWMOFF:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2376   .text.TSK_SafetyTask_PWMOFF:00000128 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2389   .text.GetMCI:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2395   .text.GetMCI:00000000 GetMCI
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2451   .text.GetMCI:00000034 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2456   .text.TSK_HardwareFaultTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2462   .text.TSK_HardwareFaultTask:00000000 TSK_HardwareFaultTask
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2492   .text.TSK_HardwareFaultTask:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2498   .text.startMediumFrequencyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2504   .text.startMediumFrequencyTask:00000000 startMediumFrequencyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2534   .text.StartSafetyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2540   .text.StartSafetyTask:00000000 StartSafetyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2570   .text.UI_HandleStartStopButton_cb:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2576   .text.UI_HandleStartStopButton_cb:00000000 UI_HandleStartStopButton_cb
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2611   .text.mc_lock_pins:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2617   .text.mc_lock_pins:00000000 mc_lock_pins
C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s:2693   .text.mc_lock_pins:00000094 $d

UNDEFINED SYMBOLS
R3_1_Init
ASPEP_start
startTimers
PID_HandleInit
ENC_Init
EAC_Init
TC_Init
STC_Init
VSS_Init
RCM_RegisterRegConv
RVBS_Init
NTC_Init
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 85


REMNG_Init
STC_GetDefaultIqdref
MCI_Init
STC_GetMecSpeedRefUnitDefault
MCI_ExecSpeedRamp
MC_Perf_Measure_Init
MC_APP_BootHook
PWM_Handle_M1
aspepOverUartA
PIDSpeedHandle_M1
ENCODER_M1
pSTC
VirtualSpeedSensorM1
EncAlignCtrlM1
PID_PosParamsM1
SpeednTorqCtrlM1
PosCtrlM1
PIDIqHandle_M1
PIDIdHandle_M1
VbusRegConv_M1
BusVoltageSensor_M1
pMPM
TempRegConv_M1
TempSensor_M1
RampExtMngrHFParamsM1
pPosCtrl
Mci
scaleParams_M1
R3_1_SwitchOffPWM
PQD_Clear
MC_APP_PostMediumFrequencyHook_M1
MCP_ReceivedPacket
MCP_Over_UartA
MC_BG_Perf_Measure_Start
ENC_CalcAvrgMecSpeedUnit
PQD_CalcElMotorPower
MCI_GetCurrentFaults
MCI_GetOccurredFaults
PWMC_CurrentReadingCalibr
R3_1_TurnOnLowSides
STC_SetSpeedSensor
ENC_Clear
EAC_IsAligned
EAC_StartAlignment
STC_SetControlMode
STC_ForceSpeedReferenceToCurrentSpeed
MCI_ExecBufferedCommands
PWMC_SwitchOnPWM
EAC_Exec
STC_CalcTorqueReference
TC_PositionRegulation
R3_1_SwitchOnPWM
TC_EncAlignmentCommand
MC_BG_Perf_Measure_Stop
PID_SetIntegralTerm
STC_Clear
PWMC_SwitchOffPWM
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccExtnCu.s 			page 86


MC_Perf_Clear
pPIDIq
pPIDId
MC_Perf_Measure_Start
HAL_ADC_GetValue
HALL_CalcAngle
MCI_FaultProcessing
MCPA_dataLog
MC_Perf_Measure_Stop
hadc2
HALL_M1
GLOBAL_TIMESTAMP
MCPA_UART_A
STC_GetSpeedSensor
SPD_GetElAngle
PWMC_GetPhaseCurrents
MCM_Clarke
MCM_Park
PI_Controller
Circle_Limitation
SPD_GetInstElSpeedDpp
MCM_Rev_Park
PWMC_SetPhaseVoltage
CircleLimitationM1
RCM_ExecUserConv
RCM_ExecRegularConv
NTC_CalcAvTemp
PWMC_IsFaultOccurred
RVBS_CalcAvVbus
MCI_GetFaultState
EAC_SetRestartState
MCPA_flushDataLog
vTaskDelay
MC_GetSTMStateMotor1
MC_StartMotor1
MC_StopMotor1
