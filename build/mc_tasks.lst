ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"mc_tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  20              		.align	2
  23              	OFFSET_TAB_CCMRx:
  24 0000 00000000 		.ascii	"\000\000\000\000\004\004\004<<"
  24      0404043C 
  24      3C
  25              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  26              		.align	2
  29              	SHIFT_TAB_OCxx:
  30 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\010"
  30      00000800 
  30      08
  31              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  32              		.align	2
  35              	SHIFT_TAB_ICxx:
  36 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000"
  36      00000800 
  36      00
  37              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  38              		.align	2
  41              	SHIFT_TAB_CCxP:
  42 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\020\024"
  42      080A0C10 
  42      14
  43              		.section	.rodata.SHIFT_TAB_OISx,"a"
  44              		.align	2
  47              	SHIFT_TAB_OISx:
  48 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\010\012"
  48      04050608 
  48      0A
  49              		.section	.text.LL_GPIO_LockPin,"ax",%progbits
  50              		.align	1
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  55              	LL_GPIO_LockPin:
  56              	.LFB615:
  57              		.file 1 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h"
   1:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 2


   2:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @file    stm32l4xx_ll_gpio.h
   4:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *
   9:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * All rights reserved.
  11:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *
  12:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * in the root directory of this software component.
  14:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *
  16:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   ******************************************************************************
  17:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  18:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  19:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #ifndef STM32L4xx_LL_GPIO_H
  21:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define STM32L4xx_LL_GPIO_H
  22:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  23:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #ifdef __cplusplus
  24:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** extern "C" {
  25:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif
  26:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  27:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #include "stm32l4xx.h"
  29:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  30:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @addtogroup STM32L4xx_LL_Driver
  31:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  32:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  33:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  34:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  35:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  36:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  37:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  38:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  39:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** MISRA C:2012 deviation rule has been granted for following rules:
  40:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * Rule-18.1_d - Medium: Array pointer `GPIOx' is accessed with index [..,..]
  41:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * which may be out of array bounds [..,UNKNOWN] in following APIs:
  42:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_0_7
  43:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_0_7
  44:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_8_15
  45:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_8_15
  46:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  47:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  48:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  49:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  50:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  51:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  52:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  53:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
  54:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  55:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  56:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  57:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
  58:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 3


  59:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  60:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  62:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  65:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
  66:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  67:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  68:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
  69:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  70:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
  71:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** typedef struct
  72:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
  73:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  74:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  75:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  76:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  77:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  78:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  79:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  80:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  81:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  82:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  83:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  84:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  85:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  86:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  87:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  88:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  89:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  90:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  91:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  92:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  93:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  94:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  95:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  96:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   uint32_t Alternate;    /*!< Specifies the Peripheral to be connected to the selected pins.
  97:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_AF.
  98:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
  99:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
 100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
 101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
 106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_0                      GPIO_BSRR_BS0 /*!< Select pin 0 */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 4


 116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_1                      GPIO_BSRR_BS1 /*!< Select pin 1 */
 117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_2                      GPIO_BSRR_BS2 /*!< Select pin 2 */
 118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_3                      GPIO_BSRR_BS3 /*!< Select pin 3 */
 119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_4                      GPIO_BSRR_BS4 /*!< Select pin 4 */
 120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_5                      GPIO_BSRR_BS5 /*!< Select pin 5 */
 121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_6                      GPIO_BSRR_BS6 /*!< Select pin 6 */
 122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_7                      GPIO_BSRR_BS7 /*!< Select pin 7 */
 123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_8                      GPIO_BSRR_BS8 /*!< Select pin 8 */
 124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_9                      GPIO_BSRR_BS9 /*!< Select pin 9 */
 125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_10                     GPIO_BSRR_BS10 /*!< Select pin 10 */
 126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_11                     GPIO_BSRR_BS11 /*!< Select pin 11 */
 127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_12                     GPIO_BSRR_BS12 /*!< Select pin 12 */
 128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_13                     GPIO_BSRR_BS13 /*!< Select pin 13 */
 129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_14                     GPIO_BSRR_BS14 /*!< Select pin 14 */
 130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_15                     GPIO_BSRR_BS15 /*!< Select pin 15 */
 131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                    (GPIO_BSRR_BS0 | GPIO_BSRR_BS1  | GPIO_BSRR_BS2  | \
 132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS3  | GPIO_BSRR_BS4  | GPIO_BSRR_BS5  | \
 133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS6  | GPIO_BSRR_BS7  | GPIO_BSRR_BS8  | \
 134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS9  | GPIO_BSRR_BS10 | GPIO_BSRR_BS11 | \
 135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS12 | GPIO_BSRR_BS13 | GPIO_BSRR_BS14 | \
 136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                                            GPIO_BSRR_BS15) /*!< Select all pins */
 137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT                 (0x00000000U) /*!< Select input mode */
 145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODE0_0  /*!< Select output mode */
 146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODE0_1  /*!< Select alternate function mode 
 147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODE0    /*!< Select analog mode */
 148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL            (0x00000000U) /*!< Select push-pull as output type */
 156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN           GPIO_OTYPER_OT0 /*!< Select open-drain as output type */
 157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW             (0x00000000U) /*!< Select I/O low output speed    */
 165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM          GPIO_OSPEEDR_OSPEED0_0 /*!< Select I/O medium output spe
 166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH            GPIO_OSPEEDR_OSPEED0_1 /*!< Select I/O fast output speed
 167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_VERY_HIGH       GPIO_OSPEEDR_OSPEED0   /*!< Select I/O high output speed
 168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_LOW                  LL_GPIO_SPEED_FREQ_LOW
 172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_MEDIUM               LL_GPIO_SPEED_FREQ_MEDIUM
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 5


 173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FAST                 LL_GPIO_SPEED_FREQ_HIGH
 174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_SPEED_HIGH                 LL_GPIO_SPEED_FREQ_VERY_HIGH
 175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PULL_NO                    (0x00000000U) /*!< Select I/O no pull */
 180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                    GPIO_PUPDR_PUPD0_0 /*!< Select I/O pull up */
 181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                  GPIO_PUPDR_PUPD0_1 /*!< Select I/O pull down */
 182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_AF Alternate Function
 187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_0                       (0x0000000U) /*!< Select alternate function 0 */
 190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_1                       (0x0000001U) /*!< Select alternate function 1 */
 191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_2                       (0x0000002U) /*!< Select alternate function 2 */
 192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_3                       (0x0000003U) /*!< Select alternate function 3 */
 193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_4                       (0x0000004U) /*!< Select alternate function 4 */
 194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_5                       (0x0000005U) /*!< Select alternate function 5 */
 195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_6                       (0x0000006U) /*!< Select alternate function 6 */
 196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_7                       (0x0000007U) /*!< Select alternate function 7 */
 197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_8                       (0x0000008U) /*!< Select alternate function 8 */
 198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_9                       (0x0000009U) /*!< Select alternate function 9 */
 199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_10                      (0x000000AU) /*!< Select alternate function 10 */
 200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_11                      (0x000000BU) /*!< Select alternate function 11 */
 201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_12                      (0x000000CU) /*!< Select alternate function 12 */
 202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_13                      (0x000000DU) /*!< Select alternate function 13 */
 203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_14                      (0x000000EU) /*!< Select alternate function 14 */
 204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_AF_15                      (0x000000FU) /*!< Select alternate function 15 */
 205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 6


 230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Register value
 236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @}
 244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @{
 253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
 260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 7


 287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(P
 288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
 295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->MODER,
 322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_SetPinOutputType
 330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 8


 344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t Outpu
 355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_GetPinOutputType
 365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
 389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_SetPinSpeed
 400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 9


 401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****              (Speed << (POSITION_VAL(Pin) * 2U)));
 429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_GetPinSpeed
 438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 10


 458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OSPEEDR,
 465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(P
 466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_SetPinPull
 472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(P
 499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
 503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_GetPinPull
 505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 11


 515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->PUPDR,
 531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_SetAFPin_0_7
 539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin) * 4U)));
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 12


 572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_GetAFPin_0_7
 577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
 606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[0],
 608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) 
 609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_SetAFPin_8_15
 616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 13


 629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
 649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_GetAFPin_8_15
 655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
 684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[1],
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 14


 686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****                              (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U))) >> (POSITION_VAL
 687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #if defined(GPIO_ASCR_ASC0)
 690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Connect analog switch to ADC input of several pins for a dedicated port.
 692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   This bit must be set prior to the ADC conversion.
 693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         Only the IO which connected to the ADC input are effective.
 694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         Other IO must be kept reset value
 695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll ASCR         ASCy          LL_GPIO_EnablePinAnalogControl
 696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   SET_BIT(GPIOx->ASCR, PinMask);
 720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Disconnect analog switch to ADC input of several pins for a dedicated port.
 724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll ASCR         ASCy          LL_GPIO_DisablePinAnalogControl
 725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 15


 743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_DisablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
 748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   CLEAR_BIT(GPIOx->ASCR, PinMask);
 749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
 750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** #endif /* GPIO_ASCR_ASC0 */
 751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** 
 752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** /**
 753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         next reset.
 757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         (control and alternate function registers).
 759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   * @retval None
 780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   */
 781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** {
  58              		.loc 1 782 1
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 80B4     		push	{r7}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0002 85B0     		sub	sp, sp, #20
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 24
  70 0004 00AF     		add	r7, sp, #0
  71              	.LCFI2:
  72              		.cfi_def_cfa_register 7
  73 0006 7860     		str	r0, [r7, #4]
  74 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 16


 783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   __IO uint32_t temp;
 784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
  75              		.loc 1 784 3
  76 000a 3B68     		ldr	r3, [r7]
  77 000c 43F48032 		orr	r2, r3, #65536
  78 0010 7B68     		ldr	r3, [r7, #4]
  79 0012 DA61     		str	r2, [r3, #28]
 785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
  80              		.loc 1 785 3
  81 0014 7B68     		ldr	r3, [r7, #4]
  82 0016 3A68     		ldr	r2, [r7]
  83 0018 DA61     		str	r2, [r3, #28]
 786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
  84              		.loc 1 786 3
  85 001a 3B68     		ldr	r3, [r7]
  86 001c 43F48032 		orr	r2, r3, #65536
  87 0020 7B68     		ldr	r3, [r7, #4]
  88 0022 DA61     		str	r2, [r3, #28]
 787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   /* Read LCKK register. This read is mandatory to complete key lock sequence */
 788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
  89              		.loc 1 788 10
  90 0024 7B68     		ldr	r3, [r7, #4]
  91 0026 DB69     		ldr	r3, [r3, #28]
  92              		.loc 1 788 8
  93 0028 FB60     		str	r3, [r7, #12]
 789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h ****   (void) temp;
  94              		.loc 1 789 3
  95 002a FB68     		ldr	r3, [r7, #12]
 790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_gpio.h **** }
  96              		.loc 1 790 1
  97 002c 00BF     		nop
  98 002e 1437     		adds	r7, r7, #20
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 4
 101 0030 BD46     		mov	sp, r7
 102              	.LCFI4:
 103              		.cfi_def_cfa_register 13
 104              		@ sp needed
 105 0032 5DF8047B 		ldr	r7, [sp], #4
 106              	.LCFI5:
 107              		.cfi_restore 7
 108              		.cfi_def_cfa_offset 0
 109 0036 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE615:
 113              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
 114              		.align	2
 117              	CHANNEL_OFFSET_TAB:
 118 0000 081C3044 		.ascii	"\010\0340DXl\200"
 118      586C80
 119              		.section	.bss.FOCVars,"aw",%nobits
 120              		.align	2
 123              	FOCVars:
 124 0000 00000000 		.space	38
 124      00000000 
 124      00000000 
 124      00000000 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 17


 124      00000000 
 125              		.section	.bss.pEAC,"aw",%nobits
 126              		.align	2
 129              	pEAC:
 130 0000 00000000 		.space	4
 131              		.section	.bss.pwmcHandle,"aw",%nobits
 132              		.align	2
 135              	pwmcHandle:
 136 0000 00000000 		.space	4
 137              		.section	.bss.pREMNG,"aw",%nobits
 138              		.align	2
 141              	pREMNG:
 142 0000 00000000 		.space	4
 143              		.section	.bss.hMFTaskCounterM1,"aw",%nobits
 144              		.align	1
 147              	hMFTaskCounterM1:
 148 0000 0000     		.space	2
 149              		.section	.bss.hBootCapDelayCounterM1,"aw",%nobits
 150              		.align	1
 153              	hBootCapDelayCounterM1:
 154 0000 0000     		.space	2
 155              		.section	.bss.hStopPermanencyCounterM1,"aw",%nobits
 156              		.align	1
 159              	hStopPermanencyCounterM1:
 160 0000 0000     		.space	2
 161              		.section	.bss.bMCBootCompleted,"aw",%nobits
 164              	bMCBootCompleted:
 165 0000 00       		.space	1
 166              		.global	PerfTraces
 167              		.section	.bss.PerfTraces,"aw",%nobits
 168              		.align	2
 171              	PerfTraces:
 172 0000 00000000 		.space	40
 172      00000000 
 172      00000000 
 172      00000000 
 172      00000000 
 173              		.section	.text.MCboot,"ax",%progbits
 174              		.align	1
 175              		.weak	MCboot
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	MCboot:
 181              	.LFB1095:
 182              		.file 2 "Src/mc_tasks.c"
   1:Src/mc_tasks.c **** 
   2:Src/mc_tasks.c **** /**
   3:Src/mc_tasks.c ****   ******************************************************************************
   4:Src/mc_tasks.c ****   * @file    mc_tasks.c
   5:Src/mc_tasks.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_tasks.c ****   * @brief   This file implements tasks definition
   7:Src/mc_tasks.c ****   *
   8:Src/mc_tasks.c ****   ******************************************************************************
   9:Src/mc_tasks.c ****   * @attention
  10:Src/mc_tasks.c ****   *
  11:Src/mc_tasks.c ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 18


  12:Src/mc_tasks.c ****   * All rights reserved.</center></h2>
  13:Src/mc_tasks.c ****   *
  14:Src/mc_tasks.c ****   * This software component is licensed by ST under Ultimate Liberty license
  15:Src/mc_tasks.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:Src/mc_tasks.c ****   * the License. You may obtain a copy of the License at:
  17:Src/mc_tasks.c ****   *                             www.st.com/SLA0044
  18:Src/mc_tasks.c ****   *
  19:Src/mc_tasks.c ****   ******************************************************************************
  20:Src/mc_tasks.c ****   */
  21:Src/mc_tasks.c **** 
  22:Src/mc_tasks.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/mc_tasks.c **** //cstat -MISRAC2012-Rule-21.1
  24:Src/mc_tasks.c **** #include "main.h"
  25:Src/mc_tasks.c **** //cstat +MISRAC2012-Rule-21.1
  26:Src/mc_tasks.c **** #include "mc_type.h"
  27:Src/mc_tasks.c **** #include "mc_math.h"
  28:Src/mc_tasks.c **** #include "motorcontrol.h"   // include mc_config.h which includes ENCODER_M1 and HALL_M1
  29:Src/mc_tasks.c **** #include "regular_conversion_manager.h"
  30:Src/mc_tasks.c **** #include "cmsis_os.h"
  31:Src/mc_tasks.c **** #include "mc_interface.h"
  32:Src/mc_tasks.c **** #include "digital_output.h"
  33:Src/mc_tasks.c **** #include "pwm_common.h"
  34:Src/mc_tasks.c **** #include "mc_tasks.h"
  35:Src/mc_tasks.c **** #include "parameters_conversion.h"
  36:Src/mc_tasks.c **** #include "mcp_config.h"
  37:Src/mc_tasks.c **** #include "mc_app_hooks.h"
  38:Src/mc_tasks.c **** 
  39:Src/mc_tasks.c **** /* USER CODE BEGIN Includes */
  40:Src/mc_tasks.c **** 
  41:Src/mc_tasks.c **** /* USER CODE END Includes */
  42:Src/mc_tasks.c **** 
  43:Src/mc_tasks.c **** /* USER CODE BEGIN Private define */
  44:Src/mc_tasks.c **** /* Private define ------------------------------------------------------------*/
  45:Src/mc_tasks.c **** /* Un-Comment this macro define in order to activate the smooth
  46:Src/mc_tasks.c ****    braking action on over voltage */
  47:Src/mc_tasks.c **** /* #define  MC.SMOOTH_BRAKING_ACTION_ON_OVERVOLTAGE */
  48:Src/mc_tasks.c **** 
  49:Src/mc_tasks.c **** #define STOPPERMANENCY_MS              ((uint16_t)400)
  50:Src/mc_tasks.c **** #define STOPPERMANENCY_MS2             ((uint16_t)400)
  51:Src/mc_tasks.c **** #define STOPPERMANENCY_TICKS           (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS)  / ((uin
  52:Src/mc_tasks.c **** #define STOPPERMANENCY_TICKS2          (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS2) / ((uin
  53:Src/mc_tasks.c **** /* USER CODE END Private define */
  54:Src/mc_tasks.c **** 
  55:Src/mc_tasks.c **** #define VBUS_TEMP_ERR_MASK (MC_OVER_VOLT| MC_UNDER_VOLT| MC_OVER_TEMP)
  56:Src/mc_tasks.c **** /* Private variables----------------------------------------------------------*/
  57:Src/mc_tasks.c **** 
  58:Src/mc_tasks.c **** static FOCVars_t FOCVars[NBR_OF_MOTORS];
  59:Src/mc_tasks.c **** static EncAlign_Handle_t *pEAC[NBR_OF_MOTORS];
  60:Src/mc_tasks.c **** 
  61:Src/mc_tasks.c **** static PWMC_Handle_t *pwmcHandle[NBR_OF_MOTORS];
  62:Src/mc_tasks.c **** //cstat !MISRAC2012-Rule-8.9_a
  63:Src/mc_tasks.c **** static RampExtMngr_Handle_t *pREMNG[NBR_OF_MOTORS];   /*!< Ramp manager used to modify the Iq ref
  64:Src/mc_tasks.c ****                                                     during the start-up switch over. */
  65:Src/mc_tasks.c **** 
  66:Src/mc_tasks.c **** static uint16_t hMFTaskCounterM1 = 0; //cstat !MISRAC2012-Rule-8.9_a
  67:Src/mc_tasks.c **** static volatile uint16_t hBootCapDelayCounterM1 = ((uint16_t)0);
  68:Src/mc_tasks.c **** static volatile uint16_t hStopPermanencyCounterM1 = ((uint16_t)0);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 19


  69:Src/mc_tasks.c **** 
  70:Src/mc_tasks.c **** static volatile uint8_t bMCBootCompleted = ((uint8_t)0);
  71:Src/mc_tasks.c **** 
  72:Src/mc_tasks.c **** /* Performs the CPU load measure of FOC main tasks */
  73:Src/mc_tasks.c **** MC_Perf_Handle_t PerfTraces;
  74:Src/mc_tasks.c **** 
  75:Src/mc_tasks.c **** #define M1_CHARGE_BOOT_CAP_TICKS          (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  76:Src/mc_tasks.c **** #define M1_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0.000\
  77:Src/mc_tasks.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES / 2U))
  78:Src/mc_tasks.c **** #define M2_CHARGE_BOOT_CAP_TICKS         (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  79:Src/mc_tasks.c **** #define M2_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0\
  80:Src/mc_tasks.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES2 / 2U))
  81:Src/mc_tasks.c **** 
  82:Src/mc_tasks.c **** /* USER CODE BEGIN Private Variables */
  83:Src/mc_tasks.c **** 
  84:Src/mc_tasks.c **** /* USER CODE END Private Variables */
  85:Src/mc_tasks.c **** 
  86:Src/mc_tasks.c **** /* Private functions ---------------------------------------------------------*/
  87:Src/mc_tasks.c **** void TSK_MediumFrequencyTaskM1(void);
  88:Src/mc_tasks.c **** void FOC_Clear(uint8_t bMotor);
  89:Src/mc_tasks.c **** void FOC_InitAdditionalMethods(uint8_t bMotor);
  90:Src/mc_tasks.c **** void FOC_CalcCurrRef(uint8_t bMotor);
  91:Src/mc_tasks.c **** void TSK_MF_StopProcessing(uint8_t motor);
  92:Src/mc_tasks.c **** MCI_Handle_t *GetMCI(uint8_t bMotor);
  93:Src/mc_tasks.c **** static uint16_t FOC_CurrControllerM1(void);
  94:Src/mc_tasks.c **** void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount);
  95:Src/mc_tasks.c **** bool TSK_ChargeBootCapDelayHasElapsedM1(void);
  96:Src/mc_tasks.c **** void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount);
  97:Src/mc_tasks.c **** bool TSK_StopPermanencyTimeHasElapsedM1(void);
  98:Src/mc_tasks.c **** void TSK_SafetyTask_PWMOFF(uint8_t motor);
  99:Src/mc_tasks.c **** 
 100:Src/mc_tasks.c **** /* USER CODE BEGIN Private Functions */
 101:Src/mc_tasks.c **** 
 102:Src/mc_tasks.c **** /* USER CODE END Private Functions */
 103:Src/mc_tasks.c **** /**
 104:Src/mc_tasks.c ****   * @brief  It initializes the whole MC core according to user defined
 105:Src/mc_tasks.c ****   *         parameters.
 106:Src/mc_tasks.c ****   * @param  pMCIList pointer to the vector of MCInterface objects that will be
 107:Src/mc_tasks.c ****   *         created and initialized. The vector must have length equal to the
 108:Src/mc_tasks.c ****   *         number of motor drives.
 109:Src/mc_tasks.c ****   */
 110:Src/mc_tasks.c **** __weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
 111:Src/mc_tasks.c **** {
 183              		.loc 2 111 1
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 16
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187 0000 90B5     		push	{r4, r7, lr}
 188              	.LCFI6:
 189              		.cfi_def_cfa_offset 12
 190              		.cfi_offset 4, -12
 191              		.cfi_offset 7, -8
 192              		.cfi_offset 14, -4
 193 0002 87B0     		sub	sp, sp, #28
 194              	.LCFI7:
 195              		.cfi_def_cfa_offset 40
 196 0004 02AF     		add	r7, sp, #8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 20


 197              	.LCFI8:
 198              		.cfi_def_cfa 7, 32
 199 0006 7860     		str	r0, [r7, #4]
 112:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 113:Src/mc_tasks.c **** 
 114:Src/mc_tasks.c ****   /* USER CODE END MCboot 0 */
 115:Src/mc_tasks.c **** 
 116:Src/mc_tasks.c ****   if (MC_NULL == pMCIList)
 200              		.loc 2 116 6
 201 0008 7B68     		ldr	r3, [r7, #4]
 202 000a 002B     		cmp	r3, #0
 203 000c 00F09880 		beq	.L4
 117:Src/mc_tasks.c ****   {
 118:Src/mc_tasks.c ****     /* Nothing to do */
 119:Src/mc_tasks.c ****   }
 120:Src/mc_tasks.c ****   else
 121:Src/mc_tasks.c ****   {
 122:Src/mc_tasks.c **** 
 123:Src/mc_tasks.c ****     bMCBootCompleted = (uint8_t )0;
 204              		.loc 2 123 22
 205 0010 4D4B     		ldr	r3, .L5
 206 0012 0022     		movs	r2, #0
 207 0014 1A70     		strb	r2, [r3]
 124:Src/mc_tasks.c **** 
 125:Src/mc_tasks.c ****     /**********************************************************/
 126:Src/mc_tasks.c ****     /*    PWM and current sensing component initialization    */
 127:Src/mc_tasks.c ****     /**********************************************************/
 128:Src/mc_tasks.c ****     pwmcHandle[M1] = &PWM_Handle_M1._Super;
 208              		.loc 2 128 20
 209 0016 4D4B     		ldr	r3, .L5+4
 210 0018 4D4A     		ldr	r2, .L5+8
 211 001a 1A60     		str	r2, [r3]
 129:Src/mc_tasks.c ****     R3_1_Init(&PWM_Handle_M1);
 212              		.loc 2 129 5
 213 001c 4C48     		ldr	r0, .L5+8
 214 001e FFF7FEFF 		bl	R3_1_Init
 130:Src/mc_tasks.c ****     ASPEP_start(&aspepOverUartA);
 215              		.loc 2 130 5
 216 0022 4C48     		ldr	r0, .L5+12
 217 0024 FFF7FEFF 		bl	ASPEP_start
 131:Src/mc_tasks.c **** 
 132:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 1 */
 133:Src/mc_tasks.c **** 
 134:Src/mc_tasks.c ****     /* USER CODE END MCboot 1 */
 135:Src/mc_tasks.c **** 
 136:Src/mc_tasks.c ****     /**************************************/
 137:Src/mc_tasks.c ****     /*    Start timers synchronously      */
 138:Src/mc_tasks.c ****     /**************************************/
 139:Src/mc_tasks.c ****     startTimers();
 218              		.loc 2 139 5
 219 0028 FFF7FEFF 		bl	startTimers
 140:Src/mc_tasks.c **** 
 141:Src/mc_tasks.c ****     /******************************************************/
 142:Src/mc_tasks.c ****     /*   PID component initialization: speed regulation   */
 143:Src/mc_tasks.c ****     /******************************************************/
 144:Src/mc_tasks.c ****     PID_HandleInit(&PIDSpeedHandle_M1);
 220              		.loc 2 144 5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 21


 221 002c 4A48     		ldr	r0, .L5+16
 222 002e FFF7FEFF 		bl	PID_HandleInit
 145:Src/mc_tasks.c **** 
 146:Src/mc_tasks.c ****     /******************************************************/
 147:Src/mc_tasks.c ****     /*   Main speed sensor component initialization       */
 148:Src/mc_tasks.c ****     /******************************************************/
 149:Src/mc_tasks.c ****     ENC_Init (&ENCODER_M1);
 223              		.loc 2 149 5
 224 0032 4A48     		ldr	r0, .L5+20
 225 0034 FFF7FEFF 		bl	ENC_Init
 150:Src/mc_tasks.c ****     HALL_Init(&HALL_M1);
 226              		.loc 2 150 5
 227 0038 4948     		ldr	r0, .L5+24
 228 003a FFF7FEFF 		bl	HALL_Init
 151:Src/mc_tasks.c **** 
 152:Src/mc_tasks.c ****     /******************************************************/
 153:Src/mc_tasks.c ****     /*   Main encoder alignment component initialization  */
 154:Src/mc_tasks.c ****     /******************************************************/
 155:Src/mc_tasks.c ****     EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 229              		.loc 2 155 5
 230 003e 494B     		ldr	r3, .L5+28
 231 0040 1968     		ldr	r1, [r3]
 232 0042 464B     		ldr	r3, .L5+20
 233 0044 484A     		ldr	r2, .L5+32
 234 0046 4948     		ldr	r0, .L5+36
 235 0048 FFF7FEFF 		bl	EAC_Init
 156:Src/mc_tasks.c ****     pEAC[M1] = &EncAlignCtrlM1;
 236              		.loc 2 156 14
 237 004c 484B     		ldr	r3, .L5+40
 238 004e 474A     		ldr	r2, .L5+36
 239 0050 1A60     		str	r2, [r3]
 157:Src/mc_tasks.c **** 
 158:Src/mc_tasks.c ****    /* TODO : */
 159:Src/mc_tasks.c ****     
 160:Src/mc_tasks.c **** 
 161:Src/mc_tasks.c ****     /******************************************************/
 162:Src/mc_tasks.c ****     /*   Position Control component initialization        */
 163:Src/mc_tasks.c ****     /******************************************************/
 164:Src/mc_tasks.c ****     PID_HandleInit(&PID_PosParamsM1);
 240              		.loc 2 164 5
 241 0052 4848     		ldr	r0, .L5+44
 242 0054 FFF7FEFF 		bl	PID_HandleInit
 165:Src/mc_tasks.c ****     TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 243              		.loc 2 165 5
 244 0058 404B     		ldr	r3, .L5+20
 245 005a 474A     		ldr	r2, .L5+48
 246 005c 4549     		ldr	r1, .L5+44
 247 005e 4748     		ldr	r0, .L5+52
 248 0060 FFF7FEFF 		bl	TC_Init
 166:Src/mc_tasks.c **** 
 167:Src/mc_tasks.c ****     /******************************************************/
 168:Src/mc_tasks.c ****     /*   Speed & torque component initialization          */
 169:Src/mc_tasks.c ****     /******************************************************/
 170:Src/mc_tasks.c ****     STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 249              		.loc 2 170 5
 250 0064 3F4B     		ldr	r3, .L5+28
 251 0066 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 22


 252 0068 3C4A     		ldr	r2, .L5+20
 253 006a 3B49     		ldr	r1, .L5+16
 254 006c 1846     		mov	r0, r3
 255 006e FFF7FEFF 		bl	STC_Init
 171:Src/mc_tasks.c **** 
 172:Src/mc_tasks.c ****     /****************************************************/
 173:Src/mc_tasks.c ****     /*   Virtual speed sensor component initialization  */
 174:Src/mc_tasks.c ****     /****************************************************/
 175:Src/mc_tasks.c ****     VSS_Init(&VirtualSpeedSensorM1);
 256              		.loc 2 175 5
 257 0072 3D48     		ldr	r0, .L5+32
 258 0074 FFF7FEFF 		bl	VSS_Init
 176:Src/mc_tasks.c **** 
 177:Src/mc_tasks.c ****     /********************************************************/
 178:Src/mc_tasks.c ****     /*   PID component initialization: current regulation   */
 179:Src/mc_tasks.c ****     /********************************************************/
 180:Src/mc_tasks.c ****     PID_HandleInit(&PIDIqHandle_M1);
 259              		.loc 2 180 5
 260 0078 4148     		ldr	r0, .L5+56
 261 007a FFF7FEFF 		bl	PID_HandleInit
 181:Src/mc_tasks.c ****     PID_HandleInit(&PIDIdHandle_M1);
 262              		.loc 2 181 5
 263 007e 4148     		ldr	r0, .L5+60
 264 0080 FFF7FEFF 		bl	PID_HandleInit
 182:Src/mc_tasks.c **** 
 183:Src/mc_tasks.c ****     /********************************************************/
 184:Src/mc_tasks.c ****     /*   Bus voltage sensor component initialization        */
 185:Src/mc_tasks.c ****     /********************************************************/
 186:Src/mc_tasks.c ****     (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 265              		.loc 2 186 5
 266 0084 4048     		ldr	r0, .L5+64
 267 0086 FFF7FEFF 		bl	RCM_RegisterRegConv
 187:Src/mc_tasks.c ****     RVBS_Init(&BusVoltageSensor_M1);
 268              		.loc 2 187 5
 269 008a 4048     		ldr	r0, .L5+68
 270 008c FFF7FEFF 		bl	RVBS_Init
 188:Src/mc_tasks.c **** 
 189:Src/mc_tasks.c ****     /*************************************************/
 190:Src/mc_tasks.c ****     /*   Power measurement component initialization  */
 191:Src/mc_tasks.c ****     /*************************************************/
 192:Src/mc_tasks.c ****     pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 271              		.loc 2 192 9
 272 0090 3F4B     		ldr	r3, .L5+72
 273 0092 1B68     		ldr	r3, [r3]
 274              		.loc 2 192 20
 275 0094 3D4A     		ldr	r2, .L5+68
 276 0096 DA60     		str	r2, [r3, #12]
 193:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 277              		.loc 2 193 9
 278 0098 3D4B     		ldr	r3, .L5+72
 279 009a 1B68     		ldr	r3, [r3]
 280              		.loc 2 193 24
 281 009c 3D4A     		ldr	r2, .L5+76
 282 009e 9A60     		str	r2, [r3, #8]
 194:Src/mc_tasks.c **** 
 195:Src/mc_tasks.c ****     /*******************************************************/
 196:Src/mc_tasks.c ****     /*   Temperature measurement component initialization  */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 23


 197:Src/mc_tasks.c ****     /*******************************************************/
 198:Src/mc_tasks.c ****     (void)RCM_RegisterRegConv(&TempRegConv_M1);
 283              		.loc 2 198 5
 284 00a0 3D48     		ldr	r0, .L5+80
 285 00a2 FFF7FEFF 		bl	RCM_RegisterRegConv
 199:Src/mc_tasks.c ****     NTC_Init(&TempSensor_M1);
 286              		.loc 2 199 5
 287 00a6 3D48     		ldr	r0, .L5+84
 288 00a8 FFF7FEFF 		bl	NTC_Init
 200:Src/mc_tasks.c **** 
 201:Src/mc_tasks.c ****     pREMNG[M1] = &RampExtMngrHFParamsM1;
 289              		.loc 2 201 16
 290 00ac 3C4B     		ldr	r3, .L5+88
 291 00ae 3D4A     		ldr	r2, .L5+92
 292 00b0 1A60     		str	r2, [r3]
 202:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 293              		.loc 2 202 5
 294 00b2 3B4B     		ldr	r3, .L5+88
 295 00b4 1B68     		ldr	r3, [r3]
 296 00b6 1846     		mov	r0, r3
 297 00b8 FFF7FEFF 		bl	REMNG_Init
 203:Src/mc_tasks.c **** 
 204:Src/mc_tasks.c ****     FOC_Clear(M1);
 298              		.loc 2 204 5
 299 00bc 0020     		movs	r0, #0
 300 00be FFF7FEFF 		bl	FOC_Clear
 205:Src/mc_tasks.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 301              		.loc 2 205 29
 302 00c2 344B     		ldr	r3, .L5+76
 303 00c4 0122     		movs	r2, #1
 304 00c6 83F82420 		strb	r2, [r3, #36]
 206:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 305              		.loc 2 206 26
 306 00ca 264B     		ldr	r3, .L5+28
 307 00cc 1B68     		ldr	r3, [r3]
 308 00ce 314C     		ldr	r4, .L5+76
 309 00d0 1846     		mov	r0, r3
 310 00d2 FFF7FEFF 		bl	STC_GetDefaultIqdref
 311 00d6 0346     		mov	r3, r0
 312 00d8 2361     		str	r3, [r4, #16]
 207:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 313              		.loc 2 207 29
 314 00da 224B     		ldr	r3, .L5+28
 315 00dc 1B68     		ldr	r3, [r3]
 316 00de 1846     		mov	r0, r3
 317 00e0 FFF7FEFF 		bl	STC_GetDefaultIqdref
 318 00e4 0346     		mov	r3, r0
 319 00e6 FB60     		str	r3, [r7, #12]
 320              		.loc 2 207 59
 321 00e8 B7F90E20 		ldrsh	r2, [r7, #14]
 322              		.loc 2 207 27
 323 00ec 294B     		ldr	r3, .L5+76
 324 00ee 9A82     		strh	r2, [r3, #20]	@ movhi
 208:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 325              		.loc 2 208 5
 326 00f0 1C4B     		ldr	r3, .L5+28
 327 00f2 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 24


 328 00f4 2C4B     		ldr	r3, .L5+96
 329 00f6 1A68     		ldr	r2, [r3]
 330 00f8 144B     		ldr	r3, .L5+4
 331 00fa 1B68     		ldr	r3, [r3]
 332 00fc 0093     		str	r3, [sp]
 333 00fe 1346     		mov	r3, r2
 334 0100 244A     		ldr	r2, .L5+76
 335 0102 2A48     		ldr	r0, .L5+100
 336 0104 FFF7FEFF 		bl	MCI_Init
 209:Src/mc_tasks.c ****    Mci[M1].pScale = &scaleParams_M1;
 337              		.loc 2 209 19
 338 0108 284B     		ldr	r3, .L5+100
 339 010a 294A     		ldr	r2, .L5+104
 340 010c 1A62     		str	r2, [r3, #32]
 210:Src/mc_tasks.c **** 
 211:Src/mc_tasks.c ****     MCI_ExecSpeedRamp(&Mci[M1],
 341              		.loc 2 211 5
 342 010e 154B     		ldr	r3, .L5+28
 343 0110 1B68     		ldr	r3, [r3]
 344 0112 1846     		mov	r0, r3
 345 0114 FFF7FEFF 		bl	STC_GetMecSpeedRefUnitDefault
 346 0118 0346     		mov	r3, r0
 347 011a 0022     		movs	r2, #0
 348 011c 1946     		mov	r1, r3
 349 011e 2348     		ldr	r0, .L5+100
 350 0120 FFF7FEFF 		bl	MCI_ExecSpeedRamp
 212:Src/mc_tasks.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /* First command to STC */
 213:Src/mc_tasks.c ****     Mci[M1].pPerfMeasure = &PerfTraces;
 351              		.loc 2 213 26
 352 0124 214B     		ldr	r3, .L5+100
 353 0126 234A     		ldr	r2, .L5+108
 354 0128 DA60     		str	r2, [r3, #12]
 214:Src/mc_tasks.c ****     MC_Perf_Measure_Init(&PerfTraces);
 355              		.loc 2 214 5
 356 012a 2248     		ldr	r0, .L5+108
 357 012c FFF7FEFF 		bl	MC_Perf_Measure_Init
 215:Src/mc_tasks.c ****     pMCIList[M1] = &Mci[M1];
 358              		.loc 2 215 18
 359 0130 7B68     		ldr	r3, [r7, #4]
 360 0132 1E4A     		ldr	r2, .L5+100
 361 0134 1A60     		str	r2, [r3]
 216:Src/mc_tasks.c **** 
 217:Src/mc_tasks.c ****     /* Applicative hook in MCBoot() */
 218:Src/mc_tasks.c ****     MC_APP_BootHook();
 362              		.loc 2 218 5
 363 0136 FFF7FEFF 		bl	MC_APP_BootHook
 219:Src/mc_tasks.c **** 
 220:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 2 */
 221:Src/mc_tasks.c **** 
 222:Src/mc_tasks.c ****     /* USER CODE END MCboot 2 */
 223:Src/mc_tasks.c **** 
 224:Src/mc_tasks.c ****     bMCBootCompleted = 1U;
 364              		.loc 2 224 22
 365 013a 034B     		ldr	r3, .L5
 366 013c 0122     		movs	r2, #1
 367 013e 1A70     		strb	r2, [r3]
 368              	.L4:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 25


 225:Src/mc_tasks.c ****   }
 226:Src/mc_tasks.c **** }
 369              		.loc 2 226 1
 370 0140 00BF     		nop
 371 0142 1437     		adds	r7, r7, #20
 372              	.LCFI9:
 373              		.cfi_def_cfa_offset 12
 374 0144 BD46     		mov	sp, r7
 375              	.LCFI10:
 376              		.cfi_def_cfa_register 13
 377              		@ sp needed
 378 0146 90BD     		pop	{r4, r7, pc}
 379              	.L6:
 380              		.align	2
 381              	.L5:
 382 0148 00000000 		.word	bMCBootCompleted
 383 014c 00000000 		.word	pwmcHandle
 384 0150 00000000 		.word	PWM_Handle_M1
 385 0154 00000000 		.word	aspepOverUartA
 386 0158 00000000 		.word	PIDSpeedHandle_M1
 387 015c 00000000 		.word	ENCODER_M1
 388 0160 00000000 		.word	HALL_M1
 389 0164 00000000 		.word	pSTC
 390 0168 00000000 		.word	VirtualSpeedSensorM1
 391 016c 00000000 		.word	EncAlignCtrlM1
 392 0170 00000000 		.word	pEAC
 393 0174 00000000 		.word	PID_PosParamsM1
 394 0178 00000000 		.word	SpeednTorqCtrlM1
 395 017c 00000000 		.word	PosCtrlM1
 396 0180 00000000 		.word	PIDIqHandle_M1
 397 0184 00000000 		.word	PIDIdHandle_M1
 398 0188 00000000 		.word	VbusRegConv_M1
 399 018c 00000000 		.word	BusVoltageSensor_M1
 400 0190 00000000 		.word	pMPM
 401 0194 00000000 		.word	FOCVars
 402 0198 00000000 		.word	TempRegConv_M1
 403 019c 00000000 		.word	TempSensor_M1
 404 01a0 00000000 		.word	pREMNG
 405 01a4 00000000 		.word	RampExtMngrHFParamsM1
 406 01a8 00000000 		.word	pPosCtrl
 407 01ac 00000000 		.word	Mci
 408 01b0 00000000 		.word	scaleParams_M1
 409 01b4 00000000 		.word	PerfTraces
 410              		.cfi_endproc
 411              	.LFE1095:
 413              		.section	.text.MC_RunMotorControlTasks,"ax",%progbits
 414              		.align	1
 415              		.weak	MC_RunMotorControlTasks
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 420              	MC_RunMotorControlTasks:
 421              	.LFB1096:
 227:Src/mc_tasks.c **** 
 228:Src/mc_tasks.c **** /**
 229:Src/mc_tasks.c ****  * @brief Runs all the Tasks of the Motor Control cockpit
 230:Src/mc_tasks.c ****  *
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 26


 231:Src/mc_tasks.c ****  * This function is to be called periodically at least at the Medium Frequency task
 232:Src/mc_tasks.c ****  * rate (It is typically called on the Systick interrupt). Exact invokation rate is
 233:Src/mc_tasks.c ****  * the Speed regulator execution rate set in the Motor Contorl Workbench.
 234:Src/mc_tasks.c ****  *
 235:Src/mc_tasks.c ****  * The following tasks are executed in this order:
 236:Src/mc_tasks.c ****  *
 237:Src/mc_tasks.c ****  * - Medium Frequency Tasks of each motors.
 238:Src/mc_tasks.c ****  * - Safety Task.
 239:Src/mc_tasks.c ****  * - Power Factor Correction Task (if enabled).
 240:Src/mc_tasks.c ****  * - User Interface task.
 241:Src/mc_tasks.c ****  */
 242:Src/mc_tasks.c **** __weak void MC_RunMotorControlTasks(void)
 243:Src/mc_tasks.c **** {
 422              		.loc 2 243 1
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426 0000 80B5     		push	{r7, lr}
 427              	.LCFI11:
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 7, -8
 430              		.cfi_offset 14, -4
 431 0002 00AF     		add	r7, sp, #0
 432              	.LCFI12:
 433              		.cfi_def_cfa_register 7
 244:Src/mc_tasks.c ****   if (0U == bMCBootCompleted)
 434              		.loc 2 244 10
 435 0004 044B     		ldr	r3, .L10
 436 0006 1B78     		ldrb	r3, [r3]
 437 0008 DBB2     		uxtb	r3, r3
 438              		.loc 2 244 6
 439 000a 002B     		cmp	r3, #0
 440 000c 01D0     		beq	.L9
 245:Src/mc_tasks.c ****   {
 246:Src/mc_tasks.c ****     /* Nothing to do */
 247:Src/mc_tasks.c ****   }
 248:Src/mc_tasks.c ****   else
 249:Src/mc_tasks.c ****   {
 250:Src/mc_tasks.c ****     /* ** Medium Frequency Tasks ** */
 251:Src/mc_tasks.c ****     MC_Scheduler();
 441              		.loc 2 251 5
 442 000e FFF7FEFF 		bl	MC_Scheduler
 443              	.L9:
 252:Src/mc_tasks.c ****   }
 253:Src/mc_tasks.c **** }
 444              		.loc 2 253 1
 445 0012 00BF     		nop
 446 0014 80BD     		pop	{r7, pc}
 447              	.L11:
 448 0016 00BF     		.align	2
 449              	.L10:
 450 0018 00000000 		.word	bMCBootCompleted
 451              		.cfi_endproc
 452              	.LFE1096:
 454              		.section	.text.TSK_MF_StopProcessing,"ax",%progbits
 455              		.align	1
 456              		.global	TSK_MF_StopProcessing
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 27


 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 461              	TSK_MF_StopProcessing:
 462              	.LFB1097:
 254:Src/mc_tasks.c **** 
 255:Src/mc_tasks.c **** /**
 256:Src/mc_tasks.c ****  * @brief Performs stop process and update the state machine.This function
 257:Src/mc_tasks.c ****  *        shall be called only during medium frequency task.
 258:Src/mc_tasks.c ****  */
 259:Src/mc_tasks.c **** void TSK_MF_StopProcessing(uint8_t motor)
 260:Src/mc_tasks.c **** {
 463              		.loc 2 260 1
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 8
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467 0000 80B5     		push	{r7, lr}
 468              	.LCFI13:
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 7, -8
 471              		.cfi_offset 14, -4
 472 0002 82B0     		sub	sp, sp, #8
 473              	.LCFI14:
 474              		.cfi_def_cfa_offset 16
 475 0004 00AF     		add	r7, sp, #0
 476              	.LCFI15:
 477              		.cfi_def_cfa_register 7
 478 0006 0346     		mov	r3, r0
 479 0008 FB71     		strb	r3, [r7, #7]
 261:Src/mc_tasks.c ****     //R3_1_SwitchOffPWM(pwmcHandle[motor]);
 262:Src/mc_tasks.c **** 
 263:Src/mc_tasks.c ****   FOC_Clear(motor);
 480              		.loc 2 263 3
 481 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 482 000c 1846     		mov	r0, r3
 483 000e FFF7FEFF 		bl	FOC_Clear
 264:Src/mc_tasks.c ****   PQD_Clear(pMPM[motor]);
 484              		.loc 2 264 3
 485 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 486 0014 0B4A     		ldr	r2, .L13
 487 0016 52F82330 		ldr	r3, [r2, r3, lsl #2]
 488 001a 1846     		mov	r0, r3
 489 001c FFF7FEFF 		bl	PQD_Clear
 265:Src/mc_tasks.c ****   TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 490              		.loc 2 265 3
 491 0020 4FF44870 		mov	r0, #800
 492 0024 FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 266:Src/mc_tasks.c ****   Mci[motor].State = STOP;
 493              		.loc 2 266 13
 494 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 495              		.loc 2 266 20
 496 002a 0749     		ldr	r1, .L13+4
 497 002c 1346     		mov	r3, r2
 498 002e 5B00     		lsls	r3, r3, #1
 499 0030 1344     		add	r3, r3, r2
 500 0032 1B01     		lsls	r3, r3, #4
 501 0034 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 28


 502 0036 2733     		adds	r3, r3, #39
 503 0038 0822     		movs	r2, #8
 504 003a 1A70     		strb	r2, [r3]
 267:Src/mc_tasks.c **** }
 505              		.loc 2 267 1
 506 003c 00BF     		nop
 507 003e 0837     		adds	r7, r7, #8
 508              	.LCFI16:
 509              		.cfi_def_cfa_offset 8
 510 0040 BD46     		mov	sp, r7
 511              	.LCFI17:
 512              		.cfi_def_cfa_register 13
 513              		@ sp needed
 514 0042 80BD     		pop	{r7, pc}
 515              	.L14:
 516              		.align	2
 517              	.L13:
 518 0044 00000000 		.word	pMPM
 519 0048 00000000 		.word	Mci
 520              		.cfi_endproc
 521              	.LFE1097:
 523              		.section	.text.MC_Scheduler,"ax",%progbits
 524              		.align	1
 525              		.weak	MC_Scheduler
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 530              	MC_Scheduler:
 531              	.LFB1098:
 268:Src/mc_tasks.c **** 
 269:Src/mc_tasks.c **** /**
 270:Src/mc_tasks.c ****  * @brief  Executes the Medium Frequency Task functions for each drive instance.
 271:Src/mc_tasks.c ****  *
 272:Src/mc_tasks.c ****  * It is to be clocked at the Systick frequency.
 273:Src/mc_tasks.c ****  */
 274:Src/mc_tasks.c **** __weak void MC_Scheduler(void)
 275:Src/mc_tasks.c **** {
 532              		.loc 2 275 1
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 1, uses_anonymous_args = 0
 536 0000 98B5     		push	{r3, r4, r7, lr}
 537              	.LCFI18:
 538              		.cfi_def_cfa_offset 16
 539              		.cfi_offset 3, -16
 540              		.cfi_offset 4, -12
 541              		.cfi_offset 7, -8
 542              		.cfi_offset 14, -4
 543 0002 00AF     		add	r7, sp, #0
 544              	.LCFI19:
 545              		.cfi_def_cfa_register 7
 276:Src/mc_tasks.c **** /* USER CODE BEGIN MC_Scheduler 0 */
 277:Src/mc_tasks.c **** 
 278:Src/mc_tasks.c **** /* USER CODE END MC_Scheduler 0 */
 279:Src/mc_tasks.c **** 
 280:Src/mc_tasks.c ****   if (((uint8_t)1) == bMCBootCompleted)
 546              		.loc 2 280 20
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 29


 547 0004 2D4B     		ldr	r3, .L22
 548 0006 1B78     		ldrb	r3, [r3]
 549 0008 DBB2     		uxtb	r3, r3
 550              		.loc 2 280 6
 551 000a 012B     		cmp	r3, #1
 552 000c 54D1     		bne	.L21
 281:Src/mc_tasks.c ****   {
 282:Src/mc_tasks.c ****     if(hMFTaskCounterM1 > 0u)
 553              		.loc 2 282 25
 554 000e 2C4B     		ldr	r3, .L22+4
 555 0010 1B88     		ldrh	r3, [r3]
 556              		.loc 2 282 7
 557 0012 002B     		cmp	r3, #0
 558 0014 06D0     		beq	.L17
 283:Src/mc_tasks.c ****     {
 284:Src/mc_tasks.c ****       hMFTaskCounterM1--;
 559              		.loc 2 284 23
 560 0016 2A4B     		ldr	r3, .L22+4
 561 0018 1B88     		ldrh	r3, [r3]
 562 001a 013B     		subs	r3, r3, #1
 563 001c 9AB2     		uxth	r2, r3
 564 001e 284B     		ldr	r3, .L22+4
 565 0020 1A80     		strh	r2, [r3]	@ movhi
 566 0022 31E0     		b	.L18
 567              	.L17:
 285:Src/mc_tasks.c ****     }
 286:Src/mc_tasks.c ****     else
 287:Src/mc_tasks.c ****     {
 288:Src/mc_tasks.c ****       TSK_MediumFrequencyTaskM1();
 568              		.loc 2 288 7
 569 0024 FFF7FEFF 		bl	TSK_MediumFrequencyTaskM1
 289:Src/mc_tasks.c **** 
 290:Src/mc_tasks.c ****       /* Applicative hook at end of Medium Frequency for Motor 1 */
 291:Src/mc_tasks.c ****       MC_APP_PostMediumFrequencyHook_M1();
 570              		.loc 2 291 7
 571 0028 FFF7FEFF 		bl	MC_APP_PostMediumFrequencyHook_M1
 292:Src/mc_tasks.c **** 
 293:Src/mc_tasks.c ****       MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTr
 572              		.loc 2 293 47
 573 002c 254B     		ldr	r3, .L22+8
 574 002e 1B68     		ldr	r3, [r3]
 575              		.loc 2 293 63
 576 0030 9B68     		ldr	r3, [r3, #8]
 577              		.loc 2 293 33
 578 0032 244A     		ldr	r2, .L22+8
 579 0034 1268     		ldr	r2, [r2]
 580 0036 2449     		ldr	r1, .L22+12
 581 0038 1046     		mov	r0, r2
 582 003a 9847     		blx	r3
 583              	.LVL0:
 584 003c 0346     		mov	r3, r0
 585              		.loc 2 293 31
 586 003e 214A     		ldr	r2, .L22+8
 587 0040 5360     		str	r3, [r2, #4]
 294:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 295:Src/mc_tasks.c ****       if ( 0U == MCP_Over_UartA.rxBuffer)
 588              		.loc 2 295 32
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 30


 589 0042 204B     		ldr	r3, .L22+8
 590 0044 5B68     		ldr	r3, [r3, #4]
 591              		.loc 2 295 10
 592 0046 002B     		cmp	r3, #0
 593 0048 1BD0     		beq	.L19
 296:Src/mc_tasks.c ****       {
 297:Src/mc_tasks.c ****         /* Nothing to do */
 298:Src/mc_tasks.c ****       }
 299:Src/mc_tasks.c ****       else
 300:Src/mc_tasks.c ****       {
 301:Src/mc_tasks.c ****         /* Synchronous answer */
 302:Src/mc_tasks.c ****         if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 594              		.loc 2 302 33
 595 004a 1E4B     		ldr	r3, .L22+8
 596 004c 1B68     		ldr	r3, [r3]
 597              		.loc 2 302 49
 598 004e 1B68     		ldr	r3, [r3]
 599              		.loc 2 302 19
 600 0050 1C4A     		ldr	r2, .L22+8
 601 0052 1068     		ldr	r0, [r2]
 602 0054 0A22     		movs	r2, #10
 603 0056 1D49     		ldr	r1, .L22+16
 604 0058 9847     		blx	r3
 605              	.LVL1:
 606 005a 0346     		mov	r3, r0
 607              		.loc 2 302 16
 608 005c 83F00103 		eor	r3, r3, #1
 609 0060 DBB2     		uxtb	r3, r3
 610              		.loc 2 302 12
 611 0062 002B     		cmp	r3, #0
 612 0064 0DD1     		bne	.L19
 303:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 304:Src/mc_tasks.c ****                                                      MCTL_SYNC))
 305:Src/mc_tasks.c ****         {
 306:Src/mc_tasks.c ****           /* No buffer available to build the answer ... should not occur */
 307:Src/mc_tasks.c ****         }
 308:Src/mc_tasks.c ****         else
 309:Src/mc_tasks.c ****         {
 310:Src/mc_tasks.c ****           MCP_ReceivedPacket(&MCP_Over_UartA);
 613              		.loc 2 310 11
 614 0066 1748     		ldr	r0, .L22+8
 615 0068 FFF7FEFF 		bl	MCP_ReceivedPacket
 311:Src/mc_tasks.c ****           MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_Uart
 616              		.loc 2 311 25
 617 006c 154B     		ldr	r3, .L22+8
 618 006e 1B68     		ldr	r3, [r3]
 619              		.loc 2 311 41
 620 0070 5C68     		ldr	r4, [r3, #4]
 621              		.loc 2 311 11
 622 0072 144B     		ldr	r3, .L22+8
 623 0074 1868     		ldr	r0, [r3]
 624              		.loc 2 311 101
 625 0076 134B     		ldr	r3, .L22+8
 626 0078 9968     		ldr	r1, [r3, #8]
 627              		.loc 2 311 11
 628 007a 124B     		ldr	r3, .L22+8
 629 007c DA89     		ldrh	r2, [r3, #14]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 31


 630 007e 0A23     		movs	r3, #10
 631 0080 A047     		blx	r4
 632              	.LVL2:
 633              	.L19:
 312:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 313:Src/mc_tasks.c ****           /* No buffer available to build the answer ... should not occur */
 314:Src/mc_tasks.c ****         }
 315:Src/mc_tasks.c ****       }
 316:Src/mc_tasks.c **** 
 317:Src/mc_tasks.c ****       /* USER CODE BEGIN MC_Scheduler 1 */
 318:Src/mc_tasks.c **** 
 319:Src/mc_tasks.c ****       /* USER CODE END MC_Scheduler 1 */
 320:Src/mc_tasks.c ****       hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 634              		.loc 2 320 24
 635 0082 0F4B     		ldr	r3, .L22+4
 636 0084 0122     		movs	r2, #1
 637 0086 1A80     		strh	r2, [r3]	@ movhi
 638              	.L18:
 321:Src/mc_tasks.c ****     }
 322:Src/mc_tasks.c ****     if(hBootCapDelayCounterM1 > 0U)
 639              		.loc 2 322 31
 640 0088 114B     		ldr	r3, .L22+20
 641 008a 1B88     		ldrh	r3, [r3]	@ movhi
 642 008c 9BB2     		uxth	r3, r3
 643              		.loc 2 322 7
 644 008e 002B     		cmp	r3, #0
 645 0090 06D0     		beq	.L20
 323:Src/mc_tasks.c ****     {
 324:Src/mc_tasks.c ****       hBootCapDelayCounterM1--;
 646              		.loc 2 324 29
 647 0092 0F4B     		ldr	r3, .L22+20
 648 0094 1B88     		ldrh	r3, [r3]	@ movhi
 649 0096 9BB2     		uxth	r3, r3
 650 0098 013B     		subs	r3, r3, #1
 651 009a 9AB2     		uxth	r2, r3
 652 009c 0C4B     		ldr	r3, .L22+20
 653 009e 1A80     		strh	r2, [r3]	@ movhi
 654              	.L20:
 325:Src/mc_tasks.c ****     }
 326:Src/mc_tasks.c ****     else
 327:Src/mc_tasks.c ****     {
 328:Src/mc_tasks.c ****       /* Nothing to do */
 329:Src/mc_tasks.c ****     }
 330:Src/mc_tasks.c ****     if(hStopPermanencyCounterM1 > 0U)
 655              		.loc 2 330 33
 656 00a0 0C4B     		ldr	r3, .L22+24
 657 00a2 1B88     		ldrh	r3, [r3]	@ movhi
 658 00a4 9BB2     		uxth	r3, r3
 659              		.loc 2 330 7
 660 00a6 002B     		cmp	r3, #0
 661 00a8 06D0     		beq	.L21
 331:Src/mc_tasks.c ****     {
 332:Src/mc_tasks.c ****       hStopPermanencyCounterM1--;
 662              		.loc 2 332 31
 663 00aa 0A4B     		ldr	r3, .L22+24
 664 00ac 1B88     		ldrh	r3, [r3]	@ movhi
 665 00ae 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 32


 666 00b0 013B     		subs	r3, r3, #1
 667 00b2 9AB2     		uxth	r2, r3
 668 00b4 074B     		ldr	r3, .L22+24
 669 00b6 1A80     		strh	r2, [r3]	@ movhi
 670              	.L21:
 333:Src/mc_tasks.c ****     }
 334:Src/mc_tasks.c ****     else
 335:Src/mc_tasks.c ****     {
 336:Src/mc_tasks.c ****       /* Nothing to do */
 337:Src/mc_tasks.c ****     }
 338:Src/mc_tasks.c ****   }
 339:Src/mc_tasks.c ****   else
 340:Src/mc_tasks.c ****   {
 341:Src/mc_tasks.c ****     /* Nothing to do */
 342:Src/mc_tasks.c ****   }
 343:Src/mc_tasks.c ****   /* USER CODE BEGIN MC_Scheduler 2 */
 344:Src/mc_tasks.c **** 
 345:Src/mc_tasks.c ****   /* USER CODE END MC_Scheduler 2 */
 346:Src/mc_tasks.c **** }
 671              		.loc 2 346 1
 672 00b8 00BF     		nop
 673 00ba 98BD     		pop	{r3, r4, r7, pc}
 674              	.L23:
 675              		.align	2
 676              	.L22:
 677 00bc 00000000 		.word	bMCBootCompleted
 678 00c0 00000000 		.word	hMFTaskCounterM1
 679 00c4 00000000 		.word	MCP_Over_UartA
 680 00c8 0C000000 		.word	MCP_Over_UartA+12
 681 00cc 08000000 		.word	MCP_Over_UartA+8
 682 00d0 00000000 		.word	hBootCapDelayCounterM1
 683 00d4 00000000 		.word	hStopPermanencyCounterM1
 684              		.cfi_endproc
 685              	.LFE1098:
 687              		.section	.text.TSK_MediumFrequencyTaskM1,"ax",%progbits
 688              		.align	1
 689              		.weak	TSK_MediumFrequencyTaskM1
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 694              	TSK_MediumFrequencyTaskM1:
 695              	.LFB1099:
 347:Src/mc_tasks.c **** 
 348:Src/mc_tasks.c **** /**
 349:Src/mc_tasks.c ****   * @brief Executes medium frequency periodic Motor Control tasks
 350:Src/mc_tasks.c ****   *
 351:Src/mc_tasks.c ****   * This function performs some of the control duties on Motor 1 according to the
 352:Src/mc_tasks.c ****   * present state of its state machine. In particular, duties requiring a periodic
 353:Src/mc_tasks.c ****   * execution at a medium frequency rate (such as the speed controller for instance)
 354:Src/mc_tasks.c ****   * are executed here.
 355:Src/mc_tasks.c ****   */
 356:Src/mc_tasks.c **** __weak void TSK_MediumFrequencyTaskM1(void)
 357:Src/mc_tasks.c **** {
 696              		.loc 2 357 1
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 8
 699              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 33


 700 0000 80B5     		push	{r7, lr}
 701              	.LCFI20:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 7, -8
 704              		.cfi_offset 14, -4
 705 0002 82B0     		sub	sp, sp, #8
 706              	.LCFI21:
 707              		.cfi_def_cfa_offset 16
 708 0004 00AF     		add	r7, sp, #0
 709              	.LCFI22:
 710              		.cfi_def_cfa_register 7
 358:Src/mc_tasks.c ****   MC_BG_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 711              		.loc 2 358 3
 712 0006 0121     		movs	r1, #1
 713 0008 B948     		ldr	r0, .L66
 714 000a FFF7FEFF 		bl	MC_BG_Perf_Measure_Start
 359:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 360:Src/mc_tasks.c **** 
 361:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 0 */
 362:Src/mc_tasks.c **** 
 363:Src/mc_tasks.c ****   int16_t wAux = 0;
 715              		.loc 2 363 11
 716 000e 0023     		movs	r3, #0
 717 0010 BB80     		strh	r3, [r7, #4]	@ movhi
 364:Src/mc_tasks.c ****   (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 718              		.loc 2 364 9
 719 0012 3B1D     		adds	r3, r7, #4
 720 0014 1946     		mov	r1, r3
 721 0016 B748     		ldr	r0, .L66+4
 722 0018 FFF7FEFF 		bl	ENC_CalcAvrgMecSpeedUnit
 365:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 723              		.loc 2 365 3
 724 001c B64B     		ldr	r3, .L66+8
 725 001e 1B68     		ldr	r3, [r3]
 726 0020 1846     		mov	r0, r3
 727 0022 FFF7FEFF 		bl	PQD_CalcElMotorPower
 366:Src/mc_tasks.c **** 
 367:Src/mc_tasks.c ****   if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 728              		.loc 2 367 7
 729 0026 B548     		ldr	r0, .L66+12
 730 0028 FFF7FEFF 		bl	MCI_GetCurrentFaults
 731 002c 0346     		mov	r3, r0
 732              		.loc 2 367 6
 733 002e 002B     		cmp	r3, #0
 734 0030 40F0C681 		bne	.L25
 368:Src/mc_tasks.c ****   {
 369:Src/mc_tasks.c ****     if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 735              		.loc 2 369 9
 736 0034 B148     		ldr	r0, .L66+12
 737 0036 FFF7FEFF 		bl	MCI_GetOccurredFaults
 738 003a 0346     		mov	r3, r0
 739              		.loc 2 369 8
 740 003c 002B     		cmp	r3, #0
 741 003e 40F0BA81 		bne	.L26
 370:Src/mc_tasks.c ****     {
 371:Src/mc_tasks.c ****       switch (Mci[M1].State)
 742              		.loc 2 371 22
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 34


 743 0042 AE4B     		ldr	r3, .L66+12
 744 0044 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 745              		.loc 2 371 7
 746 0048 142B     		cmp	r3, #20
 747 004a 00F2BE81 		bhi	.L59
 748 004e 01A2     		adr	r2, .L29
 749 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 750              		.p2align 2
 751              	.L29:
 752 0054 A9000000 		.word	.L37+1
 753 0058 CB030000 		.word	.L59+1
 754 005c 2F020000 		.word	.L36+1
 755 0060 CB030000 		.word	.L59+1
 756 0064 CB030000 		.word	.L59+1
 757 0068 CB030000 		.word	.L59+1
 758 006c C5020000 		.word	.L35+1
 759 0070 CB030000 		.word	.L59+1
 760 0074 19030000 		.word	.L34+1
 761 0078 CB030000 		.word	.L59+1
 762 007c 51030000 		.word	.L33+1
 763 0080 35030000 		.word	.L32+1
 764 0084 CB030000 		.word	.L59+1
 765 0088 CB030000 		.word	.L59+1
 766 008c CB030000 		.word	.L59+1
 767 0090 CB030000 		.word	.L59+1
 768 0094 87010000 		.word	.L31+1
 769 0098 19010000 		.word	.L30+1
 770 009c CB030000 		.word	.L59+1
 771 00a0 CB030000 		.word	.L59+1
 772 00a4 5B030000 		.word	.L28+1
 773              		.p2align 1
 774              	.L37:
 372:Src/mc_tasks.c ****       {
 373:Src/mc_tasks.c **** 
 374:Src/mc_tasks.c ****         case IDLE:
 375:Src/mc_tasks.c ****         {
 376:Src/mc_tasks.c ****           if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand
 775              		.loc 2 376 36
 776 00a8 944B     		ldr	r3, .L66+12
 777 00aa 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 778              		.loc 2 376 14
 779 00ae 012B     		cmp	r3, #1
 780 00b0 05D0     		beq	.L38
 781              		.loc 2 376 86 discriminator 1
 782 00b2 924B     		ldr	r3, .L66+12
 783 00b4 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 784              		.loc 2 376 52 discriminator 1
 785 00b8 032B     		cmp	r3, #3
 786 00ba 40F08881 		bne	.L60
 787              	.L38:
 377:Src/mc_tasks.c ****           {
 378:Src/mc_tasks.c ****             if (pwmcHandle[M1]->offsetCalibStatus == false)
 788              		.loc 2 378 27
 789 00be 904B     		ldr	r3, .L66+16
 790 00c0 1B68     		ldr	r3, [r3]
 791              		.loc 2 378 31
 792 00c2 93F88130 		ldrb	r3, [r3, #129]	@ zero_extendqisi2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 35


 793              		.loc 2 378 51
 794 00c6 83F00103 		eor	r3, r3, #1
 795 00ca DBB2     		uxtb	r3, r3
 796              		.loc 2 378 16
 797 00cc 002B     		cmp	r3, #0
 798 00ce 0AD0     		beq	.L40
 379:Src/mc_tasks.c ****             {
 380:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 799              		.loc 2 380 21
 800 00d0 8B4B     		ldr	r3, .L66+16
 801 00d2 1B68     		ldr	r3, [r3]
 802 00d4 0021     		movs	r1, #0
 803 00d6 1846     		mov	r0, r3
 804 00d8 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 381:Src/mc_tasks.c ****               Mci[M1].State = OFFSET_CALIB;
 805              		.loc 2 381 29
 806 00dc 874B     		ldr	r3, .L66+12
 807 00de 1122     		movs	r2, #17
 808 00e0 83F82720 		strb	r2, [r3, #39]
 382:Src/mc_tasks.c ****             }
 383:Src/mc_tasks.c ****             else
 384:Src/mc_tasks.c ****             {
 385:Src/mc_tasks.c ****               /* Calibration already done. Enables only TIM channels */
 386:Src/mc_tasks.c ****               pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 387:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 388:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 389:Src/mc_tasks.c ****               TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 390:Src/mc_tasks.c ****               Mci[M1].State = CHARGE_BOOT_CAP;
 391:Src/mc_tasks.c ****             }
 392:Src/mc_tasks.c ****           }
 393:Src/mc_tasks.c ****           else
 394:Src/mc_tasks.c ****           {
 395:Src/mc_tasks.c ****             /* Nothing to be done, FW stays in IDLE state */
 396:Src/mc_tasks.c ****           }
 397:Src/mc_tasks.c ****           break;
 809              		.loc 2 397 11
 810 00e4 73E1     		b	.L60
 811              	.L40:
 386:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 812              		.loc 2 386 25
 813 00e6 864B     		ldr	r3, .L66+16
 814 00e8 1B68     		ldr	r3, [r3]
 386:Src/mc_tasks.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 815              		.loc 2 386 56
 816 00ea 0122     		movs	r2, #1
 817 00ec A3F86020 		strh	r2, [r3, #96]	@ movhi
 387:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 818              		.loc 2 387 21
 819 00f0 834B     		ldr	r3, .L66+16
 820 00f2 1B68     		ldr	r3, [r3]
 821 00f4 0121     		movs	r1, #1
 822 00f6 1846     		mov	r0, r3
 823 00f8 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 388:Src/mc_tasks.c ****               TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 824              		.loc 2 388 15
 825 00fc 804B     		ldr	r3, .L66+16
 826 00fe 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 36


 827 0100 0021     		movs	r1, #0
 828 0102 1846     		mov	r0, r3
 829 0104 FFF7FEFF 		bl	R3_1_TurnOnLowSides
 389:Src/mc_tasks.c ****               Mci[M1].State = CHARGE_BOOT_CAP;
 830              		.loc 2 389 15
 831 0108 1420     		movs	r0, #20
 832 010a FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 390:Src/mc_tasks.c ****             }
 833              		.loc 2 390 29
 834 010e 7B4B     		ldr	r3, .L66+12
 835 0110 1022     		movs	r2, #16
 836 0112 83F82720 		strb	r2, [r3, #39]
 837              		.loc 2 397 11
 838 0116 5AE1     		b	.L60
 839              	.L30:
 398:Src/mc_tasks.c ****         }
 399:Src/mc_tasks.c **** 
 400:Src/mc_tasks.c ****         case OFFSET_CALIB:
 401:Src/mc_tasks.c ****         {
 402:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 840              		.loc 2 402 34
 841 0118 784B     		ldr	r3, .L66+12
 842 011a 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 843              		.loc 2 402 14
 844 011e 052B     		cmp	r3, #5
 845 0120 03D1     		bne	.L42
 403:Src/mc_tasks.c ****           {
 404:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 846              		.loc 2 404 13
 847 0122 0020     		movs	r0, #0
 848 0124 FFF7FEFF 		bl	TSK_MF_StopProcessing
 405:Src/mc_tasks.c ****           }
 406:Src/mc_tasks.c ****           else
 407:Src/mc_tasks.c ****           {
 408:Src/mc_tasks.c ****             if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 409:Src/mc_tasks.c ****             {
 410:Src/mc_tasks.c ****               if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 411:Src/mc_tasks.c ****               {
 412:Src/mc_tasks.c ****                 FOC_Clear(M1);
 413:Src/mc_tasks.c ****                 PQD_Clear(pMPM[M1]);
 414:Src/mc_tasks.c ****                 Mci[M1].DirectCommand = MCI_NO_COMMAND;
 415:Src/mc_tasks.c ****                 Mci[M1].State = IDLE;
 416:Src/mc_tasks.c ****               }
 417:Src/mc_tasks.c ****               else
 418:Src/mc_tasks.c ****               {
 419:Src/mc_tasks.c ****                 R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 420:Src/mc_tasks.c ****                 TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 421:Src/mc_tasks.c ****                 Mci[M1].State = CHARGE_BOOT_CAP;
 422:Src/mc_tasks.c ****               }
 423:Src/mc_tasks.c ****             }
 424:Src/mc_tasks.c ****             else
 425:Src/mc_tasks.c ****             {
 426:Src/mc_tasks.c ****               /* Nothing to be done, FW waits for offset calibration to finish */
 427:Src/mc_tasks.c ****             }
 428:Src/mc_tasks.c ****           }
 429:Src/mc_tasks.c ****           break;
 849              		.loc 2 429 11
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 37


 850 0128 53E1     		b	.L61
 851              	.L42:
 408:Src/mc_tasks.c ****             {
 852              		.loc 2 408 17
 853 012a 754B     		ldr	r3, .L66+16
 854 012c 1B68     		ldr	r3, [r3]
 855 012e 0121     		movs	r1, #1
 856 0130 1846     		mov	r0, r3
 857 0132 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 858 0136 0346     		mov	r3, r0
 408:Src/mc_tasks.c ****             {
 859              		.loc 2 408 16
 860 0138 002B     		cmp	r3, #0
 861 013a 00F04A81 		beq	.L61
 410:Src/mc_tasks.c ****               {
 862              		.loc 2 410 49
 863 013e 6F4B     		ldr	r3, .L66+12
 864 0140 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 410:Src/mc_tasks.c ****               {
 865              		.loc 2 410 18
 866 0144 032B     		cmp	r3, #3
 867 0146 10D1     		bne	.L44
 412:Src/mc_tasks.c ****                 PQD_Clear(pMPM[M1]);
 868              		.loc 2 412 17
 869 0148 0020     		movs	r0, #0
 870 014a FFF7FEFF 		bl	FOC_Clear
 413:Src/mc_tasks.c ****                 Mci[M1].DirectCommand = MCI_NO_COMMAND;
 871              		.loc 2 413 17
 872 014e 6A4B     		ldr	r3, .L66+8
 873 0150 1B68     		ldr	r3, [r3]
 874 0152 1846     		mov	r0, r3
 875 0154 FFF7FEFF 		bl	PQD_Clear
 414:Src/mc_tasks.c ****                 Mci[M1].State = IDLE;
 876              		.loc 2 414 39
 877 0158 684B     		ldr	r3, .L66+12
 878 015a 0022     		movs	r2, #0
 879 015c 83F82620 		strb	r2, [r3, #38]
 415:Src/mc_tasks.c ****               }
 880              		.loc 2 415 31
 881 0160 664B     		ldr	r3, .L66+12
 882 0162 0022     		movs	r2, #0
 883 0164 83F82720 		strb	r2, [r3, #39]
 884              		.loc 2 429 11
 885 0168 33E1     		b	.L61
 886              	.L44:
 419:Src/mc_tasks.c ****                 TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 887              		.loc 2 419 17
 888 016a 654B     		ldr	r3, .L66+16
 889 016c 1B68     		ldr	r3, [r3]
 890 016e 0021     		movs	r1, #0
 891 0170 1846     		mov	r0, r3
 892 0172 FFF7FEFF 		bl	R3_1_TurnOnLowSides
 420:Src/mc_tasks.c ****                 Mci[M1].State = CHARGE_BOOT_CAP;
 893              		.loc 2 420 17
 894 0176 1420     		movs	r0, #20
 895 0178 FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 421:Src/mc_tasks.c ****               }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 38


 896              		.loc 2 421 31
 897 017c 5F4B     		ldr	r3, .L66+12
 898 017e 1022     		movs	r2, #16
 899 0180 83F82720 		strb	r2, [r3, #39]
 900              		.loc 2 429 11
 901 0184 25E1     		b	.L61
 902              	.L31:
 430:Src/mc_tasks.c ****         }
 431:Src/mc_tasks.c **** 
 432:Src/mc_tasks.c ****         case CHARGE_BOOT_CAP:
 433:Src/mc_tasks.c ****         {
 434:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 903              		.loc 2 434 34
 904 0186 5D4B     		ldr	r3, .L66+12
 905 0188 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 906              		.loc 2 434 14
 907 018c 052B     		cmp	r3, #5
 908 018e 03D1     		bne	.L45
 435:Src/mc_tasks.c ****           {
 436:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 909              		.loc 2 436 13
 910 0190 0020     		movs	r0, #0
 911 0192 FFF7FEFF 		bl	TSK_MF_StopProcessing
 437:Src/mc_tasks.c ****           }
 438:Src/mc_tasks.c ****           else
 439:Src/mc_tasks.c ****           {
 440:Src/mc_tasks.c ****             if (TSK_ChargeBootCapDelayHasElapsedM1())
 441:Src/mc_tasks.c ****             {
 442:Src/mc_tasks.c ****               //R3_1_SwitchOffPWM(pwmcHandle[M1]);
 443:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 444:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 445:Src/mc_tasks.c ****               ENC_Clear(&ENCODER_M1);
 446:Src/mc_tasks.c ****               FOC_Clear( M1 );
 447:Src/mc_tasks.c **** 
 448:Src/mc_tasks.c ****               if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 449:Src/mc_tasks.c ****               {
 450:Src/mc_tasks.c ****                 EAC_StartAlignment(&EncAlignCtrlM1);
 451:Src/mc_tasks.c ****                 Mci[M1].State = ALIGNMENT;
 452:Src/mc_tasks.c ****               }
 453:Src/mc_tasks.c ****               else
 454:Src/mc_tasks.c ****               {
 455:Src/mc_tasks.c ****                 STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 456:Src/mc_tasks.c ****                 STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 457:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 458:Src/mc_tasks.c ****                 FOC_CalcCurrRef(M1);
 459:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 460:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 461:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 462:Src/mc_tasks.c ****               }
 463:Src/mc_tasks.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 464:Src/mc_tasks.c ****             }
 465:Src/mc_tasks.c ****             else
 466:Src/mc_tasks.c ****             {
 467:Src/mc_tasks.c ****               /* Nothing to be done, FW waits for bootstrap capacitor to charge */
 468:Src/mc_tasks.c ****             }
 469:Src/mc_tasks.c ****           }
 470:Src/mc_tasks.c ****           break;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 39


 912              		.loc 2 470 11
 913 0196 1EE1     		b	.L62
 914              	.L45:
 440:Src/mc_tasks.c ****             {
 915              		.loc 2 440 17
 916 0198 FFF7FEFF 		bl	TSK_ChargeBootCapDelayHasElapsedM1
 917 019c 0346     		mov	r3, r0
 440:Src/mc_tasks.c ****             {
 918              		.loc 2 440 16
 919 019e 002B     		cmp	r3, #0
 920 01a0 00F01981 		beq	.L62
 443:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 921              		.loc 2 443 39
 922 01a4 574B     		ldr	r3, .L66+20
 923 01a6 0122     		movs	r2, #1
 924 01a8 83F82420 		strb	r2, [r3, #36]
 444:Src/mc_tasks.c ****               ENC_Clear(&ENCODER_M1);
 925              		.loc 2 444 15
 926 01ac 564B     		ldr	r3, .L66+24
 927 01ae 1B68     		ldr	r3, [r3]
 928 01b0 5649     		ldr	r1, .L66+28
 929 01b2 1846     		mov	r0, r3
 930 01b4 FFF7FEFF 		bl	STC_SetSpeedSensor
 445:Src/mc_tasks.c ****               FOC_Clear( M1 );
 931              		.loc 2 445 15
 932 01b8 4E48     		ldr	r0, .L66+4
 933 01ba FFF7FEFF 		bl	ENC_Clear
 446:Src/mc_tasks.c **** 
 934              		.loc 2 446 15
 935 01be 0020     		movs	r0, #0
 936 01c0 FFF7FEFF 		bl	FOC_Clear
 448:Src/mc_tasks.c ****               {
 937              		.loc 2 448 19
 938 01c4 5248     		ldr	r0, .L66+32
 939 01c6 FFF7FEFF 		bl	EAC_IsAligned
 940 01ca 0346     		mov	r3, r0
 448:Src/mc_tasks.c ****               {
 941              		.loc 2 448 50
 942 01cc 83F00103 		eor	r3, r3, #1
 943 01d0 DBB2     		uxtb	r3, r3
 448:Src/mc_tasks.c ****               {
 944              		.loc 2 448 18
 945 01d2 002B     		cmp	r3, #0
 946 01d4 07D0     		beq	.L47
 450:Src/mc_tasks.c ****                 Mci[M1].State = ALIGNMENT;
 947              		.loc 2 450 17
 948 01d6 4E48     		ldr	r0, .L66+32
 949 01d8 FFF7FEFF 		bl	EAC_StartAlignment
 451:Src/mc_tasks.c ****               }
 950              		.loc 2 451 31
 951 01dc 474B     		ldr	r3, .L66+12
 952 01de 0222     		movs	r2, #2
 953 01e0 83F82720 		strb	r2, [r3, #39]
 954 01e4 1DE0     		b	.L48
 955              	.L47:
 455:Src/mc_tasks.c ****                 STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 956              		.loc 2 455 17
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 40


 957 01e6 484B     		ldr	r3, .L66+24
 958 01e8 1B68     		ldr	r3, [r3]
 959 01ea 0321     		movs	r1, #3
 960 01ec 1846     		mov	r0, r3
 961 01ee FFF7FEFF 		bl	STC_SetControlMode
 456:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 962              		.loc 2 456 17
 963 01f2 454B     		ldr	r3, .L66+24
 964 01f4 1B68     		ldr	r3, [r3]
 965 01f6 3F49     		ldr	r1, .L66+4
 966 01f8 1846     		mov	r0, r3
 967 01fa FFF7FEFF 		bl	STC_SetSpeedSensor
 457:Src/mc_tasks.c ****                 FOC_CalcCurrRef(M1);
 968              		.loc 2 457 17
 969 01fe 0020     		movs	r0, #0
 970 0200 FFF7FEFF 		bl	FOC_InitAdditionalMethods
 458:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 971              		.loc 2 458 17
 972 0204 0020     		movs	r0, #0
 973 0206 FFF7FEFF 		bl	FOC_CalcCurrRef
 459:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 974              		.loc 2 459 17
 975 020a 3F4B     		ldr	r3, .L66+24
 976 020c 1B68     		ldr	r3, [r3]
 977 020e 1846     		mov	r0, r3
 978 0210 FFF7FEFF 		bl	STC_ForceSpeedReferenceToCurrentSpeed
 460:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 979              		.loc 2 460 17
 980 0214 3948     		ldr	r0, .L66+12
 981 0216 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 461:Src/mc_tasks.c ****               }
 982              		.loc 2 461 31
 983 021a 384B     		ldr	r3, .L66+12
 984 021c 0622     		movs	r2, #6
 985 021e 83F82720 		strb	r2, [r3, #39]
 986              	.L48:
 463:Src/mc_tasks.c ****             }
 987              		.loc 2 463 15
 988 0222 374B     		ldr	r3, .L66+16
 989 0224 1B68     		ldr	r3, [r3]
 990 0226 1846     		mov	r0, r3
 991 0228 FFF7FEFF 		bl	PWMC_SwitchOnPWM
 992              		.loc 2 470 11
 993 022c D3E0     		b	.L62
 994              	.L36:
 471:Src/mc_tasks.c ****         }
 472:Src/mc_tasks.c **** 
 473:Src/mc_tasks.c ****         case ALIGNMENT:
 474:Src/mc_tasks.c ****         {
 475:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 995              		.loc 2 475 34
 996 022e 334B     		ldr	r3, .L66+12
 997 0230 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 998              		.loc 2 475 14
 999 0234 052B     		cmp	r3, #5
 1000 0236 03D1     		bne	.L49
 476:Src/mc_tasks.c ****           {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 41


 477:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 1001              		.loc 2 477 13
 1002 0238 0020     		movs	r0, #0
 1003 023a FFF7FEFF 		bl	TSK_MF_StopProcessing
 478:Src/mc_tasks.c ****           }
 479:Src/mc_tasks.c ****           else
 480:Src/mc_tasks.c ****           {
 481:Src/mc_tasks.c ****             bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 482:Src/mc_tasks.c ****             bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 483:Src/mc_tasks.c ****             if ((isAligned == false)  && (EACDone == false))
 484:Src/mc_tasks.c ****             {
 485:Src/mc_tasks.c ****               qd_t IqdRef;
 486:Src/mc_tasks.c ****               IqdRef.q = 0;
 487:Src/mc_tasks.c ****               IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 488:Src/mc_tasks.c ****               FOCVars[M1].Iqdref = IqdRef;
 489:Src/mc_tasks.c ****             }
 490:Src/mc_tasks.c ****             else
 491:Src/mc_tasks.c ****             {
 492:Src/mc_tasks.c ****               //R3_1_SwitchOffPWM( pwmcHandle[M1] );
 493:Src/mc_tasks.c ****               STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 494:Src/mc_tasks.c ****               STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 495:Src/mc_tasks.c ****               FOC_Clear(M1);
 496:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 497:Src/mc_tasks.c ****               TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 498:Src/mc_tasks.c ****               Mci[M1].State = WAIT_STOP_MOTOR;
 499:Src/mc_tasks.c ****               /* USER CODE BEGIN MediumFrequencyTask M1 EndOfEncAlignment */
 500:Src/mc_tasks.c **** 
 501:Src/mc_tasks.c ****               /* USER CODE END MediumFrequencyTask M1 EndOfEncAlignment */
 502:Src/mc_tasks.c ****             }
 503:Src/mc_tasks.c ****           }
 504:Src/mc_tasks.c ****           break;
 1004              		.loc 2 504 11
 1005 023e D1E0     		b	.L58
 1006              	.L49:
 1007              	.LBB2:
 481:Src/mc_tasks.c ****             bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 1008              		.loc 2 481 30
 1009 0240 3348     		ldr	r0, .L66+32
 1010 0242 FFF7FEFF 		bl	EAC_IsAligned
 1011 0246 0346     		mov	r3, r0
 1012 0248 FB71     		strb	r3, [r7, #7]
 482:Src/mc_tasks.c ****             if ((isAligned == false)  && (EACDone == false))
 1013              		.loc 2 482 28
 1014 024a 3148     		ldr	r0, .L66+32
 1015 024c FFF7FEFF 		bl	EAC_Exec
 1016 0250 0346     		mov	r3, r0
 1017 0252 BB71     		strb	r3, [r7, #6]
 483:Src/mc_tasks.c ****             {
 1018              		.loc 2 483 28
 1019 0254 FB79     		ldrb	r3, [r7, #7]
 1020 0256 83F00103 		eor	r3, r3, #1
 1021 025a DBB2     		uxtb	r3, r3
 483:Src/mc_tasks.c ****             {
 1022              		.loc 2 483 16
 1023 025c 002B     		cmp	r3, #0
 1024 025e 13D0     		beq	.L51
 483:Src/mc_tasks.c ****             {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 42


 1025              		.loc 2 483 51 discriminator 1
 1026 0260 BB79     		ldrb	r3, [r7, #6]
 1027 0262 83F00103 		eor	r3, r3, #1
 1028 0266 DBB2     		uxtb	r3, r3
 483:Src/mc_tasks.c ****             {
 1029              		.loc 2 483 39 discriminator 1
 1030 0268 002B     		cmp	r3, #0
 1031 026a 0DD0     		beq	.L51
 1032              	.LBB3:
 486:Src/mc_tasks.c ****               IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 1033              		.loc 2 486 24
 1034 026c 0023     		movs	r3, #0
 1035 026e 3B80     		strh	r3, [r7]	@ movhi
 487:Src/mc_tasks.c ****               FOCVars[M1].Iqdref = IqdRef;
 1036              		.loc 2 487 26
 1037 0270 254B     		ldr	r3, .L66+24
 1038 0272 1B68     		ldr	r3, [r3]
 1039 0274 1846     		mov	r0, r3
 1040 0276 FFF7FEFF 		bl	STC_CalcTorqueReference
 1041 027a 0346     		mov	r3, r0
 487:Src/mc_tasks.c ****               FOCVars[M1].Iqdref = IqdRef;
 1042              		.loc 2 487 24
 1043 027c 7B80     		strh	r3, [r7, #2]	@ movhi
 488:Src/mc_tasks.c ****             }
 1044              		.loc 2 488 34
 1045 027e 214A     		ldr	r2, .L66+20
 1046 0280 3B68     		ldr	r3, [r7]
 1047 0282 1361     		str	r3, [r2, #16]
 1048              	.LBE3:
 484:Src/mc_tasks.c ****               qd_t IqdRef;
 1049              		.loc 2 484 13
 1050 0284 00BF     		nop
 1051              	.LBE2:
 1052              		.loc 2 504 11
 1053 0286 ADE0     		b	.L58
 1054              	.L51:
 1055              	.LBB4:
 493:Src/mc_tasks.c ****               STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 1056              		.loc 2 493 15
 1057 0288 1F4B     		ldr	r3, .L66+24
 1058 028a 1B68     		ldr	r3, [r3]
 1059 028c 0321     		movs	r1, #3
 1060 028e 1846     		mov	r0, r3
 1061 0290 FFF7FEFF 		bl	STC_SetControlMode
 494:Src/mc_tasks.c ****               FOC_Clear(M1);
 1062              		.loc 2 494 15
 1063 0294 1C4B     		ldr	r3, .L66+24
 1064 0296 1B68     		ldr	r3, [r3]
 1065 0298 1649     		ldr	r1, .L66+4
 1066 029a 1846     		mov	r0, r3
 1067 029c FFF7FEFF 		bl	STC_SetSpeedSensor
 495:Src/mc_tasks.c ****               R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 1068              		.loc 2 495 15
 1069 02a0 0020     		movs	r0, #0
 1070 02a2 FFF7FEFF 		bl	FOC_Clear
 496:Src/mc_tasks.c ****               TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 1071              		.loc 2 496 15
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 43


 1072 02a6 164B     		ldr	r3, .L66+16
 1073 02a8 1B68     		ldr	r3, [r3]
 1074 02aa 0021     		movs	r1, #0
 1075 02ac 1846     		mov	r0, r3
 1076 02ae FFF7FEFF 		bl	R3_1_TurnOnLowSides
 497:Src/mc_tasks.c ****               Mci[M1].State = WAIT_STOP_MOTOR;
 1077              		.loc 2 497 15
 1078 02b2 4FF44870 		mov	r0, #800
 1079 02b6 FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 498:Src/mc_tasks.c ****               /* USER CODE BEGIN MediumFrequencyTask M1 EndOfEncAlignment */
 1080              		.loc 2 498 29
 1081 02ba 104B     		ldr	r3, .L66+12
 1082 02bc 1422     		movs	r2, #20
 1083 02be 83F82720 		strb	r2, [r3, #39]
 1084              	.LBE4:
 1085              		.loc 2 504 11
 1086 02c2 8FE0     		b	.L58
 1087              	.L35:
 505:Src/mc_tasks.c ****         }
 506:Src/mc_tasks.c **** 
 507:Src/mc_tasks.c ****         case RUN:
 508:Src/mc_tasks.c ****         {
 509:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 1088              		.loc 2 509 34
 1089 02c4 0D4B     		ldr	r3, .L66+12
 1090 02c6 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 1091              		.loc 2 509 14
 1092 02ca 052B     		cmp	r3, #5
 1093 02cc 03D1     		bne	.L52
 510:Src/mc_tasks.c ****           {
 511:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 1094              		.loc 2 511 13
 1095 02ce 0020     		movs	r0, #0
 1096 02d0 FFF7FEFF 		bl	TSK_MF_StopProcessing
 512:Src/mc_tasks.c ****           }
 513:Src/mc_tasks.c ****           else
 514:Src/mc_tasks.c ****           {
 515:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 2 */
 516:Src/mc_tasks.c **** 
 517:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 518:Src/mc_tasks.c **** 
 519:Src/mc_tasks.c ****             TC_PositionRegulation(pPosCtrl[M1]);
 520:Src/mc_tasks.c ****             MCI_ExecBufferedCommands(&Mci[M1]);
 521:Src/mc_tasks.c **** 
 522:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 523:Src/mc_tasks.c **** 
 524:Src/mc_tasks.c ****           }
 525:Src/mc_tasks.c ****           break;
 1097              		.loc 2 525 11
 1098 02d4 86E0     		b	.L58
 1099              	.L52:
 519:Src/mc_tasks.c ****             MCI_ExecBufferedCommands(&Mci[M1]);
 1100              		.loc 2 519 13
 1101 02d6 0F4B     		ldr	r3, .L66+36
 1102 02d8 1B68     		ldr	r3, [r3]
 1103 02da 1846     		mov	r0, r3
 1104 02dc FFF7FEFF 		bl	TC_PositionRegulation
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 44


 520:Src/mc_tasks.c **** 
 1105              		.loc 2 520 13
 1106 02e0 0648     		ldr	r0, .L66+12
 1107 02e2 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 522:Src/mc_tasks.c **** 
 1108              		.loc 2 522 15
 1109 02e6 0020     		movs	r0, #0
 1110 02e8 FFF7FEFF 		bl	FOC_CalcCurrRef
 1111              		.loc 2 525 11
 1112 02ec 7AE0     		b	.L58
 1113              	.L67:
 1114 02ee 00BF     		.align	2
 1115              	.L66:
 1116 02f0 00000000 		.word	PerfTraces
 1117 02f4 00000000 		.word	ENCODER_M1
 1118 02f8 00000000 		.word	pMPM
 1119 02fc 00000000 		.word	Mci
 1120 0300 00000000 		.word	pwmcHandle
 1121 0304 00000000 		.word	FOCVars
 1122 0308 00000000 		.word	pSTC
 1123 030c 00000000 		.word	VirtualSpeedSensorM1
 1124 0310 00000000 		.word	EncAlignCtrlM1
 1125 0314 00000000 		.word	pPosCtrl
 1126              	.L34:
 526:Src/mc_tasks.c ****         }
 527:Src/mc_tasks.c **** 
 528:Src/mc_tasks.c ****         case STOP:
 529:Src/mc_tasks.c ****         {
 530:Src/mc_tasks.c ****           if (TSK_StopPermanencyTimeHasElapsedM1())
 1127              		.loc 2 530 15
 1128 0318 FFF7FEFF 		bl	TSK_StopPermanencyTimeHasElapsedM1
 1129 031c 0346     		mov	r3, r0
 1130              		.loc 2 530 14
 1131 031e 002B     		cmp	r3, #0
 1132 0320 5BD0     		beq	.L63
 531:Src/mc_tasks.c ****           {
 532:Src/mc_tasks.c **** 
 533:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 5 */
 534:Src/mc_tasks.c **** 
 535:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 5 */
 536:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 1133              		.loc 2 536 35
 1134 0322 344B     		ldr	r3, .L68
 1135 0324 0022     		movs	r2, #0
 1136 0326 83F82620 		strb	r2, [r3, #38]
 537:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1137              		.loc 2 537 27
 1138 032a 324B     		ldr	r3, .L68
 1139 032c 0022     		movs	r2, #0
 1140 032e 83F82720 		strb	r2, [r3, #39]
 538:Src/mc_tasks.c ****           }
 539:Src/mc_tasks.c ****           else
 540:Src/mc_tasks.c ****           {
 541:Src/mc_tasks.c ****             /* Nothing to do, FW waits for to stop */
 542:Src/mc_tasks.c ****           }
 543:Src/mc_tasks.c ****           break;
 1141              		.loc 2 543 11
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 45


 1142 0332 52E0     		b	.L63
 1143              	.L32:
 544:Src/mc_tasks.c ****         }
 545:Src/mc_tasks.c **** 
 546:Src/mc_tasks.c ****         case FAULT_OVER:
 547:Src/mc_tasks.c ****         {
 548:Src/mc_tasks.c ****           if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 1144              		.loc 2 548 40
 1145 0334 2F4B     		ldr	r3, .L68
 1146 0336 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 1147              		.loc 2 548 14
 1148 033a 022B     		cmp	r3, #2
 1149 033c 4FD1     		bne	.L64
 549:Src/mc_tasks.c ****           {
 550:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 1150              		.loc 2 550 35
 1151 033e 2D4B     		ldr	r3, .L68
 1152 0340 0022     		movs	r2, #0
 1153 0342 83F82620 		strb	r2, [r3, #38]
 551:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1154              		.loc 2 551 27
 1155 0346 2B4B     		ldr	r3, .L68
 1156 0348 0022     		movs	r2, #0
 1157 034a 83F82720 		strb	r2, [r3, #39]
 552:Src/mc_tasks.c ****           }
 553:Src/mc_tasks.c ****           else
 554:Src/mc_tasks.c ****           {
 555:Src/mc_tasks.c ****             /* Nothing to do, FW stays in FAULT_OVER state until acknowledgement */
 556:Src/mc_tasks.c ****           }
 557:Src/mc_tasks.c ****           break;
 1158              		.loc 2 557 11
 1159 034e 46E0     		b	.L64
 1160              	.L33:
 558:Src/mc_tasks.c ****         }
 559:Src/mc_tasks.c **** 
 560:Src/mc_tasks.c ****         case FAULT_NOW:
 561:Src/mc_tasks.c ****         {
 562:Src/mc_tasks.c ****           Mci[M1].State = FAULT_OVER;
 1161              		.loc 2 562 25
 1162 0350 284B     		ldr	r3, .L68
 1163 0352 0B22     		movs	r2, #11
 1164 0354 83F82720 		strb	r2, [r3, #39]
 563:Src/mc_tasks.c ****           break;
 1165              		.loc 2 563 11
 1166 0358 44E0     		b	.L58
 1167              	.L28:
 564:Src/mc_tasks.c ****         }
 565:Src/mc_tasks.c **** 
 566:Src/mc_tasks.c ****         case WAIT_STOP_MOTOR:
 567:Src/mc_tasks.c ****         {
 568:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 1168              		.loc 2 568 34
 1169 035a 264B     		ldr	r3, .L68
 1170 035c 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 1171              		.loc 2 568 14
 1172 0360 052B     		cmp	r3, #5
 1173 0362 03D1     		bne	.L56
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 46


 569:Src/mc_tasks.c ****           {
 570:Src/mc_tasks.c ****             TSK_MF_StopProcessing(M1);
 1174              		.loc 2 570 13
 1175 0364 0020     		movs	r0, #0
 1176 0366 FFF7FEFF 		bl	TSK_MF_StopProcessing
 571:Src/mc_tasks.c ****           }
 572:Src/mc_tasks.c ****           else
 573:Src/mc_tasks.c ****           {
 574:Src/mc_tasks.c ****             if (TSK_StopPermanencyTimeHasElapsedM1())
 575:Src/mc_tasks.c ****             {
 576:Src/mc_tasks.c ****               ENC_Clear(&ENCODER_M1);
 577:Src/mc_tasks.c ****               R3_1_SwitchOnPWM(pwmcHandle[M1]);
 578:Src/mc_tasks.c ****               TC_EncAlignmentCommand(pPosCtrl[M1]);
 579:Src/mc_tasks.c ****               FOC_InitAdditionalMethods(M1);
 580:Src/mc_tasks.c ****               STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to curre
 581:Src/mc_tasks.c ****               MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the spee
 582:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 583:Src/mc_tasks.c ****               Mci[M1].State = RUN;
 584:Src/mc_tasks.c ****             }
 585:Src/mc_tasks.c ****             else
 586:Src/mc_tasks.c ****             {
 587:Src/mc_tasks.c ****               /* Nothing to do */
 588:Src/mc_tasks.c ****             }
 589:Src/mc_tasks.c ****           }
 590:Src/mc_tasks.c ****           break;
 1177              		.loc 2 590 11
 1178 036a 3AE0     		b	.L65
 1179              	.L56:
 574:Src/mc_tasks.c ****             {
 1180              		.loc 2 574 17
 1181 036c FFF7FEFF 		bl	TSK_StopPermanencyTimeHasElapsedM1
 1182 0370 0346     		mov	r3, r0
 574:Src/mc_tasks.c ****             {
 1183              		.loc 2 574 16
 1184 0372 002B     		cmp	r3, #0
 1185 0374 35D0     		beq	.L65
 576:Src/mc_tasks.c ****               R3_1_SwitchOnPWM(pwmcHandle[M1]);
 1186              		.loc 2 576 15
 1187 0376 2048     		ldr	r0, .L68+4
 1188 0378 FFF7FEFF 		bl	ENC_Clear
 577:Src/mc_tasks.c ****               TC_EncAlignmentCommand(pPosCtrl[M1]);
 1189              		.loc 2 577 15
 1190 037c 1F4B     		ldr	r3, .L68+8
 1191 037e 1B68     		ldr	r3, [r3]
 1192 0380 1846     		mov	r0, r3
 1193 0382 FFF7FEFF 		bl	R3_1_SwitchOnPWM
 578:Src/mc_tasks.c ****               FOC_InitAdditionalMethods(M1);
 1194              		.loc 2 578 15
 1195 0386 1E4B     		ldr	r3, .L68+12
 1196 0388 1B68     		ldr	r3, [r3]
 1197 038a 1846     		mov	r0, r3
 1198 038c FFF7FEFF 		bl	TC_EncAlignmentCommand
 579:Src/mc_tasks.c ****               STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to curre
 1199              		.loc 2 579 15
 1200 0390 0020     		movs	r0, #0
 1201 0392 FFF7FEFF 		bl	FOC_InitAdditionalMethods
 580:Src/mc_tasks.c ****               MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the spee
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 47


 1202              		.loc 2 580 15
 1203 0396 1B4B     		ldr	r3, .L68+16
 1204 0398 1B68     		ldr	r3, [r3]
 1205 039a 1846     		mov	r0, r3
 1206 039c FFF7FEFF 		bl	STC_ForceSpeedReferenceToCurrentSpeed
 581:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 1207              		.loc 2 581 15
 1208 03a0 1448     		ldr	r0, .L68
 1209 03a2 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 582:Src/mc_tasks.c ****               Mci[M1].State = RUN;
 1210              		.loc 2 582 15
 1211 03a6 0020     		movs	r0, #0
 1212 03a8 FFF7FEFF 		bl	FOC_CalcCurrRef
 583:Src/mc_tasks.c ****             }
 1213              		.loc 2 583 29
 1214 03ac 114B     		ldr	r3, .L68
 1215 03ae 0622     		movs	r2, #6
 1216 03b0 83F82720 		strb	r2, [r3, #39]
 1217              		.loc 2 590 11
 1218 03b4 15E0     		b	.L65
 1219              	.L26:
 591:Src/mc_tasks.c ****         }
 592:Src/mc_tasks.c **** 
 593:Src/mc_tasks.c ****         default:
 594:Src/mc_tasks.c ****           break;
 595:Src/mc_tasks.c ****        }
 596:Src/mc_tasks.c ****     }
 597:Src/mc_tasks.c ****     else
 598:Src/mc_tasks.c ****     {
 599:Src/mc_tasks.c ****       Mci[M1].State = FAULT_OVER;
 1220              		.loc 2 599 21
 1221 03b6 0F4B     		ldr	r3, .L68
 1222 03b8 0B22     		movs	r2, #11
 1223 03ba 83F82720 		strb	r2, [r3, #39]
 1224 03be 11E0     		b	.L58
 1225              	.L25:
 600:Src/mc_tasks.c ****     }
 601:Src/mc_tasks.c ****   }
 602:Src/mc_tasks.c ****   else
 603:Src/mc_tasks.c ****   {
 604:Src/mc_tasks.c ****     Mci[M1].State = FAULT_NOW;
 1226              		.loc 2 604 19
 1227 03c0 0C4B     		ldr	r3, .L68
 1228 03c2 0A22     		movs	r2, #10
 1229 03c4 83F82720 		strb	r2, [r3, #39]
 1230 03c8 0CE0     		b	.L58
 1231              	.L59:
 594:Src/mc_tasks.c ****        }
 1232              		.loc 2 594 11
 1233 03ca 00BF     		nop
 1234 03cc 0AE0     		b	.L58
 1235              	.L60:
 397:Src/mc_tasks.c ****         }
 1236              		.loc 2 397 11
 1237 03ce 00BF     		nop
 1238 03d0 08E0     		b	.L58
 1239              	.L61:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 48


 429:Src/mc_tasks.c ****         }
 1240              		.loc 2 429 11
 1241 03d2 00BF     		nop
 1242 03d4 06E0     		b	.L58
 1243              	.L62:
 470:Src/mc_tasks.c ****         }
 1244              		.loc 2 470 11
 1245 03d6 00BF     		nop
 1246 03d8 04E0     		b	.L58
 1247              	.L63:
 543:Src/mc_tasks.c ****         }
 1248              		.loc 2 543 11
 1249 03da 00BF     		nop
 1250 03dc 02E0     		b	.L58
 1251              	.L64:
 557:Src/mc_tasks.c ****         }
 1252              		.loc 2 557 11
 1253 03de 00BF     		nop
 1254 03e0 00E0     		b	.L58
 1255              	.L65:
 590:Src/mc_tasks.c ****         }
 1256              		.loc 2 590 11
 1257 03e2 00BF     		nop
 1258              	.L58:
 605:Src/mc_tasks.c ****   }
 606:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 6 */
 607:Src/mc_tasks.c **** 
 608:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 6 */
 609:Src/mc_tasks.c ****   MC_BG_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 1259              		.loc 2 609 3
 1260 03e4 0121     		movs	r1, #1
 1261 03e6 0848     		ldr	r0, .L68+20
 1262 03e8 FFF7FEFF 		bl	MC_BG_Perf_Measure_Stop
 610:Src/mc_tasks.c **** }
 1263              		.loc 2 610 1
 1264 03ec 00BF     		nop
 1265 03ee 0837     		adds	r7, r7, #8
 1266              	.LCFI23:
 1267              		.cfi_def_cfa_offset 8
 1268 03f0 BD46     		mov	sp, r7
 1269              	.LCFI24:
 1270              		.cfi_def_cfa_register 13
 1271              		@ sp needed
 1272 03f2 80BD     		pop	{r7, pc}
 1273              	.L69:
 1274              		.align	2
 1275              	.L68:
 1276 03f4 00000000 		.word	Mci
 1277 03f8 00000000 		.word	ENCODER_M1
 1278 03fc 00000000 		.word	pwmcHandle
 1279 0400 00000000 		.word	pPosCtrl
 1280 0404 00000000 		.word	pSTC
 1281 0408 00000000 		.word	PerfTraces
 1282              		.cfi_endproc
 1283              	.LFE1099:
 1285              		.section	.text.FOC_Clear,"ax",%progbits
 1286              		.align	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 49


 1287              		.weak	FOC_Clear
 1288              		.syntax unified
 1289              		.thumb
 1290              		.thumb_func
 1292              	FOC_Clear:
 1293              	.LFB1100:
 611:Src/mc_tasks.c **** 
 612:Src/mc_tasks.c **** /**
 613:Src/mc_tasks.c ****   * @brief  It re-initializes the current and voltage variables. Moreover
 614:Src/mc_tasks.c ****   *         it clears qd currents PI controllers, voltage sensor and SpeednTorque
 615:Src/mc_tasks.c ****   *         controller. It must be called before each motor restart.
 616:Src/mc_tasks.c ****   *         It does not clear speed sensor.
 617:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2.
 618:Src/mc_tasks.c ****   */
 619:Src/mc_tasks.c **** __weak void FOC_Clear(uint8_t bMotor)
 620:Src/mc_tasks.c **** {
 1294              		.loc 2 620 1
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 24
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298 0000 80B5     		push	{r7, lr}
 1299              	.LCFI25:
 1300              		.cfi_def_cfa_offset 8
 1301              		.cfi_offset 7, -8
 1302              		.cfi_offset 14, -4
 1303 0002 86B0     		sub	sp, sp, #24
 1304              	.LCFI26:
 1305              		.cfi_def_cfa_offset 32
 1306 0004 00AF     		add	r7, sp, #0
 1307              	.LCFI27:
 1308              		.cfi_def_cfa_register 7
 1309 0006 0346     		mov	r3, r0
 1310 0008 FB71     		strb	r3, [r7, #7]
 621:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 0 */
 622:Src/mc_tasks.c **** 
 623:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 0 */
 624:Src/mc_tasks.c **** 
 625:Src/mc_tasks.c ****   ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
 1311              		.loc 2 625 8
 1312 000a 0023     		movs	r3, #0
 1313 000c BB82     		strh	r3, [r7, #20]	@ movhi
 1314 000e 0023     		movs	r3, #0
 1315 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 626:Src/mc_tasks.c ****   qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
 1316              		.loc 2 626 8
 1317 0012 0023     		movs	r3, #0
 1318 0014 3B82     		strh	r3, [r7, #16]	@ movhi
 1319 0016 0023     		movs	r3, #0
 1320 0018 7B82     		strh	r3, [r7, #18]	@ movhi
 627:Src/mc_tasks.c ****   alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};
 1321              		.loc 2 627 15
 1322 001a 0023     		movs	r3, #0
 1323 001c BB81     		strh	r3, [r7, #12]	@ movhi
 1324 001e 0023     		movs	r3, #0
 1325 0020 FB81     		strh	r3, [r7, #14]	@ movhi
 628:Src/mc_tasks.c **** 
 629:Src/mc_tasks.c ****   FOCVars[bMotor].Iab = NULL_ab;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 50


 1326              		.loc 2 629 18
 1327 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1328              		.loc 2 629 23
 1329 0024 3F4A     		ldr	r2, .L71
 1330 0026 2621     		movs	r1, #38
 1331 0028 01FB03F3 		mul	r3, r1, r3
 1332 002c 1344     		add	r3, r3, r2
 1333 002e 1A46     		mov	r2, r3
 1334 0030 07F11403 		add	r3, r7, #20
 1335 0034 1868     		ldr	r0, [r3]
 1336 0036 1060     		str	r0, [r2]	@ unaligned
 630:Src/mc_tasks.c ****   FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 1337              		.loc 2 630 18
 1338 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1339              		.loc 2 630 30
 1340 003a 3A4A     		ldr	r2, .L71
 1341 003c 2621     		movs	r1, #38
 1342 003e 01FB03F3 		mul	r3, r1, r3
 1343 0042 1344     		add	r3, r3, r2
 1344 0044 0433     		adds	r3, r3, #4
 1345 0046 1A46     		mov	r2, r3
 1346 0048 07F10C03 		add	r3, r7, #12
 1347 004c 1868     		ldr	r0, [r3]
 1348 004e 1060     		str	r0, [r2]	@ unaligned
 631:Src/mc_tasks.c ****   FOCVars[bMotor].Iqd = NULL_qd;
 1349              		.loc 2 631 18
 1350 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1351              		.loc 2 631 23
 1352 0052 344A     		ldr	r2, .L71
 1353 0054 2621     		movs	r1, #38
 1354 0056 01FB03F3 		mul	r3, r1, r3
 1355 005a 1344     		add	r3, r3, r2
 1356 005c 0C33     		adds	r3, r3, #12
 1357 005e 1A46     		mov	r2, r3
 1358 0060 07F11003 		add	r3, r7, #16
 1359 0064 1868     		ldr	r0, [r3]
 1360 0066 1060     		str	r0, [r2]	@ unaligned
 632:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
 1361              		.loc 2 632 20
 1362 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1363              		.loc 2 632 28
 1364 006a 2E4A     		ldr	r2, .L71
 1365 006c 2621     		movs	r1, #38
 1366 006e 01FB03F3 		mul	r3, r1, r3
 1367 0072 1344     		add	r3, r3, r2
 1368 0074 1033     		adds	r3, r3, #16
 1369 0076 1A46     		mov	r2, r3
 1370 0078 07F11003 		add	r3, r7, #16
 1371 007c 1868     		ldr	r0, [r3]
 1372 007e 1060     		str	r0, [r2]	@ unaligned
 633:Src/mc_tasks.c ****   FOCVars[bMotor].hTeref = (int16_t)0;
 1373              		.loc 2 633 18
 1374 0080 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1375              		.loc 2 633 26
 1376 0082 284A     		ldr	r2, .L71
 1377 0084 2621     		movs	r1, #38
 1378 0086 01FB03F3 		mul	r3, r1, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 51


 1379 008a 1344     		add	r3, r3, r2
 1380 008c 1E33     		adds	r3, r3, #30
 1381 008e 0022     		movs	r2, #0
 1382 0090 1A80     		strh	r2, [r3]	@ movhi
 634:Src/mc_tasks.c ****   FOCVars[bMotor].Vqd = NULL_qd;
 1383              		.loc 2 634 18
 1384 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1385              		.loc 2 634 23
 1386 0094 234A     		ldr	r2, .L71
 1387 0096 2621     		movs	r1, #38
 1388 0098 01FB03F3 		mul	r3, r1, r3
 1389 009c 1344     		add	r3, r3, r2
 1390 009e 1033     		adds	r3, r3, #16
 1391 00a0 0633     		adds	r3, r3, #6
 1392 00a2 07F11002 		add	r2, r7, #16
 1393 00a6 1068     		ldr	r0, [r2]
 1394 00a8 1860     		str	r0, [r3]	@ unaligned
 635:Src/mc_tasks.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 1395              		.loc 2 635 18
 1396 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1397              		.loc 2 635 30
 1398 00ac 1D4A     		ldr	r2, .L71
 1399 00ae 2621     		movs	r1, #38
 1400 00b0 01FB03F3 		mul	r3, r1, r3
 1401 00b4 1344     		add	r3, r3, r2
 1402 00b6 1833     		adds	r3, r3, #24
 1403 00b8 0233     		adds	r3, r3, #2
 1404 00ba 07F10C02 		add	r2, r7, #12
 1405 00be 1068     		ldr	r0, [r2]
 1406 00c0 1860     		str	r0, [r3]	@ unaligned
 636:Src/mc_tasks.c ****   FOCVars[bMotor].hElAngle = (int16_t)0;
 1407              		.loc 2 636 18
 1408 00c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1409              		.loc 2 636 28
 1410 00c4 174A     		ldr	r2, .L71
 1411 00c6 2621     		movs	r1, #38
 1412 00c8 01FB03F3 		mul	r3, r1, r3
 1413 00cc 1344     		add	r3, r3, r2
 1414 00ce 2033     		adds	r3, r3, #32
 1415 00d0 0022     		movs	r2, #0
 1416 00d2 1A80     		strh	r2, [r3]	@ movhi
 637:Src/mc_tasks.c **** 
 638:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 1417              		.loc 2 638 3
 1418 00d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1419 00d6 144A     		ldr	r2, .L71+4
 1420 00d8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1421 00dc 0021     		movs	r1, #0
 1422 00de 1846     		mov	r0, r3
 1423 00e0 FFF7FEFF 		bl	PID_SetIntegralTerm
 639:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 1424              		.loc 2 639 3
 1425 00e4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1426 00e6 114A     		ldr	r2, .L71+8
 1427 00e8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1428 00ec 0021     		movs	r1, #0
 1429 00ee 1846     		mov	r0, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 52


 1430 00f0 FFF7FEFF 		bl	PID_SetIntegralTerm
 640:Src/mc_tasks.c **** 
 641:Src/mc_tasks.c ****   STC_Clear(pSTC[bMotor]);
 1431              		.loc 2 641 3
 1432 00f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1433 00f6 0E4A     		ldr	r2, .L71+12
 1434 00f8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1435 00fc 1846     		mov	r0, r3
 1436 00fe FFF7FEFF 		bl	STC_Clear
 642:Src/mc_tasks.c **** 
 643:Src/mc_tasks.c ****   PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 1437              		.loc 2 643 3
 1438 0102 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1439 0104 0B4A     		ldr	r2, .L71+16
 1440 0106 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1441 010a 1846     		mov	r0, r3
 1442 010c FFF7FEFF 		bl	PWMC_SwitchOffPWM
 644:Src/mc_tasks.c **** 
 645:Src/mc_tasks.c ****   MC_Perf_Clear(&PerfTraces,bMotor);
 1443              		.loc 2 645 3
 1444 0110 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1445 0112 1946     		mov	r1, r3
 1446 0114 0848     		ldr	r0, .L71+20
 1447 0116 FFF7FEFF 		bl	MC_Perf_Clear
 646:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 1 */
 647:Src/mc_tasks.c **** 
 648:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 1 */
 649:Src/mc_tasks.c **** }
 1448              		.loc 2 649 1
 1449 011a 00BF     		nop
 1450 011c 1837     		adds	r7, r7, #24
 1451              	.LCFI28:
 1452              		.cfi_def_cfa_offset 8
 1453 011e BD46     		mov	sp, r7
 1454              	.LCFI29:
 1455              		.cfi_def_cfa_register 13
 1456              		@ sp needed
 1457 0120 80BD     		pop	{r7, pc}
 1458              	.L72:
 1459 0122 00BF     		.align	2
 1460              	.L71:
 1461 0124 00000000 		.word	FOCVars
 1462 0128 00000000 		.word	pPIDIq
 1463 012c 00000000 		.word	pPIDId
 1464 0130 00000000 		.word	pSTC
 1465 0134 00000000 		.word	pwmcHandle
 1466 0138 00000000 		.word	PerfTraces
 1467              		.cfi_endproc
 1468              	.LFE1100:
 1470              		.section	.text.FOC_InitAdditionalMethods,"ax",%progbits
 1471              		.align	1
 1472              		.weak	FOC_InitAdditionalMethods
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1477              	FOC_InitAdditionalMethods:
 1478              	.LFB1101:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 53


 650:Src/mc_tasks.c **** 
 651:Src/mc_tasks.c **** /**
 652:Src/mc_tasks.c ****   * @brief  Use this method to initialize additional methods (if any) in
 653:Src/mc_tasks.c ****   *         START_TO_RUN state.
 654:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2.
 655:Src/mc_tasks.c ****   */
 656:Src/mc_tasks.c **** __weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
 657:Src/mc_tasks.c **** {
 1479              		.loc 2 657 1
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 8
 1482              		@ frame_needed = 1, uses_anonymous_args = 0
 1483              		@ link register save eliminated.
 1484 0000 80B4     		push	{r7}
 1485              	.LCFI30:
 1486              		.cfi_def_cfa_offset 4
 1487              		.cfi_offset 7, -4
 1488 0002 83B0     		sub	sp, sp, #12
 1489              	.LCFI31:
 1490              		.cfi_def_cfa_offset 16
 1491 0004 00AF     		add	r7, sp, #0
 1492              	.LCFI32:
 1493              		.cfi_def_cfa_register 7
 1494 0006 0346     		mov	r3, r0
 1495 0008 FB71     		strb	r3, [r7, #7]
 658:Src/mc_tasks.c ****     if (M_NONE == bMotor)
 659:Src/mc_tasks.c ****     {
 660:Src/mc_tasks.c ****       /* Nothing to do */
 661:Src/mc_tasks.c ****     }
 662:Src/mc_tasks.c ****     else
 663:Src/mc_tasks.c ****     {
 664:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */
 665:Src/mc_tasks.c **** 
 666:Src/mc_tasks.c ****   /* USER CODE END FOC_InitAdditionalMethods 0 */
 667:Src/mc_tasks.c ****     }
 668:Src/mc_tasks.c **** }
 1496              		.loc 2 668 1
 1497 000a 00BF     		nop
 1498 000c 0C37     		adds	r7, r7, #12
 1499              	.LCFI33:
 1500              		.cfi_def_cfa_offset 4
 1501 000e BD46     		mov	sp, r7
 1502              	.LCFI34:
 1503              		.cfi_def_cfa_register 13
 1504              		@ sp needed
 1505 0010 5DF8047B 		ldr	r7, [sp], #4
 1506              	.LCFI35:
 1507              		.cfi_restore 7
 1508              		.cfi_def_cfa_offset 0
 1509 0014 7047     		bx	lr
 1510              		.cfi_endproc
 1511              	.LFE1101:
 1513              		.section	.text.FOC_CalcCurrRef,"ax",%progbits
 1514              		.align	1
 1515              		.weak	FOC_CalcCurrRef
 1516              		.syntax unified
 1517              		.thumb
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 54


 1518              		.thumb_func
 1520              	FOC_CalcCurrRef:
 1521              	.LFB1102:
 669:Src/mc_tasks.c **** 
 670:Src/mc_tasks.c **** /**
 671:Src/mc_tasks.c ****   * @brief  It computes the new values of Iqdref (current references on qd
 672:Src/mc_tasks.c ****   *         reference frame) based on the required electrical torque information
 673:Src/mc_tasks.c ****   *         provided by oTSC object (internally clocked).
 674:Src/mc_tasks.c ****   *         If implemented in the derived class it executes flux weakening and/or
 675:Src/mc_tasks.c ****   *         MTPA algorithm(s). It must be called with the periodicity specified
 676:Src/mc_tasks.c ****   *         in oTSC parameters.
 677:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2.
 678:Src/mc_tasks.c ****   */
 679:Src/mc_tasks.c **** __weak void FOC_CalcCurrRef(uint8_t bMotor)
 680:Src/mc_tasks.c **** {
 1522              		.loc 2 680 1
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 8
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526 0000 90B5     		push	{r4, r7, lr}
 1527              	.LCFI36:
 1528              		.cfi_def_cfa_offset 12
 1529              		.cfi_offset 4, -12
 1530              		.cfi_offset 7, -8
 1531              		.cfi_offset 14, -4
 1532 0002 83B0     		sub	sp, sp, #12
 1533              	.LCFI37:
 1534              		.cfi_def_cfa_offset 24
 1535 0004 00AF     		add	r7, sp, #0
 1536              	.LCFI38:
 1537              		.cfi_def_cfa_register 7
 1538 0006 0346     		mov	r3, r0
 1539 0008 FB71     		strb	r3, [r7, #7]
 681:Src/mc_tasks.c **** 
 682:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 0 */
 683:Src/mc_tasks.c **** 
 684:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 0 */
 685:Src/mc_tasks.c ****   if (INTERNAL == FOCVars[bMotor].bDriveInput)
 1540              		.loc 2 685 34
 1541 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1542 000c 184A     		ldr	r2, .L77
 1543 000e 2621     		movs	r1, #38
 1544 0010 01FB03F3 		mul	r3, r1, r3
 1545 0014 1344     		add	r3, r3, r2
 1546 0016 2433     		adds	r3, r3, #36
 1547 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1548              		.loc 2 685 6
 1549 001a 002B     		cmp	r3, #0
 1550 001c 23D1     		bne	.L76
 686:Src/mc_tasks.c ****   {
 687:Src/mc_tasks.c ****     FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 1551              		.loc 2 687 30
 1552 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1553 0020 144A     		ldr	r2, .L77+4
 1554 0022 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1555              		.loc 2 687 20
 1556 0026 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 55


 1557              		.loc 2 687 30
 1558 0028 1846     		mov	r0, r3
 1559 002a FFF7FEFF 		bl	STC_CalcTorqueReference
 1560 002e 0346     		mov	r3, r0
 1561 0030 1946     		mov	r1, r3
 1562              		.loc 2 687 28
 1563 0032 0F4A     		ldr	r2, .L77
 1564 0034 2623     		movs	r3, #38
 1565 0036 04FB03F3 		mul	r3, r4, r3
 1566 003a 1344     		add	r3, r3, r2
 1567 003c 1E33     		adds	r3, r3, #30
 1568 003e 0A46     		mov	r2, r1	@ movhi
 1569 0040 1A80     		strh	r2, [r3]	@ movhi
 688:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 1570              		.loc 2 688 47
 1571 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1572              		.loc 2 688 27
 1573 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1574              		.loc 2 688 47
 1575 0046 0A49     		ldr	r1, .L77
 1576 0048 2620     		movs	r0, #38
 1577 004a 00FB02F2 		mul	r2, r0, r2
 1578 004e 0A44     		add	r2, r2, r1
 1579 0050 1E32     		adds	r2, r2, #30
 1580 0052 B2F90000 		ldrsh	r0, [r2]
 1581              		.loc 2 688 30
 1582 0056 064A     		ldr	r2, .L77
 1583 0058 2621     		movs	r1, #38
 1584 005a 01FB03F3 		mul	r3, r1, r3
 1585 005e 1344     		add	r3, r3, r2
 1586 0060 1033     		adds	r3, r3, #16
 1587 0062 0246     		mov	r2, r0	@ movhi
 1588 0064 1A80     		strh	r2, [r3]	@ movhi
 1589              	.L76:
 689:Src/mc_tasks.c **** 
 690:Src/mc_tasks.c ****   }
 691:Src/mc_tasks.c ****   else
 692:Src/mc_tasks.c ****   {
 693:Src/mc_tasks.c ****     /* Nothing to do */
 694:Src/mc_tasks.c ****   }
 695:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 1 */
 696:Src/mc_tasks.c **** 
 697:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 1 */
 698:Src/mc_tasks.c **** }
 1590              		.loc 2 698 1
 1591 0066 00BF     		nop
 1592 0068 0C37     		adds	r7, r7, #12
 1593              	.LCFI39:
 1594              		.cfi_def_cfa_offset 12
 1595 006a BD46     		mov	sp, r7
 1596              	.LCFI40:
 1597              		.cfi_def_cfa_register 13
 1598              		@ sp needed
 1599 006c 90BD     		pop	{r4, r7, pc}
 1600              	.L78:
 1601 006e 00BF     		.align	2
 1602              	.L77:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 56


 1603 0070 00000000 		.word	FOCVars
 1604 0074 00000000 		.word	pSTC
 1605              		.cfi_endproc
 1606              	.LFE1102:
 1608              		.section	.text.TSK_SetChargeBootCapDelayM1,"ax",%progbits
 1609              		.align	1
 1610              		.weak	TSK_SetChargeBootCapDelayM1
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1615              	TSK_SetChargeBootCapDelayM1:
 1616              	.LFB1103:
 699:Src/mc_tasks.c **** 
 700:Src/mc_tasks.c **** /**
 701:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the delay required
 702:Src/mc_tasks.c ****   *         for drivers boot capacitors charging of motor 1.
 703:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted.
 704:Src/mc_tasks.c ****   * @retval void
 705:Src/mc_tasks.c ****   */
 706:Src/mc_tasks.c **** __weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
 707:Src/mc_tasks.c **** {
 1617              		.loc 2 707 1
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 8
 1620              		@ frame_needed = 1, uses_anonymous_args = 0
 1621              		@ link register save eliminated.
 1622 0000 80B4     		push	{r7}
 1623              	.LCFI41:
 1624              		.cfi_def_cfa_offset 4
 1625              		.cfi_offset 7, -4
 1626 0002 83B0     		sub	sp, sp, #12
 1627              	.LCFI42:
 1628              		.cfi_def_cfa_offset 16
 1629 0004 00AF     		add	r7, sp, #0
 1630              	.LCFI43:
 1631              		.cfi_def_cfa_register 7
 1632 0006 0346     		mov	r3, r0
 1633 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 708:Src/mc_tasks.c ****    hBootCapDelayCounterM1 = hTickCount;
 1634              		.loc 2 708 27
 1635 000a 044A     		ldr	r2, .L80
 1636 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 1637 000e 1380     		strh	r3, [r2]	@ movhi
 709:Src/mc_tasks.c **** }
 1638              		.loc 2 709 1
 1639 0010 00BF     		nop
 1640 0012 0C37     		adds	r7, r7, #12
 1641              	.LCFI44:
 1642              		.cfi_def_cfa_offset 4
 1643 0014 BD46     		mov	sp, r7
 1644              	.LCFI45:
 1645              		.cfi_def_cfa_register 13
 1646              		@ sp needed
 1647 0016 5DF8047B 		ldr	r7, [sp], #4
 1648              	.LCFI46:
 1649              		.cfi_restore 7
 1650              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 57


 1651 001a 7047     		bx	lr
 1652              	.L81:
 1653              		.align	2
 1654              	.L80:
 1655 001c 00000000 		.word	hBootCapDelayCounterM1
 1656              		.cfi_endproc
 1657              	.LFE1103:
 1659              		.section	.text.TSK_ChargeBootCapDelayHasElapsedM1,"ax",%progbits
 1660              		.align	1
 1661              		.weak	TSK_ChargeBootCapDelayHasElapsedM1
 1662              		.syntax unified
 1663              		.thumb
 1664              		.thumb_func
 1666              	TSK_ChargeBootCapDelayHasElapsedM1:
 1667              	.LFB1104:
 710:Src/mc_tasks.c **** 
 711:Src/mc_tasks.c **** /**
 712:Src/mc_tasks.c ****   * @brief  Use this function to know whether the time required to charge boot
 713:Src/mc_tasks.c ****   *         capacitors of motor 1 has elapsed.
 714:Src/mc_tasks.c ****   * @param  none
 715:Src/mc_tasks.c ****   * @retval bool true if time has elapsed, false otherwise.
 716:Src/mc_tasks.c ****   */
 717:Src/mc_tasks.c **** __weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
 718:Src/mc_tasks.c **** {
 1668              		.loc 2 718 1
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 8
 1671              		@ frame_needed = 1, uses_anonymous_args = 0
 1672              		@ link register save eliminated.
 1673 0000 80B4     		push	{r7}
 1674              	.LCFI47:
 1675              		.cfi_def_cfa_offset 4
 1676              		.cfi_offset 7, -4
 1677 0002 83B0     		sub	sp, sp, #12
 1678              	.LCFI48:
 1679              		.cfi_def_cfa_offset 16
 1680 0004 00AF     		add	r7, sp, #0
 1681              	.LCFI49:
 1682              		.cfi_def_cfa_register 7
 719:Src/mc_tasks.c ****   bool retVal = false;
 1683              		.loc 2 719 8
 1684 0006 0023     		movs	r3, #0
 1685 0008 FB71     		strb	r3, [r7, #7]
 720:Src/mc_tasks.c ****   if (((uint16_t)0) == hBootCapDelayCounterM1)
 1686              		.loc 2 720 21
 1687 000a 074B     		ldr	r3, .L85
 1688 000c 1B88     		ldrh	r3, [r3]	@ movhi
 1689 000e 9BB2     		uxth	r3, r3
 1690              		.loc 2 720 6
 1691 0010 002B     		cmp	r3, #0
 1692 0012 01D1     		bne	.L83
 721:Src/mc_tasks.c ****   {
 722:Src/mc_tasks.c ****     retVal = true;
 1693              		.loc 2 722 12
 1694 0014 0123     		movs	r3, #1
 1695 0016 FB71     		strb	r3, [r7, #7]
 1696              	.L83:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 58


 723:Src/mc_tasks.c ****   }
 724:Src/mc_tasks.c ****   return (retVal);
 1697              		.loc 2 724 10
 1698 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 725:Src/mc_tasks.c **** }
 1699              		.loc 2 725 1
 1700 001a 1846     		mov	r0, r3
 1701 001c 0C37     		adds	r7, r7, #12
 1702              	.LCFI50:
 1703              		.cfi_def_cfa_offset 4
 1704 001e BD46     		mov	sp, r7
 1705              	.LCFI51:
 1706              		.cfi_def_cfa_register 13
 1707              		@ sp needed
 1708 0020 5DF8047B 		ldr	r7, [sp], #4
 1709              	.LCFI52:
 1710              		.cfi_restore 7
 1711              		.cfi_def_cfa_offset 0
 1712 0024 7047     		bx	lr
 1713              	.L86:
 1714 0026 00BF     		.align	2
 1715              	.L85:
 1716 0028 00000000 		.word	hBootCapDelayCounterM1
 1717              		.cfi_endproc
 1718              	.LFE1104:
 1720              		.section	.text.TSK_SetStopPermanencyTimeM1,"ax",%progbits
 1721              		.align	1
 1722              		.weak	TSK_SetStopPermanencyTimeM1
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1727              	TSK_SetStopPermanencyTimeM1:
 1728              	.LFB1105:
 726:Src/mc_tasks.c **** 
 727:Src/mc_tasks.c **** /**
 728:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the permanency
 729:Src/mc_tasks.c ****   *         time in STOP state of motor 1.
 730:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted.
 731:Src/mc_tasks.c ****   * @retval void
 732:Src/mc_tasks.c ****   */
 733:Src/mc_tasks.c **** __weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
 734:Src/mc_tasks.c **** {
 1729              		.loc 2 734 1
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 8
 1732              		@ frame_needed = 1, uses_anonymous_args = 0
 1733              		@ link register save eliminated.
 1734 0000 80B4     		push	{r7}
 1735              	.LCFI53:
 1736              		.cfi_def_cfa_offset 4
 1737              		.cfi_offset 7, -4
 1738 0002 83B0     		sub	sp, sp, #12
 1739              	.LCFI54:
 1740              		.cfi_def_cfa_offset 16
 1741 0004 00AF     		add	r7, sp, #0
 1742              	.LCFI55:
 1743              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 59


 1744 0006 0346     		mov	r3, r0
 1745 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 735:Src/mc_tasks.c ****   hStopPermanencyCounterM1 = hTickCount;
 1746              		.loc 2 735 28
 1747 000a 044A     		ldr	r2, .L88
 1748 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 1749 000e 1380     		strh	r3, [r2]	@ movhi
 736:Src/mc_tasks.c **** }
 1750              		.loc 2 736 1
 1751 0010 00BF     		nop
 1752 0012 0C37     		adds	r7, r7, #12
 1753              	.LCFI56:
 1754              		.cfi_def_cfa_offset 4
 1755 0014 BD46     		mov	sp, r7
 1756              	.LCFI57:
 1757              		.cfi_def_cfa_register 13
 1758              		@ sp needed
 1759 0016 5DF8047B 		ldr	r7, [sp], #4
 1760              	.LCFI58:
 1761              		.cfi_restore 7
 1762              		.cfi_def_cfa_offset 0
 1763 001a 7047     		bx	lr
 1764              	.L89:
 1765              		.align	2
 1766              	.L88:
 1767 001c 00000000 		.word	hStopPermanencyCounterM1
 1768              		.cfi_endproc
 1769              	.LFE1105:
 1771              		.section	.text.TSK_StopPermanencyTimeHasElapsedM1,"ax",%progbits
 1772              		.align	1
 1773              		.weak	TSK_StopPermanencyTimeHasElapsedM1
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1778              	TSK_StopPermanencyTimeHasElapsedM1:
 1779              	.LFB1106:
 737:Src/mc_tasks.c **** 
 738:Src/mc_tasks.c **** /**
 739:Src/mc_tasks.c ****   * @brief  Use this function to know whether the permanency time in STOP state
 740:Src/mc_tasks.c ****   *         of motor 1 has elapsed.
 741:Src/mc_tasks.c ****   * @param  none
 742:Src/mc_tasks.c ****   * @retval bool true if time is elapsed, false otherwise.
 743:Src/mc_tasks.c ****   */
 744:Src/mc_tasks.c **** __weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
 745:Src/mc_tasks.c **** {
 1780              		.loc 2 745 1
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 8
 1783              		@ frame_needed = 1, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
 1785 0000 80B4     		push	{r7}
 1786              	.LCFI59:
 1787              		.cfi_def_cfa_offset 4
 1788              		.cfi_offset 7, -4
 1789 0002 83B0     		sub	sp, sp, #12
 1790              	.LCFI60:
 1791              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 60


 1792 0004 00AF     		add	r7, sp, #0
 1793              	.LCFI61:
 1794              		.cfi_def_cfa_register 7
 746:Src/mc_tasks.c ****   bool retVal = false;
 1795              		.loc 2 746 8
 1796 0006 0023     		movs	r3, #0
 1797 0008 FB71     		strb	r3, [r7, #7]
 747:Src/mc_tasks.c ****   if (((uint16_t)0) == hStopPermanencyCounterM1)
 1798              		.loc 2 747 21
 1799 000a 074B     		ldr	r3, .L93
 1800 000c 1B88     		ldrh	r3, [r3]	@ movhi
 1801 000e 9BB2     		uxth	r3, r3
 1802              		.loc 2 747 6
 1803 0010 002B     		cmp	r3, #0
 1804 0012 01D1     		bne	.L91
 748:Src/mc_tasks.c ****   {
 749:Src/mc_tasks.c ****     retVal = true;
 1805              		.loc 2 749 12
 1806 0014 0123     		movs	r3, #1
 1807 0016 FB71     		strb	r3, [r7, #7]
 1808              	.L91:
 750:Src/mc_tasks.c ****   }
 751:Src/mc_tasks.c ****   return (retVal);
 1809              		.loc 2 751 10
 1810 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 752:Src/mc_tasks.c **** }
 1811              		.loc 2 752 1
 1812 001a 1846     		mov	r0, r3
 1813 001c 0C37     		adds	r7, r7, #12
 1814              	.LCFI62:
 1815              		.cfi_def_cfa_offset 4
 1816 001e BD46     		mov	sp, r7
 1817              	.LCFI63:
 1818              		.cfi_def_cfa_register 13
 1819              		@ sp needed
 1820 0020 5DF8047B 		ldr	r7, [sp], #4
 1821              	.LCFI64:
 1822              		.cfi_restore 7
 1823              		.cfi_def_cfa_offset 0
 1824 0024 7047     		bx	lr
 1825              	.L94:
 1826 0026 00BF     		.align	2
 1827              	.L93:
 1828 0028 00000000 		.word	hStopPermanencyCounterM1
 1829              		.cfi_endproc
 1830              	.LFE1106:
 1832              		.section	.text.TSK_HighFrequencyTask,"ax",%progbits
 1833              		.align	1
 1834              		.weak	TSK_HighFrequencyTask
 1835              		.syntax unified
 1836              		.thumb
 1837              		.thumb_func
 1839              	TSK_HighFrequencyTask:
 1840              	.LFB1107:
 753:Src/mc_tasks.c **** 
 754:Src/mc_tasks.c **** #if defined (CCMRAM)
 755:Src/mc_tasks.c **** #if defined (__ICCARM__)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 61


 756:Src/mc_tasks.c **** #pragma location = ".ccmram"
 757:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 758:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 759:Src/mc_tasks.c **** #endif
 760:Src/mc_tasks.c **** #endif
 761:Src/mc_tasks.c **** 
 762:Src/mc_tasks.c **** /**
 763:Src/mc_tasks.c ****   * @brief  Executes the Motor Control duties that require a high frequency rate and a precise timi
 764:Src/mc_tasks.c ****   *
 765:Src/mc_tasks.c ****   *  This is mainly the FOC current control loop. It is executed depending on the state of the Moto
 766:Src/mc_tasks.c ****   * subsystem (see the state machine(s)).
 767:Src/mc_tasks.c ****   *
 768:Src/mc_tasks.c ****   * @retval Number of the  motor instance which FOC loop was executed.
 769:Src/mc_tasks.c ****   */
 770:Src/mc_tasks.c **** __weak uint8_t TSK_HighFrequencyTask(void)
 771:Src/mc_tasks.c **** {
 1841              		.loc 2 771 1
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 8
 1844              		@ frame_needed = 1, uses_anonymous_args = 0
 1845 0000 80B5     		push	{r7, lr}
 1846              	.LCFI65:
 1847              		.cfi_def_cfa_offset 8
 1848              		.cfi_offset 7, -8
 1849              		.cfi_offset 14, -4
 1850 0002 82B0     		sub	sp, sp, #8
 1851              	.LCFI66:
 1852              		.cfi_def_cfa_offset 16
 1853 0004 00AF     		add	r7, sp, #0
 1854              	.LCFI67:
 1855              		.cfi_def_cfa_register 7
 772:Src/mc_tasks.c **** 
 773:Src/mc_tasks.c ****   uint16_t hFOCreturn;
 774:Src/mc_tasks.c ****   uint8_t bMotorNbr = 0;
 1856              		.loc 2 774 11
 1857 0006 0023     		movs	r3, #0
 1858 0008 FB71     		strb	r3, [r7, #7]
 775:Src/mc_tasks.c ****   MC_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 1859              		.loc 2 775 3
 1860 000a 0021     		movs	r1, #0
 1861 000c 1348     		ldr	r0, .L99
 1862 000e FFF7FEFF 		bl	MC_Perf_Measure_Start
 776:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 0 */
 777:Src/mc_tasks.c **** 
 778:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 0 */
 779:Src/mc_tasks.c **** 
 780:Src/mc_tasks.c ****   (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 1863              		.loc 2 780 9
 1864 0012 1348     		ldr	r0, .L99+4
 1865 0014 FFF7FEFF 		bl	ENC_CalcAngle
 781:Src/mc_tasks.c **** 
 782:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */
 783:Src/mc_tasks.c **** 
 784:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
 785:Src/mc_tasks.c ****   hFOCreturn = FOC_CurrControllerM1();
 1866              		.loc 2 785 16
 1867 0018 FFF7FEFF 		bl	FOC_CurrControllerM1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 62


 1868 001c 0346     		mov	r3, r0
 1869 001e BB80     		strh	r3, [r7, #4]	@ movhi
 786:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */
 787:Src/mc_tasks.c **** 
 788:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
 789:Src/mc_tasks.c ****   if(hFOCreturn == MC_DURATION)
 1870              		.loc 2 789 5
 1871 0020 BB88     		ldrh	r3, [r7, #4]
 1872 0022 012B     		cmp	r3, #1
 1873 0024 04D1     		bne	.L96
 790:Src/mc_tasks.c ****   {
 791:Src/mc_tasks.c ****     MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 1874              		.loc 2 791 5
 1875 0026 0022     		movs	r2, #0
 1876 0028 0121     		movs	r1, #1
 1877 002a 0E48     		ldr	r0, .L99+8
 1878 002c FFF7FEFF 		bl	MCI_FaultProcessing
 1879              	.L96:
 792:Src/mc_tasks.c ****   }
 793:Src/mc_tasks.c ****   else
 794:Src/mc_tasks.c ****   {
 795:Src/mc_tasks.c ****     /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_3 */
 796:Src/mc_tasks.c **** 
 797:Src/mc_tasks.c ****     /* USER CODE END HighFrequencyTask SINGLEDRIVE_3 */
 798:Src/mc_tasks.c ****   }
 799:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 1 */
 800:Src/mc_tasks.c **** 
 801:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 1 */
 802:Src/mc_tasks.c **** 
 803:Src/mc_tasks.c ****   GLOBAL_TIMESTAMP++;
 1880              		.loc 2 803 19
 1881 0030 0D4B     		ldr	r3, .L99+12
 1882 0032 1B68     		ldr	r3, [r3]
 1883 0034 0133     		adds	r3, r3, #1
 1884 0036 0C4A     		ldr	r2, .L99+12
 1885 0038 1360     		str	r3, [r2]
 804:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 1886              		.loc 2 804 24
 1887 003a 0C4B     		ldr	r3, .L99+16
 1888 003c 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 1889              		.loc 2 804 6
 1890 0040 002B     		cmp	r3, #0
 1891 0042 02D0     		beq	.L97
 805:Src/mc_tasks.c ****   {
 806:Src/mc_tasks.c ****     /* Nothing to do */
 807:Src/mc_tasks.c ****   }
 808:Src/mc_tasks.c ****   else
 809:Src/mc_tasks.c ****   {
 810:Src/mc_tasks.c ****     MCPA_dataLog (&MCPA_UART_A);
 1892              		.loc 2 810 5
 1893 0044 0948     		ldr	r0, .L99+16
 1894 0046 FFF7FEFF 		bl	MCPA_dataLog
 1895              	.L97:
 811:Src/mc_tasks.c ****   }
 812:Src/mc_tasks.c **** 
 813:Src/mc_tasks.c ****   MC_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 1896              		.loc 2 813 3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 63


 1897 004a 0021     		movs	r1, #0
 1898 004c 0348     		ldr	r0, .L99
 1899 004e FFF7FEFF 		bl	MC_Perf_Measure_Stop
 814:Src/mc_tasks.c ****   return (bMotorNbr);
 1900              		.loc 2 814 10
 1901 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 815:Src/mc_tasks.c **** 
 816:Src/mc_tasks.c **** }
 1902              		.loc 2 816 1
 1903 0054 1846     		mov	r0, r3
 1904 0056 0837     		adds	r7, r7, #8
 1905              	.LCFI68:
 1906              		.cfi_def_cfa_offset 8
 1907 0058 BD46     		mov	sp, r7
 1908              	.LCFI69:
 1909              		.cfi_def_cfa_register 13
 1910              		@ sp needed
 1911 005a 80BD     		pop	{r7, pc}
 1912              	.L100:
 1913              		.align	2
 1914              	.L99:
 1915 005c 00000000 		.word	PerfTraces
 1916 0060 00000000 		.word	ENCODER_M1
 1917 0064 00000000 		.word	Mci
 1918 0068 00000000 		.word	GLOBAL_TIMESTAMP
 1919 006c 00000000 		.word	MCPA_UART_A
 1920              		.cfi_endproc
 1921              	.LFE1107:
 1923              		.section	.text.FOC_CurrControllerM1,"ax",%progbits
 1924              		.align	1
 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1929              	FOC_CurrControllerM1:
 1930              	.LFB1108:
 817:Src/mc_tasks.c **** 
 818:Src/mc_tasks.c **** #if defined (CCMRAM)
 819:Src/mc_tasks.c **** #if defined (__ICCARM__)
 820:Src/mc_tasks.c **** #pragma location = ".ccmram"
 821:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 822:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 823:Src/mc_tasks.c **** #endif
 824:Src/mc_tasks.c **** #endif
 825:Src/mc_tasks.c **** /**
 826:Src/mc_tasks.c ****   * @brief It executes the core of FOC drive that is the controllers for Iqd
 827:Src/mc_tasks.c ****   *        currents regulation. Reference frame transformations are carried out
 828:Src/mc_tasks.c ****   *        accordingly to the active speed sensor. It must be called periodically
 829:Src/mc_tasks.c ****   *        when new motor currents have been converted
 830:Src/mc_tasks.c ****   * @param this related object of class CFOC.
 831:Src/mc_tasks.c ****   * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
 832:Src/mc_tasks.c ****   *         next PWM Update event, MC_DURATION otherwise
 833:Src/mc_tasks.c ****   */
 834:Src/mc_tasks.c **** inline uint16_t FOC_CurrControllerM1(void)
 835:Src/mc_tasks.c **** {
 1931              		.loc 2 835 1
 1932              		.cfi_startproc
 1933              		@ args = 0, pretend = 0, frame = 32
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 64


 1934              		@ frame_needed = 1, uses_anonymous_args = 0
 1935 0000 80B5     		push	{r7, lr}
 1936              	.LCFI70:
 1937              		.cfi_def_cfa_offset 8
 1938              		.cfi_offset 7, -8
 1939              		.cfi_offset 14, -4
 1940 0002 88B0     		sub	sp, sp, #32
 1941              	.LCFI71:
 1942              		.cfi_def_cfa_offset 40
 1943 0004 00AF     		add	r7, sp, #0
 1944              	.LCFI72:
 1945              		.cfi_def_cfa_register 7
 836:Src/mc_tasks.c ****   qd_t Iqd, Vqd;
 837:Src/mc_tasks.c ****   ab_t Iab;
 838:Src/mc_tasks.c ****   alphabeta_t Ialphabeta, Valphabeta;
 839:Src/mc_tasks.c ****   int16_t hElAngle;
 840:Src/mc_tasks.c ****   uint16_t hCodeError;
 841:Src/mc_tasks.c ****   SpeednPosFdbk_Handle_t *speedHandle;
 842:Src/mc_tasks.c ****   speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 1946              		.loc 2 842 17
 1947 0006 3C4B     		ldr	r3, .L103
 1948 0008 1B68     		ldr	r3, [r3]
 1949 000a 1846     		mov	r0, r3
 1950 000c FFF7FEFF 		bl	STC_GetSpeedSensor
 1951 0010 F861     		str	r0, [r7, #28]
 843:Src/mc_tasks.c ****   hElAngle = SPD_GetElAngle(speedHandle);
 1952              		.loc 2 843 14
 1953 0012 F869     		ldr	r0, [r7, #28]
 1954 0014 FFF7FEFF 		bl	SPD_GetElAngle
 1955 0018 0346     		mov	r3, r0
 1956 001a 7B83     		strh	r3, [r7, #26]	@ movhi
 844:Src/mc_tasks.c ****   PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 1957              		.loc 2 844 3
 1958 001c 374B     		ldr	r3, .L103+4
 1959 001e 1B68     		ldr	r3, [r3]
 1960 0020 07F10C02 		add	r2, r7, #12
 1961 0024 1146     		mov	r1, r2
 1962 0026 1846     		mov	r0, r3
 1963 0028 FFF7FEFF 		bl	PWMC_GetPhaseCurrents
 845:Src/mc_tasks.c ****   Ialphabeta = MCM_Clarke(Iab);
 1964              		.loc 2 845 16
 1965 002c F868     		ldr	r0, [r7, #12]
 1966 002e FFF7FEFF 		bl	MCM_Clarke
 1967 0032 0346     		mov	r3, r0
 1968 0034 BB60     		str	r3, [r7, #8]
 846:Src/mc_tasks.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 1969              		.loc 2 846 9
 1970 0036 B7F91A30 		ldrsh	r3, [r7, #26]
 1971 003a 1946     		mov	r1, r3
 1972 003c B868     		ldr	r0, [r7, #8]
 1973 003e FFF7FEFF 		bl	MCM_Park
 1974 0042 0346     		mov	r3, r0
 1975 0044 7B61     		str	r3, [r7, #20]
 847:Src/mc_tasks.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 1976              		.loc 2 847 11
 1977 0046 2E4B     		ldr	r3, .L103+8
 1978 0048 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 65


 1979              		.loc 2 847 65
 1980 004a 2E4A     		ldr	r2, .L103+12
 1981 004c B2F91020 		ldrsh	r2, [r2, #16]
 1982              		.loc 2 847 37
 1983 0050 1146     		mov	r1, r2
 1984              		.loc 2 847 74
 1985 0052 B7F91420 		ldrsh	r2, [r7, #20]
 1986              		.loc 2 847 11
 1987 0056 8A1A     		subs	r2, r1, r2
 1988 0058 1146     		mov	r1, r2
 1989 005a 1846     		mov	r0, r3
 1990 005c FFF7FEFF 		bl	PI_Controller
 1991 0060 0346     		mov	r3, r0
 1992              		.loc 2 847 9
 1993 0062 3B82     		strh	r3, [r7, #16]	@ movhi
 848:Src/mc_tasks.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1994              		.loc 2 848 11
 1995 0064 284B     		ldr	r3, .L103+16
 1996 0066 1B68     		ldr	r3, [r3]
 1997              		.loc 2 848 65
 1998 0068 264A     		ldr	r2, .L103+12
 1999 006a B2F91220 		ldrsh	r2, [r2, #18]
 2000              		.loc 2 848 37
 2001 006e 1146     		mov	r1, r2
 2002              		.loc 2 848 74
 2003 0070 B7F91620 		ldrsh	r2, [r7, #22]
 2004              		.loc 2 848 11
 2005 0074 8A1A     		subs	r2, r1, r2
 2006 0076 1146     		mov	r1, r2
 2007 0078 1846     		mov	r0, r3
 2008 007a FFF7FEFF 		bl	PI_Controller
 2009 007e 0346     		mov	r3, r0
 2010              		.loc 2 848 9
 2011 0080 7B82     		strh	r3, [r7, #18]	@ movhi
 849:Src/mc_tasks.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 2012              		.loc 2 849 9
 2013 0082 3969     		ldr	r1, [r7, #16]
 2014 0084 2148     		ldr	r0, .L103+20
 2015 0086 FFF7FEFF 		bl	Circle_Limitation
 2016 008a 0346     		mov	r3, r0
 2017 008c 3B61     		str	r3, [r7, #16]
 850:Src/mc_tasks.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 2018              		.loc 2 850 15
 2019 008e F869     		ldr	r0, [r7, #28]
 2020 0090 FFF7FEFF 		bl	SPD_GetInstElSpeedDpp
 2021              		.loc 2 850 49
 2022 0094 0023     		movs	r3, #0
 2023              		.loc 2 850 12
 2024 0096 9AB2     		uxth	r2, r3
 2025 0098 7B8B     		ldrh	r3, [r7, #26]
 2026 009a 1344     		add	r3, r3, r2
 2027 009c 9BB2     		uxth	r3, r3
 2028 009e 7B83     		strh	r3, [r7, #26]	@ movhi
 851:Src/mc_tasks.c ****   Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 2029              		.loc 2 851 16
 2030 00a0 B7F91A30 		ldrsh	r3, [r7, #26]
 2031 00a4 1946     		mov	r1, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 66


 2032 00a6 3869     		ldr	r0, [r7, #16]
 2033 00a8 FFF7FEFF 		bl	MCM_Rev_Park
 2034 00ac 0346     		mov	r3, r0
 2035 00ae 7B60     		str	r3, [r7, #4]
 852:Src/mc_tasks.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 2036              		.loc 2 852 16
 2037 00b0 124B     		ldr	r3, .L103+4
 2038 00b2 1B68     		ldr	r3, [r3]
 2039 00b4 7968     		ldr	r1, [r7, #4]
 2040 00b6 1846     		mov	r0, r3
 2041 00b8 FFF7FEFF 		bl	PWMC_SetPhaseVoltage
 2042 00bc 0346     		mov	r3, r0
 2043 00be 3B83     		strh	r3, [r7, #24]	@ movhi
 853:Src/mc_tasks.c **** 
 854:Src/mc_tasks.c ****   FOCVars[M1].Vqd = Vqd;
 2044              		.loc 2 854 19
 2045 00c0 104B     		ldr	r3, .L103+12
 2046 00c2 1633     		adds	r3, r3, #22
 2047 00c4 07F11002 		add	r2, r7, #16
 2048 00c8 1068     		ldr	r0, [r2]
 2049 00ca 1860     		str	r0, [r3]	@ unaligned
 855:Src/mc_tasks.c ****   FOCVars[M1].Iab = Iab;
 2050              		.loc 2 855 19
 2051 00cc 0D4A     		ldr	r2, .L103+12
 2052 00ce FB68     		ldr	r3, [r7, #12]
 2053 00d0 1360     		str	r3, [r2]
 856:Src/mc_tasks.c ****   FOCVars[M1].Ialphabeta = Ialphabeta;
 2054              		.loc 2 856 26
 2055 00d2 0C4A     		ldr	r2, .L103+12
 2056 00d4 BB68     		ldr	r3, [r7, #8]
 2057 00d6 5360     		str	r3, [r2, #4]
 857:Src/mc_tasks.c ****   FOCVars[M1].Iqd = Iqd;
 2058              		.loc 2 857 19
 2059 00d8 0A4A     		ldr	r2, .L103+12
 2060 00da 7B69     		ldr	r3, [r7, #20]
 2061 00dc D360     		str	r3, [r2, #12]
 858:Src/mc_tasks.c ****   FOCVars[M1].Valphabeta = Valphabeta;
 2062              		.loc 2 858 26
 2063 00de 094B     		ldr	r3, .L103+12
 2064 00e0 1A33     		adds	r3, r3, #26
 2065 00e2 3A1D     		adds	r2, r7, #4
 2066 00e4 1068     		ldr	r0, [r2]
 2067 00e6 1860     		str	r0, [r3]	@ unaligned
 859:Src/mc_tasks.c ****   FOCVars[M1].hElAngle = hElAngle;
 2068              		.loc 2 859 24
 2069 00e8 064A     		ldr	r2, .L103+12
 2070 00ea 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 2071 00ec 1384     		strh	r3, [r2, #32]	@ movhi
 860:Src/mc_tasks.c **** 
 861:Src/mc_tasks.c ****   return (hCodeError);
 2072              		.loc 2 861 10
 2073 00ee 3B8B     		ldrh	r3, [r7, #24]
 862:Src/mc_tasks.c **** }
 2074              		.loc 2 862 1
 2075 00f0 1846     		mov	r0, r3
 2076 00f2 2037     		adds	r7, r7, #32
 2077              	.LCFI73:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 67


 2078              		.cfi_def_cfa_offset 8
 2079 00f4 BD46     		mov	sp, r7
 2080              	.LCFI74:
 2081              		.cfi_def_cfa_register 13
 2082              		@ sp needed
 2083 00f6 80BD     		pop	{r7, pc}
 2084              	.L104:
 2085              		.align	2
 2086              	.L103:
 2087 00f8 00000000 		.word	pSTC
 2088 00fc 00000000 		.word	pwmcHandle
 2089 0100 00000000 		.word	pPIDIq
 2090 0104 00000000 		.word	FOCVars
 2091 0108 00000000 		.word	pPIDId
 2092 010c 00000000 		.word	CircleLimitationM1
 2093              		.cfi_endproc
 2094              	.LFE1108:
 2096              		.section	.text.TSK_SafetyTask,"ax",%progbits
 2097              		.align	1
 2098              		.weak	TSK_SafetyTask
 2099              		.syntax unified
 2100              		.thumb
 2101              		.thumb_func
 2103              	TSK_SafetyTask:
 2104              	.LFB1109:
 863:Src/mc_tasks.c **** 
 864:Src/mc_tasks.c **** /**
 865:Src/mc_tasks.c ****   * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
 866:Src/mc_tasks.c ****   *
 867:Src/mc_tasks.c ****   * Faults flags are updated here.
 868:Src/mc_tasks.c ****   */
 869:Src/mc_tasks.c **** __weak void TSK_SafetyTask(void)
 870:Src/mc_tasks.c **** {
 2105              		.loc 2 870 1
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 1, uses_anonymous_args = 0
 2109 0000 80B5     		push	{r7, lr}
 2110              	.LCFI75:
 2111              		.cfi_def_cfa_offset 8
 2112              		.cfi_offset 7, -8
 2113              		.cfi_offset 14, -4
 2114 0002 00AF     		add	r7, sp, #0
 2115              	.LCFI76:
 2116              		.cfi_def_cfa_register 7
 871:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 0 */
 872:Src/mc_tasks.c **** 
 873:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 0 */
 874:Src/mc_tasks.c ****   if (1U == bMCBootCompleted)
 2117              		.loc 2 874 10
 2118 0004 054B     		ldr	r3, .L108
 2119 0006 1B78     		ldrb	r3, [r3]
 2120 0008 DBB2     		uxtb	r3, r3
 2121              		.loc 2 874 6
 2122 000a 012B     		cmp	r3, #1
 2123 000c 04D1     		bne	.L107
 875:Src/mc_tasks.c ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 68


 876:Src/mc_tasks.c ****     TSK_SafetyTask_PWMOFF(M1);
 2124              		.loc 2 876 5
 2125 000e 0020     		movs	r0, #0
 2126 0010 FFF7FEFF 		bl	TSK_SafetyTask_PWMOFF
 877:Src/mc_tasks.c ****     /* User conversion execution */
 878:Src/mc_tasks.c ****     RCM_ExecUserConv();
 2127              		.loc 2 878 5
 2128 0014 FFF7FEFF 		bl	RCM_ExecUserConv
 2129              	.L107:
 879:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 1 */
 880:Src/mc_tasks.c **** 
 881:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 1 */
 882:Src/mc_tasks.c ****   }
 883:Src/mc_tasks.c ****   else
 884:Src/mc_tasks.c ****   {
 885:Src/mc_tasks.c ****     /* Nothing to do */
 886:Src/mc_tasks.c ****   }
 887:Src/mc_tasks.c **** }
 2130              		.loc 2 887 1
 2131 0018 00BF     		nop
 2132 001a 80BD     		pop	{r7, pc}
 2133              	.L109:
 2134              		.align	2
 2135              	.L108:
 2136 001c 00000000 		.word	bMCBootCompleted
 2137              		.cfi_endproc
 2138              	.LFE1109:
 2140              		.section	.text.TSK_SafetyTask_PWMOFF,"ax",%progbits
 2141              		.align	1
 2142              		.weak	TSK_SafetyTask_PWMOFF
 2143              		.syntax unified
 2144              		.thumb
 2145              		.thumb_func
 2147              	TSK_SafetyTask_PWMOFF:
 2148              	.LFB1110:
 888:Src/mc_tasks.c **** 
 889:Src/mc_tasks.c **** /**
 890:Src/mc_tasks.c ****   * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
 891:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 892:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink.
 893:Src/mc_tasks.c ****   */
 894:Src/mc_tasks.c **** __weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
 895:Src/mc_tasks.c **** {
 2149              		.loc 2 895 1
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 16
 2152              		@ frame_needed = 1, uses_anonymous_args = 0
 2153 0000 90B5     		push	{r4, r7, lr}
 2154              	.LCFI77:
 2155              		.cfi_def_cfa_offset 12
 2156              		.cfi_offset 4, -12
 2157              		.cfi_offset 7, -8
 2158              		.cfi_offset 14, -4
 2159 0002 85B0     		sub	sp, sp, #20
 2160              	.LCFI78:
 2161              		.cfi_def_cfa_offset 32
 2162 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 69


 2163              	.LCFI79:
 2164              		.cfi_def_cfa_register 7
 2165 0006 0346     		mov	r3, r0
 2166 0008 FB71     		strb	r3, [r7, #7]
 896:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */
 897:Src/mc_tasks.c **** 
 898:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
 899:Src/mc_tasks.c ****   uint16_t CodeReturn = MC_NO_ERROR;
 2167              		.loc 2 899 12
 2168 000a 0023     		movs	r3, #0
 2169 000c FB81     		strh	r3, [r7, #14]	@ movhi
 900:Src/mc_tasks.c ****   const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 2170              		.loc 2 900 18
 2171 000e 0E23     		movs	r3, #14
 2172 0010 3B81     		strh	r3, [r7, #8]	@ movhi
 901:Src/mc_tasks.c ****   /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 902:Src/mc_tasks.c ****   if (M1 == bMotor)
 2173              		.loc 2 902 6
 2174 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2175 0014 002B     		cmp	r3, #0
 2176 0016 18D1     		bne	.L111
 2177              	.LBB5:
 903:Src/mc_tasks.c ****   {
 904:Src/mc_tasks.c ****     uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 2178              		.loc 2 904 27
 2179 0018 4348     		ldr	r0, .L117
 2180 001a FFF7FEFF 		bl	RCM_ExecRegularConv
 2181 001e 0346     		mov	r3, r0
 2182 0020 BB81     		strh	r3, [r7, #12]	@ movhi
 905:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 2183              		.loc 2 905 26
 2184 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2185 0024 5B00     		lsls	r3, r3, #1
 2186 0026 1033     		adds	r3, r3, #16
 2187 0028 3B44     		add	r3, r3, r7
 2188 002a 33F8084C 		ldrh	r4, [r3, #-8]
 2189              		.loc 2 905 37
 2190 002e BB89     		ldrh	r3, [r7, #12]
 2191 0030 1946     		mov	r1, r3
 2192 0032 3E48     		ldr	r0, .L117+4
 2193 0034 FFF7FEFF 		bl	NTC_CalcAvTemp
 2194 0038 0346     		mov	r3, r0
 2195              		.loc 2 905 35
 2196 003a 2340     		ands	r3, r3, r4
 2197 003c 9BB2     		uxth	r3, r3
 2198              		.loc 2 905 16
 2199 003e 1AB2     		sxth	r2, r3
 2200 0040 B7F90E30 		ldrsh	r3, [r7, #14]
 2201 0044 1343     		orrs	r3, r3, r2
 2202 0046 1BB2     		sxth	r3, r3
 2203 0048 FB81     		strh	r3, [r7, #14]	@ movhi
 2204              	.L111:
 2205              	.LBE5:
 906:Src/mc_tasks.c ****   }
 907:Src/mc_tasks.c ****   else
 908:Src/mc_tasks.c ****   {
 909:Src/mc_tasks.c ****     /* Nothing to do */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 70


 910:Src/mc_tasks.c ****   }
 911:Src/mc_tasks.c ****   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER
 2206              		.loc 2 911 17
 2207 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2208 004c 384A     		ldr	r2, .L117+8
 2209 004e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2210 0052 1846     		mov	r0, r3
 2211 0054 FFF7FEFF 		bl	PWMC_IsFaultOccurred
 2212 0058 0346     		mov	r3, r0
 2213 005a 1A46     		mov	r2, r3
 2214              		.loc 2 911 14
 2215 005c FB89     		ldrh	r3, [r7, #14]	@ movhi
 2216 005e 1343     		orrs	r3, r3, r2
 2217 0060 FB81     		strh	r3, [r7, #14]	@ movhi
 912:Src/mc_tasks.c ****                                                     (for STM32F30x can return MC_OVER_VOLT in case 
 913:Src/mc_tasks.c ****   if (M1 == bMotor)
 2218              		.loc 2 913 6
 2219 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2220 0064 002B     		cmp	r3, #0
 2221 0066 18D1     		bne	.L112
 2222              	.LBB6:
 914:Src/mc_tasks.c ****   {
 915:Src/mc_tasks.c ****     uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 2223              		.loc 2 915 28
 2224 0068 3248     		ldr	r0, .L117+12
 2225 006a FFF7FEFF 		bl	RCM_ExecRegularConv
 2226 006e 0346     		mov	r3, r0
 2227 0070 7B81     		strh	r3, [r7, #10]	@ movhi
 916:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 2228              		.loc 2 916 26
 2229 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2230 0074 5B00     		lsls	r3, r3, #1
 2231 0076 1033     		adds	r3, r3, #16
 2232 0078 3B44     		add	r3, r3, r7
 2233 007a 33F8084C 		ldrh	r4, [r3, #-8]
 2234              		.loc 2 916 37
 2235 007e 7B89     		ldrh	r3, [r7, #10]
 2236 0080 1946     		mov	r1, r3
 2237 0082 2D48     		ldr	r0, .L117+16
 2238 0084 FFF7FEFF 		bl	RVBS_CalcAvVbus
 2239 0088 0346     		mov	r3, r0
 2240              		.loc 2 916 35
 2241 008a 2340     		ands	r3, r3, r4
 2242 008c 9BB2     		uxth	r3, r3
 2243              		.loc 2 916 16
 2244 008e 1AB2     		sxth	r2, r3
 2245 0090 B7F90E30 		ldrsh	r3, [r7, #14]
 2246 0094 1343     		orrs	r3, r3, r2
 2247 0096 1BB2     		sxth	r3, r3
 2248 0098 FB81     		strh	r3, [r7, #14]	@ movhi
 2249              	.L112:
 2250              	.LBE6:
 917:Src/mc_tasks.c ****   }
 918:Src/mc_tasks.c ****   else
 919:Src/mc_tasks.c ****   {
 920:Src/mc_tasks.c ****     /* Nothing to do */
 921:Src/mc_tasks.c ****   }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 71


 922:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 2251              		.loc 2 922 27
 2252 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2253              		.loc 2 922 3
 2254 009c 1346     		mov	r3, r2
 2255 009e 5B00     		lsls	r3, r3, #1
 2256 00a0 1344     		add	r3, r3, r2
 2257 00a2 1B01     		lsls	r3, r3, #4
 2258 00a4 254A     		ldr	r2, .L117+20
 2259 00a6 9818     		adds	r0, r3, r2
 2260 00a8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2261 00aa DB43     		mvns	r3, r3
 2262 00ac 9AB2     		uxth	r2, r3
 2263 00ae FB89     		ldrh	r3, [r7, #14]
 2264 00b0 1946     		mov	r1, r3
 2265 00b2 FFF7FEFF 		bl	MCI_FaultProcessing
 923:Src/mc_tasks.c **** 
 924:Src/mc_tasks.c ****   if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 2266              		.loc 2 924 29
 2267 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2268              		.loc 2 924 7
 2269 00b8 1346     		mov	r3, r2
 2270 00ba 5B00     		lsls	r3, r3, #1
 2271 00bc 1344     		add	r3, r3, r2
 2272 00be 1B01     		lsls	r3, r3, #4
 2273 00c0 1E4A     		ldr	r2, .L117+20
 2274 00c2 1344     		add	r3, r3, r2
 2275 00c4 1846     		mov	r0, r3
 2276 00c6 FFF7FEFF 		bl	MCI_GetFaultState
 2277 00ca 0346     		mov	r3, r0
 2278              		.loc 2 924 6
 2279 00cc 002B     		cmp	r3, #0
 2280 00ce 27D0     		beq	.L116
 925:Src/mc_tasks.c ****   {
 926:Src/mc_tasks.c ****     /* Reset Encoder state */
 927:Src/mc_tasks.c ****     if (pEAC[bMotor] != MC_NULL)
 2281              		.loc 2 927 13
 2282 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2283 00d2 1B4A     		ldr	r2, .L117+24
 2284 00d4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2285              		.loc 2 927 8
 2286 00d8 002B     		cmp	r3, #0
 2287 00da 07D0     		beq	.L114
 928:Src/mc_tasks.c ****     {
 929:Src/mc_tasks.c ****       EAC_SetRestartState(pEAC[bMotor], false);
 2288              		.loc 2 929 7
 2289 00dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2290 00de 184A     		ldr	r2, .L117+24
 2291 00e0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2292 00e4 0021     		movs	r1, #0
 2293 00e6 1846     		mov	r0, r3
 2294 00e8 FFF7FEFF 		bl	EAC_SetRestartState
 2295              	.L114:
 930:Src/mc_tasks.c ****     }
 931:Src/mc_tasks.c ****     else
 932:Src/mc_tasks.c ****     {
 933:Src/mc_tasks.c ****       /* Nothing to do */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 72


 934:Src/mc_tasks.c ****     }
 935:Src/mc_tasks.c ****     PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 2296              		.loc 2 935 5
 2297 00ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2298 00ee 104A     		ldr	r2, .L117+8
 2299 00f0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2300 00f4 1846     		mov	r0, r3
 2301 00f6 FFF7FEFF 		bl	PWMC_SwitchOffPWM
 936:Src/mc_tasks.c ****     if (MCPA_UART_A.Mark != 0U)
 2302              		.loc 2 936 20
 2303 00fa 124B     		ldr	r3, .L117+28
 2304 00fc 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 2305              		.loc 2 936 8
 2306 0100 002B     		cmp	r3, #0
 2307 0102 02D0     		beq	.L115
 937:Src/mc_tasks.c ****     {
 938:Src/mc_tasks.c ****       MCPA_flushDataLog (&MCPA_UART_A);
 2308              		.loc 2 938 7
 2309 0104 0F48     		ldr	r0, .L117+28
 2310 0106 FFF7FEFF 		bl	MCPA_flushDataLog
 2311              	.L115:
 939:Src/mc_tasks.c ****     }
 940:Src/mc_tasks.c ****     else
 941:Src/mc_tasks.c ****     {
 942:Src/mc_tasks.c ****       /* Nothing to do */
 943:Src/mc_tasks.c ****     }
 944:Src/mc_tasks.c ****     FOC_Clear(bMotor);
 2312              		.loc 2 944 5
 2313 010a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2314 010c 1846     		mov	r0, r3
 2315 010e FFF7FEFF 		bl	FOC_Clear
 945:Src/mc_tasks.c ****     PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 2316              		.loc 2 945 5
 2317 0112 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2318 0114 0C4A     		ldr	r2, .L117+32
 2319 0116 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2320 011a 1846     		mov	r0, r3
 2321 011c FFF7FEFF 		bl	PQD_Clear
 2322              	.L116:
 946:Src/mc_tasks.c ****     /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */
 947:Src/mc_tasks.c **** 
 948:Src/mc_tasks.c ****     /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
 949:Src/mc_tasks.c ****   }
 950:Src/mc_tasks.c ****   else
 951:Src/mc_tasks.c ****   {
 952:Src/mc_tasks.c ****     /* No errors */
 953:Src/mc_tasks.c ****   }
 954:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */
 955:Src/mc_tasks.c **** 
 956:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
 957:Src/mc_tasks.c **** }
 2323              		.loc 2 957 1
 2324 0120 00BF     		nop
 2325 0122 1437     		adds	r7, r7, #20
 2326              	.LCFI80:
 2327              		.cfi_def_cfa_offset 12
 2328 0124 BD46     		mov	sp, r7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 73


 2329              	.LCFI81:
 2330              		.cfi_def_cfa_register 13
 2331              		@ sp needed
 2332 0126 90BD     		pop	{r4, r7, pc}
 2333              	.L118:
 2334              		.align	2
 2335              	.L117:
 2336 0128 00000000 		.word	TempRegConv_M1
 2337 012c 00000000 		.word	TempSensor_M1
 2338 0130 00000000 		.word	pwmcHandle
 2339 0134 00000000 		.word	VbusRegConv_M1
 2340 0138 00000000 		.word	BusVoltageSensor_M1
 2341 013c 00000000 		.word	Mci
 2342 0140 00000000 		.word	pEAC
 2343 0144 00000000 		.word	MCPA_UART_A
 2344 0148 00000000 		.word	pMPM
 2345              		.cfi_endproc
 2346              	.LFE1110:
 2348              		.section	.text.GetMCI,"ax",%progbits
 2349              		.align	1
 2350              		.weak	GetMCI
 2351              		.syntax unified
 2352              		.thumb
 2353              		.thumb_func
 2355              	GetMCI:
 2356              	.LFB1111:
 958:Src/mc_tasks.c **** 
 959:Src/mc_tasks.c **** /**
 960:Src/mc_tasks.c ****   * @brief  This function returns the reference of the MCInterface relative to
 961:Src/mc_tasks.c ****   *         the selected drive.
 962:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 963:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink.
 964:Src/mc_tasks.c ****   * @retval MCI_Handle_t * Reference to MCInterface relative to the selected drive.
 965:Src/mc_tasks.c ****   *         Note: it can be MC_NULL if MCInterface of selected drive is not
 966:Src/mc_tasks.c ****   *         allocated.
 967:Src/mc_tasks.c ****   */
 968:Src/mc_tasks.c **** __weak MCI_Handle_t *GetMCI(uint8_t bMotor)
 969:Src/mc_tasks.c **** {
 2357              		.loc 2 969 1
 2358              		.cfi_startproc
 2359              		@ args = 0, pretend = 0, frame = 16
 2360              		@ frame_needed = 1, uses_anonymous_args = 0
 2361              		@ link register save eliminated.
 2362 0000 80B4     		push	{r7}
 2363              	.LCFI82:
 2364              		.cfi_def_cfa_offset 4
 2365              		.cfi_offset 7, -4
 2366 0002 85B0     		sub	sp, sp, #20
 2367              	.LCFI83:
 2368              		.cfi_def_cfa_offset 24
 2369 0004 00AF     		add	r7, sp, #0
 2370              	.LCFI84:
 2371              		.cfi_def_cfa_register 7
 2372 0006 0346     		mov	r3, r0
 2373 0008 FB71     		strb	r3, [r7, #7]
 970:Src/mc_tasks.c ****   MCI_Handle_t *retVal = MC_NULL; //cstat !MISRAC2012-Rule-8.13
 2374              		.loc 2 970 17
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 74


 2375 000a 0023     		movs	r3, #0
 2376 000c FB60     		str	r3, [r7, #12]
 971:Src/mc_tasks.c ****   if (bMotor < (uint8_t)NBR_OF_MOTORS)
 2377              		.loc 2 971 6
 2378 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2379 0010 002B     		cmp	r3, #0
 2380 0012 07D1     		bne	.L120
 972:Src/mc_tasks.c ****   {
 973:Src/mc_tasks.c ****     retVal = &Mci[bMotor];
 2381              		.loc 2 973 18
 2382 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2383              		.loc 2 973 12
 2384 0016 1346     		mov	r3, r2
 2385 0018 5B00     		lsls	r3, r3, #1
 2386 001a 1344     		add	r3, r3, r2
 2387 001c 1B01     		lsls	r3, r3, #4
 2388 001e 054A     		ldr	r2, .L122
 2389 0020 1344     		add	r3, r3, r2
 2390 0022 FB60     		str	r3, [r7, #12]
 2391              	.L120:
 974:Src/mc_tasks.c ****   }
 975:Src/mc_tasks.c ****   else
 976:Src/mc_tasks.c ****   {
 977:Src/mc_tasks.c ****     /* Nothing to do */
 978:Src/mc_tasks.c ****   }
 979:Src/mc_tasks.c ****   return (retVal);
 2392              		.loc 2 979 10
 2393 0024 FB68     		ldr	r3, [r7, #12]
 980:Src/mc_tasks.c **** }
 2394              		.loc 2 980 1
 2395 0026 1846     		mov	r0, r3
 2396 0028 1437     		adds	r7, r7, #20
 2397              	.LCFI85:
 2398              		.cfi_def_cfa_offset 4
 2399 002a BD46     		mov	sp, r7
 2400              	.LCFI86:
 2401              		.cfi_def_cfa_register 13
 2402              		@ sp needed
 2403 002c 5DF8047B 		ldr	r7, [sp], #4
 2404              	.LCFI87:
 2405              		.cfi_restore 7
 2406              		.cfi_def_cfa_offset 0
 2407 0030 7047     		bx	lr
 2408              	.L123:
 2409 0032 00BF     		.align	2
 2410              	.L122:
 2411 0034 00000000 		.word	Mci
 2412              		.cfi_endproc
 2413              	.LFE1111:
 2415              		.section	.text.TSK_HardwareFaultTask,"ax",%progbits
 2416              		.align	1
 2417              		.weak	TSK_HardwareFaultTask
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2422              	TSK_HardwareFaultTask:
 2423              	.LFB1112:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 75


 981:Src/mc_tasks.c **** 
 982:Src/mc_tasks.c **** /**
 983:Src/mc_tasks.c ****   * @brief  Puts the Motor Control subsystem in in safety conditions on a Hard Fault
 984:Src/mc_tasks.c ****   *
 985:Src/mc_tasks.c ****   *  This function is to be executed when a general hardware failure has been detected
 986:Src/mc_tasks.c ****   * by the microcontroller and is used to put the system in safety condition.
 987:Src/mc_tasks.c ****   */
 988:Src/mc_tasks.c **** __weak void TSK_HardwareFaultTask(void)
 989:Src/mc_tasks.c **** {
 2424              		.loc 2 989 1
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 0
 2427              		@ frame_needed = 1, uses_anonymous_args = 0
 2428 0000 80B5     		push	{r7, lr}
 2429              	.LCFI88:
 2430              		.cfi_def_cfa_offset 8
 2431              		.cfi_offset 7, -8
 2432              		.cfi_offset 14, -4
 2433 0002 00AF     		add	r7, sp, #0
 2434              	.LCFI89:
 2435              		.cfi_def_cfa_register 7
 990:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 0 */
 991:Src/mc_tasks.c **** 
 992:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 0 */
 993:Src/mc_tasks.c ****  // R3_1_SwitchOffPWM(pwmcHandle[M1]);
 994:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 2436              		.loc 2 994 3
 2437 0004 0022     		movs	r2, #0
 2438 0006 8021     		movs	r1, #128
 2439 0008 0248     		ldr	r0, .L125
 2440 000a FFF7FEFF 		bl	MCI_FaultProcessing
 995:Src/mc_tasks.c **** 
 996:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 1 */
 997:Src/mc_tasks.c **** 
 998:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 1 */
 999:Src/mc_tasks.c **** }
 2441              		.loc 2 999 1
 2442 000e 00BF     		nop
 2443 0010 80BD     		pop	{r7, pc}
 2444              	.L126:
 2445 0012 00BF     		.align	2
 2446              	.L125:
 2447 0014 00000000 		.word	Mci
 2448              		.cfi_endproc
 2449              	.LFE1112:
 2451              		.section	.text.startMediumFrequencyTask,"ax",%progbits
 2452              		.align	1
 2453              		.global	startMediumFrequencyTask
 2454              		.syntax unified
 2455              		.thumb
 2456              		.thumb_func
 2458              	startMediumFrequencyTask:
 2459              	.LFB1113:
1000:Src/mc_tasks.c **** 
1001:Src/mc_tasks.c **** /* startMediumFrequencyTask function */
1002:Src/mc_tasks.c **** void startMediumFrequencyTask(void const * argument)
1003:Src/mc_tasks.c **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 76


 2460              		.loc 2 1003 1
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 8
 2463              		@ frame_needed = 1, uses_anonymous_args = 0
 2464 0000 80B5     		push	{r7, lr}
 2465              	.LCFI90:
 2466              		.cfi_def_cfa_offset 8
 2467              		.cfi_offset 7, -8
 2468              		.cfi_offset 14, -4
 2469 0002 82B0     		sub	sp, sp, #8
 2470              	.LCFI91:
 2471              		.cfi_def_cfa_offset 16
 2472 0004 00AF     		add	r7, sp, #0
 2473              	.LCFI92:
 2474              		.cfi_def_cfa_register 7
 2475 0006 7860     		str	r0, [r7, #4]
 2476              	.L128:
1004:Src/mc_tasks.c ****   /* USER CODE BEGIN MF task 1 */
1005:Src/mc_tasks.c ****   /* Infinite loop */
1006:Src/mc_tasks.c ****   for(;;)
1007:Src/mc_tasks.c ****   {
1008:Src/mc_tasks.c ****     /* Delay of 500us */
1009:Src/mc_tasks.c ****     vTaskDelay(1);
 2477              		.loc 2 1009 5 discriminator 1
 2478 0008 0120     		movs	r0, #1
 2479 000a FFF7FEFF 		bl	vTaskDelay
1010:Src/mc_tasks.c ****     MC_RunMotorControlTasks();
 2480              		.loc 2 1010 5 discriminator 1
 2481 000e FFF7FEFF 		bl	MC_RunMotorControlTasks
1009:Src/mc_tasks.c ****     MC_RunMotorControlTasks();
 2482              		.loc 2 1009 5 discriminator 1
 2483 0012 F9E7     		b	.L128
 2484              		.cfi_endproc
 2485              	.LFE1113:
 2487              		.section	.text.StartSafetyTask,"ax",%progbits
 2488              		.align	1
 2489              		.global	StartSafetyTask
 2490              		.syntax unified
 2491              		.thumb
 2492              		.thumb_func
 2494              	StartSafetyTask:
 2495              	.LFB1114:
1011:Src/mc_tasks.c ****   }
1012:Src/mc_tasks.c ****   /* USER CODE END MF task 1 */
1013:Src/mc_tasks.c **** }
1014:Src/mc_tasks.c **** 
1015:Src/mc_tasks.c **** /* startSafetyTask function */
1016:Src/mc_tasks.c **** void StartSafetyTask(void const * argument)
1017:Src/mc_tasks.c **** {
 2496              		.loc 2 1017 1
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 8
 2499              		@ frame_needed = 1, uses_anonymous_args = 0
 2500 0000 80B5     		push	{r7, lr}
 2501              	.LCFI93:
 2502              		.cfi_def_cfa_offset 8
 2503              		.cfi_offset 7, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 77


 2504              		.cfi_offset 14, -4
 2505 0002 82B0     		sub	sp, sp, #8
 2506              	.LCFI94:
 2507              		.cfi_def_cfa_offset 16
 2508 0004 00AF     		add	r7, sp, #0
 2509              	.LCFI95:
 2510              		.cfi_def_cfa_register 7
 2511 0006 7860     		str	r0, [r7, #4]
 2512              	.L130:
1018:Src/mc_tasks.c ****   /* USER CODE BEGIN SF task 1 */
1019:Src/mc_tasks.c ****   /* Infinite loop */
1020:Src/mc_tasks.c ****   for(;;)
1021:Src/mc_tasks.c ****   {
1022:Src/mc_tasks.c ****     /* Delay of 500us */
1023:Src/mc_tasks.c ****     vTaskDelay(1);
 2513              		.loc 2 1023 5 discriminator 1
 2514 0008 0120     		movs	r0, #1
 2515 000a FFF7FEFF 		bl	vTaskDelay
1024:Src/mc_tasks.c ****     TSK_SafetyTask();
 2516              		.loc 2 1024 5 discriminator 1
 2517 000e FFF7FEFF 		bl	TSK_SafetyTask
1023:Src/mc_tasks.c ****     TSK_SafetyTask();
 2518              		.loc 2 1023 5 discriminator 1
 2519 0012 F9E7     		b	.L130
 2520              		.cfi_endproc
 2521              	.LFE1114:
 2523              		.section	.text.UI_HandleStartStopButton_cb,"ax",%progbits
 2524              		.align	1
 2525              		.weak	UI_HandleStartStopButton_cb
 2526              		.syntax unified
 2527              		.thumb
 2528              		.thumb_func
 2530              	UI_HandleStartStopButton_cb:
 2531              	.LFB1115:
1025:Src/mc_tasks.c ****   }
1026:Src/mc_tasks.c ****   /* USER CODE END SF task 1 */
1027:Src/mc_tasks.c **** }
1028:Src/mc_tasks.c **** 
1029:Src/mc_tasks.c **** __weak void UI_HandleStartStopButton_cb (void)
1030:Src/mc_tasks.c **** {
 2532              		.loc 2 1030 1
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 0
 2535              		@ frame_needed = 1, uses_anonymous_args = 0
 2536 0000 80B5     		push	{r7, lr}
 2537              	.LCFI96:
 2538              		.cfi_def_cfa_offset 8
 2539              		.cfi_offset 7, -8
 2540              		.cfi_offset 14, -4
 2541 0002 00AF     		add	r7, sp, #0
 2542              	.LCFI97:
 2543              		.cfi_def_cfa_register 7
1031:Src/mc_tasks.c **** /* USER CODE BEGIN START_STOP_BTN */
1032:Src/mc_tasks.c ****   if (IDLE == MC_GetSTMStateMotor1())
 2544              		.loc 2 1032 15
 2545 0004 FFF7FEFF 		bl	MC_GetSTMStateMotor1
 2546 0008 0346     		mov	r3, r0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 78


 2547              		.loc 2 1032 6
 2548 000a 002B     		cmp	r3, #0
 2549 000c 02D1     		bne	.L132
1033:Src/mc_tasks.c ****   {
1034:Src/mc_tasks.c ****     /* Ramp parameters should be tuned for the actual motor */
1035:Src/mc_tasks.c ****     (void)MC_StartMotor1();
 2550              		.loc 2 1035 11
 2551 000e FFF7FEFF 		bl	MC_StartMotor1
1036:Src/mc_tasks.c ****   }
1037:Src/mc_tasks.c ****   else
1038:Src/mc_tasks.c ****   {
1039:Src/mc_tasks.c ****     (void)MC_StopMotor1();
1040:Src/mc_tasks.c ****   }
1041:Src/mc_tasks.c **** /* USER CODE END START_STOP_BTN */
1042:Src/mc_tasks.c **** }
 2552              		.loc 2 1042 1
 2553 0012 01E0     		b	.L134
 2554              	.L132:
1039:Src/mc_tasks.c ****   }
 2555              		.loc 2 1039 11
 2556 0014 FFF7FEFF 		bl	MC_StopMotor1
 2557              	.L134:
 2558              		.loc 2 1042 1
 2559 0018 00BF     		nop
 2560 001a 80BD     		pop	{r7, pc}
 2561              		.cfi_endproc
 2562              	.LFE1115:
 2564              		.section	.text.mc_lock_pins,"ax",%progbits
 2565              		.align	1
 2566              		.weak	mc_lock_pins
 2567              		.syntax unified
 2568              		.thumb
 2569              		.thumb_func
 2571              	mc_lock_pins:
 2572              	.LFB1116:
1043:Src/mc_tasks.c **** 
1044:Src/mc_tasks.c ****  /**
1045:Src/mc_tasks.c ****   * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
1046:Src/mc_tasks.c ****   */
1047:Src/mc_tasks.c **** __weak void mc_lock_pins (void)
1048:Src/mc_tasks.c **** {
 2573              		.loc 2 1048 1
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 0
 2576              		@ frame_needed = 1, uses_anonymous_args = 0
 2577 0000 80B5     		push	{r7, lr}
 2578              	.LCFI98:
 2579              		.cfi_def_cfa_offset 8
 2580              		.cfi_offset 7, -8
 2581              		.cfi_offset 14, -4
 2582 0002 00AF     		add	r7, sp, #0
 2583              	.LCFI99:
 2584              		.cfi_def_cfa_register 7
1049:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_A_GPIO_Port, M1_ENCODER_A_Pin);
 2585              		.loc 2 1049 1
 2586 0004 4021     		movs	r1, #64
 2587 0006 2348     		ldr	r0, .L136
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 79


 2588 0008 FFF7FEFF 		bl	LL_GPIO_LockPin
1050:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_B_GPIO_Port, M1_ENCODER_B_Pin);
 2589              		.loc 2 1050 1
 2590 000c 8021     		movs	r1, #128
 2591 000e 2148     		ldr	r0, .L136
 2592 0010 FFF7FEFF 		bl	LL_GPIO_LockPin
1051:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 2593              		.loc 2 1051 1
 2594 0014 4FF48071 		mov	r1, #256
 2595 0018 4FF09040 		mov	r0, #1207959552
 2596 001c FFF7FEFF 		bl	LL_GPIO_LockPin
1052:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 2597              		.loc 2 1052 1
 2598 0020 4FF40071 		mov	r1, #512
 2599 0024 4FF09040 		mov	r0, #1207959552
 2600 0028 FFF7FEFF 		bl	LL_GPIO_LockPin
1053:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_DP_GPIO_Port, M1_DP_Pin);
 2601              		.loc 2 1053 1
 2602 002c 4FF40061 		mov	r1, #2048
 2603 0030 4FF09040 		mov	r0, #1207959552
 2604 0034 FFF7FEFF 		bl	LL_GPIO_LockPin
1054:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 2605              		.loc 2 1054 1
 2606 0038 4FF48061 		mov	r1, #1024
 2607 003c 4FF09040 		mov	r0, #1207959552
 2608 0040 FFF7FEFF 		bl	LL_GPIO_LockPin
1055:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_EN_V_GPIO_Port, M1_PWM_EN_V_Pin);
 2609              		.loc 2 1055 1
 2610 0044 4FF48041 		mov	r1, #16384
 2611 0048 1348     		ldr	r0, .L136+4
 2612 004a FFF7FEFF 		bl	LL_GPIO_LockPin
1056:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
 2613              		.loc 2 1056 1
 2614 004e 4FF40051 		mov	r1, #8192
 2615 0052 1148     		ldr	r0, .L136+4
 2616 0054 FFF7FEFF 		bl	LL_GPIO_LockPin
1057:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
 2617              		.loc 2 1057 1
 2618 0058 4FF40041 		mov	r1, #32768
 2619 005c 0E48     		ldr	r0, .L136+4
 2620 005e FFF7FEFF 		bl	LL_GPIO_LockPin
1058:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 2621              		.loc 2 1058 1
 2622 0062 0121     		movs	r1, #1
 2623 0064 0C48     		ldr	r0, .L136+4
 2624 0066 FFF7FEFF 		bl	LL_GPIO_LockPin
1059:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 2625              		.loc 2 1059 1
 2626 006a 0221     		movs	r1, #2
 2627 006c 0A48     		ldr	r0, .L136+4
 2628 006e FFF7FEFF 		bl	LL_GPIO_LockPin
1060:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 2629              		.loc 2 1060 1
 2630 0072 0121     		movs	r1, #1
 2631 0074 4FF09040 		mov	r0, #1207959552
 2632 0078 FFF7FEFF 		bl	LL_GPIO_LockPin
1061:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 80


 2633              		.loc 2 1061 1
 2634 007c 0221     		movs	r1, #2
 2635 007e 4FF09040 		mov	r0, #1207959552
 2636 0082 FFF7FEFF 		bl	LL_GPIO_LockPin
1062:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 2637              		.loc 2 1062 1
 2638 0086 1021     		movs	r1, #16
 2639 0088 0248     		ldr	r0, .L136
 2640 008a FFF7FEFF 		bl	LL_GPIO_LockPin
1063:Src/mc_tasks.c **** }
 2641              		.loc 2 1063 1
 2642 008e 00BF     		nop
 2643 0090 80BD     		pop	{r7, pc}
 2644              	.L137:
 2645 0092 00BF     		.align	2
 2646              	.L136:
 2647 0094 00080048 		.word	1207961600
 2648 0098 00040048 		.word	1207960576
 2649              		.cfi_endproc
 2650              	.LFE1116:
 2652              		.text
 2653              	.Letext0:
 2654              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2655              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2656              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 2657              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 2658              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 2659              		.file 8 "Inc/mc_type.h"
 2660              		.file 9 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2661              		.file 10 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2662              		.file 11 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2663              		.file 12 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2664              		.file 13 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 2665              		.file 14 "Inc/pwm_curr_fdbk.h"
 2666              		.file 15 "Inc/mc_perf.h"
 2667              		.file 16 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/encoder_speed_pos_fdbk.h"
 2668              		.file 17 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/enc_align_ctrl.h"
 2669              		.file 18 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/trajectory_ctrl.h"
 2670              		.file 19 "Inc/mc_interface.h"
 2671              		.file 20 "Inc/regular_conversion_manager.h"
 2672              		.file 21 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 2673              		.file 22 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 2674              		.file 23 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 2675              		.file 24 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/L4xx/Inc/r3_1_l4xx_pwm_curr_fdbk.h"
 2676              		.file 25 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/hall_speed_pos_fdbk.h"
 2677              		.file 26 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 2678              		.file 27 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 2679              		.file 28 "Inc/mc_config.h"
 2680              		.file 29 "Inc/mc_parameters.h"
 2681              		.file 30 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 2682              		.file 31 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 2683              		.file 32 "Inc/aspep.h"
 2684              		.file 33 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcpa.h"
 2685              		.file 34 "Inc/mcp_config.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 81


DEFINED SYMBOLS
                            *ABS*:00000000 mc_tasks.c
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:20     .rodata.OFFSET_TAB_CCMRx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:23     .rodata.OFFSET_TAB_CCMRx:00000000 OFFSET_TAB_CCMRx
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:26     .rodata.SHIFT_TAB_OCxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:29     .rodata.SHIFT_TAB_OCxx:00000000 SHIFT_TAB_OCxx
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:32     .rodata.SHIFT_TAB_ICxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:35     .rodata.SHIFT_TAB_ICxx:00000000 SHIFT_TAB_ICxx
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:38     .rodata.SHIFT_TAB_CCxP:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:41     .rodata.SHIFT_TAB_CCxP:00000000 SHIFT_TAB_CCxP
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:44     .rodata.SHIFT_TAB_OISx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:47     .rodata.SHIFT_TAB_OISx:00000000 SHIFT_TAB_OISx
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:50     .text.LL_GPIO_LockPin:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:55     .text.LL_GPIO_LockPin:00000000 LL_GPIO_LockPin
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:114    .rodata.CHANNEL_OFFSET_TAB:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:117    .rodata.CHANNEL_OFFSET_TAB:00000000 CHANNEL_OFFSET_TAB
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:120    .bss.FOCVars:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:123    .bss.FOCVars:00000000 FOCVars
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:126    .bss.pEAC:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:129    .bss.pEAC:00000000 pEAC
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:132    .bss.pwmcHandle:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:135    .bss.pwmcHandle:00000000 pwmcHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:138    .bss.pREMNG:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:141    .bss.pREMNG:00000000 pREMNG
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:144    .bss.hMFTaskCounterM1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:147    .bss.hMFTaskCounterM1:00000000 hMFTaskCounterM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:150    .bss.hBootCapDelayCounterM1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:153    .bss.hBootCapDelayCounterM1:00000000 hBootCapDelayCounterM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:156    .bss.hStopPermanencyCounterM1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:159    .bss.hStopPermanencyCounterM1:00000000 hStopPermanencyCounterM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:164    .bss.bMCBootCompleted:00000000 bMCBootCompleted
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:165    .bss.bMCBootCompleted:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:171    .bss.PerfTraces:00000000 PerfTraces
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:168    .bss.PerfTraces:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:174    .text.MCboot:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:180    .text.MCboot:00000000 MCboot
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1292   .text.FOC_Clear:00000000 FOC_Clear
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:382    .text.MCboot:00000148 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:414    .text.MC_RunMotorControlTasks:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:420    .text.MC_RunMotorControlTasks:00000000 MC_RunMotorControlTasks
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:530    .text.MC_Scheduler:00000000 MC_Scheduler
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:450    .text.MC_RunMotorControlTasks:00000018 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:455    .text.TSK_MF_StopProcessing:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:461    .text.TSK_MF_StopProcessing:00000000 TSK_MF_StopProcessing
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1727   .text.TSK_SetStopPermanencyTimeM1:00000000 TSK_SetStopPermanencyTimeM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:518    .text.TSK_MF_StopProcessing:00000044 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:524    .text.MC_Scheduler:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:694    .text.TSK_MediumFrequencyTaskM1:00000000 TSK_MediumFrequencyTaskM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:677    .text.MC_Scheduler:000000bc $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:688    .text.TSK_MediumFrequencyTaskM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:752    .text.TSK_MediumFrequencyTaskM1:00000054 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:773    .text.TSK_MediumFrequencyTaskM1:000000a8 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1615   .text.TSK_SetChargeBootCapDelayM1:00000000 TSK_SetChargeBootCapDelayM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1666   .text.TSK_ChargeBootCapDelayHasElapsedM1:00000000 TSK_ChargeBootCapDelayHasElapsedM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1477   .text.FOC_InitAdditionalMethods:00000000 FOC_InitAdditionalMethods
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1520   .text.FOC_CalcCurrRef:00000000 FOC_CalcCurrRef
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1116   .text.TSK_MediumFrequencyTaskM1:000002f0 $d
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 82


C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1778   .text.TSK_StopPermanencyTimeHasElapsedM1:00000000 TSK_StopPermanencyTimeHasElapsedM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1128   .text.TSK_MediumFrequencyTaskM1:00000318 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1276   .text.TSK_MediumFrequencyTaskM1:000003f4 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1286   .text.FOC_Clear:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1461   .text.FOC_Clear:00000124 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1471   .text.FOC_InitAdditionalMethods:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1514   .text.FOC_CalcCurrRef:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1603   .text.FOC_CalcCurrRef:00000070 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1609   .text.TSK_SetChargeBootCapDelayM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1655   .text.TSK_SetChargeBootCapDelayM1:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1660   .text.TSK_ChargeBootCapDelayHasElapsedM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1716   .text.TSK_ChargeBootCapDelayHasElapsedM1:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1721   .text.TSK_SetStopPermanencyTimeM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1767   .text.TSK_SetStopPermanencyTimeM1:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1772   .text.TSK_StopPermanencyTimeHasElapsedM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1828   .text.TSK_StopPermanencyTimeHasElapsedM1:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1833   .text.TSK_HighFrequencyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1839   .text.TSK_HighFrequencyTask:00000000 TSK_HighFrequencyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1929   .text.FOC_CurrControllerM1:00000000 FOC_CurrControllerM1
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1915   .text.TSK_HighFrequencyTask:0000005c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:1924   .text.FOC_CurrControllerM1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2087   .text.FOC_CurrControllerM1:000000f8 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2097   .text.TSK_SafetyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2103   .text.TSK_SafetyTask:00000000 TSK_SafetyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2147   .text.TSK_SafetyTask_PWMOFF:00000000 TSK_SafetyTask_PWMOFF
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2136   .text.TSK_SafetyTask:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2141   .text.TSK_SafetyTask_PWMOFF:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2336   .text.TSK_SafetyTask_PWMOFF:00000128 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2349   .text.GetMCI:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2355   .text.GetMCI:00000000 GetMCI
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2411   .text.GetMCI:00000034 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2416   .text.TSK_HardwareFaultTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2422   .text.TSK_HardwareFaultTask:00000000 TSK_HardwareFaultTask
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2447   .text.TSK_HardwareFaultTask:00000014 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2452   .text.startMediumFrequencyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2458   .text.startMediumFrequencyTask:00000000 startMediumFrequencyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2488   .text.StartSafetyTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2494   .text.StartSafetyTask:00000000 StartSafetyTask
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2524   .text.UI_HandleStartStopButton_cb:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2530   .text.UI_HandleStartStopButton_cb:00000000 UI_HandleStartStopButton_cb
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2565   .text.mc_lock_pins:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2571   .text.mc_lock_pins:00000000 mc_lock_pins
C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s:2647   .text.mc_lock_pins:00000094 $d

UNDEFINED SYMBOLS
R3_1_Init
ASPEP_start
startTimers
PID_HandleInit
ENC_Init
HALL_Init
EAC_Init
TC_Init
STC_Init
VSS_Init
RCM_RegisterRegConv
RVBS_Init
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 83


NTC_Init
REMNG_Init
STC_GetDefaultIqdref
MCI_Init
STC_GetMecSpeedRefUnitDefault
MCI_ExecSpeedRamp
MC_Perf_Measure_Init
MC_APP_BootHook
PWM_Handle_M1
aspepOverUartA
PIDSpeedHandle_M1
ENCODER_M1
HALL_M1
pSTC
VirtualSpeedSensorM1
EncAlignCtrlM1
PID_PosParamsM1
SpeednTorqCtrlM1
PosCtrlM1
PIDIqHandle_M1
PIDIdHandle_M1
VbusRegConv_M1
BusVoltageSensor_M1
pMPM
TempRegConv_M1
TempSensor_M1
RampExtMngrHFParamsM1
pPosCtrl
Mci
scaleParams_M1
PQD_Clear
MC_APP_PostMediumFrequencyHook_M1
MCP_ReceivedPacket
MCP_Over_UartA
MC_BG_Perf_Measure_Start
ENC_CalcAvrgMecSpeedUnit
PQD_CalcElMotorPower
MCI_GetCurrentFaults
MCI_GetOccurredFaults
PWMC_CurrentReadingCalibr
R3_1_TurnOnLowSides
STC_SetSpeedSensor
ENC_Clear
EAC_IsAligned
EAC_StartAlignment
STC_SetControlMode
STC_ForceSpeedReferenceToCurrentSpeed
MCI_ExecBufferedCommands
PWMC_SwitchOnPWM
EAC_Exec
STC_CalcTorqueReference
TC_PositionRegulation
R3_1_SwitchOnPWM
TC_EncAlignmentCommand
MC_BG_Perf_Measure_Stop
PID_SetIntegralTerm
STC_Clear
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvAmEyf.s 			page 84


PWMC_SwitchOffPWM
MC_Perf_Clear
pPIDIq
pPIDId
MC_Perf_Measure_Start
ENC_CalcAngle
MCI_FaultProcessing
MCPA_dataLog
MC_Perf_Measure_Stop
GLOBAL_TIMESTAMP
MCPA_UART_A
STC_GetSpeedSensor
SPD_GetElAngle
PWMC_GetPhaseCurrents
MCM_Clarke
MCM_Park
PI_Controller
Circle_Limitation
SPD_GetInstElSpeedDpp
MCM_Rev_Park
PWMC_SetPhaseVoltage
CircleLimitationM1
RCM_ExecUserConv
RCM_ExecRegularConv
NTC_CalcAvTemp
PWMC_IsFaultOccurred
RVBS_CalcAvVbus
MCI_GetFaultState
EAC_SetRestartState
MCPA_flushDataLog
vTaskDelay
MC_GetSTMStateMotor1
MC_StartMotor1
MC_StopMotor1
