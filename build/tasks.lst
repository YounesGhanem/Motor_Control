ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	140
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 2


  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              		.align	2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              		.align	2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xTickCount,"aw",%nobits
  87              		.align	2
  90              	xTickCount:
  91 0000 00000000 		.space	4
  92              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  93              		.align	2
  96              	uxTopReadyPriority:
  97 0000 00000000 		.space	4
  98              		.section	.bss.xSchedulerRunning,"aw",%nobits
  99              		.align	2
 102              	xSchedulerRunning:
 103 0000 00000000 		.space	4
 104              		.section	.bss.xPendedTicks,"aw",%nobits
 105              		.align	2
 108              	xPendedTicks:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xYieldPending,"aw",%nobits
 111              		.align	2
 114              	xYieldPending:
 115 0000 00000000 		.space	4
 116              		.section	.bss.xNumOfOverflows,"aw",%nobits
 117              		.align	2
 120              	xNumOfOverflows:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxTaskNumber,"aw",%nobits
 123              		.align	2
 126              	uxTaskNumber:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 3


 127 0000 00000000 		.space	4
 128              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 129              		.align	2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 135              		.align	2
 138              	xIdleTaskHandle:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 141              		.align	2
 144              	uxSchedulerSuspended:
 145 0000 00000000 		.space	4
 146              		.section	.text.xTaskCreateStatic,"ax",%progbits
 147              		.align	1
 148              		.global	xTaskCreateStatic
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreateStatic:
 154              	.LFB5:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 588 2
 157              		.cfi_startproc
 158              		@ args = 12, pretend = 0, frame = 40
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8EB0     		sub	sp, sp, #56
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 64
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 48
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 14


 173 000a 7A60     		str	r2, [r7, #4]
 174 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 175              		.loc 1 592 3
 176 000e 7B6B     		ldr	r3, [r7, #52]
 177 0010 002B     		cmp	r3, #0
 178 0012 0AD1     		bne	.L2
 179              	.LBB110:
 180              	.LBB111:
 181              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 15


  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 16


 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 17


 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 182              		.loc 2 195 2
 183              		.syntax unified
 184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 185 0014 4FF05003 			mov r3, #80												
 186 0018 83F31188 		msr basepri, r3											
 187 001c BFF36F8F 		isb														
 188 0020 BFF34F8F 		dsb														
 189              	
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193 0024 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 18


 194              		.loc 2 203 1
 195 0026 00BF     		nop
 196              	.L3:
 197              	.LBE111:
 198              	.LBE110:
 199              		.loc 1 592 3 discriminator 1
 200 0028 FEE7     		b	.L3
 201              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 202              		.loc 1 593 3
 203 002a BB6B     		ldr	r3, [r7, #56]
 204 002c 002B     		cmp	r3, #0
 205 002e 0AD1     		bne	.L4
 206              	.LBB112:
 207              	.LBB113:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 208              		.loc 2 195 2
 209              		.syntax unified
 210              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 211 0030 4FF05003 			mov r3, #80												
 212 0034 83F31188 		msr basepri, r3											
 213 0038 BFF36F8F 		isb														
 214 003c BFF34F8F 		dsb														
 215              	
 216              	@ 0 "" 2
 217              		.thumb
 218              		.syntax unified
 219 0040 FB61     		str	r3, [r7, #28]
 220              		.loc 2 203 1
 221 0042 00BF     		nop
 222              	.L5:
 223              	.LBE113:
 224              	.LBE112:
 225              		.loc 1 593 3 discriminator 2
 226 0044 FEE7     		b	.L5
 227              	.L4:
 228              	.LBB114:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 229              		.loc 1 600 20
 230 0046 5423     		movs	r3, #84
 231 0048 3B61     		str	r3, [r7, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 232              		.loc 1 601 4
 233 004a 3B69     		ldr	r3, [r7, #16]
 234 004c 542B     		cmp	r3, #84
 235 004e 0AD0     		beq	.L6
 236              	.LBB115:
 237              	.LBB116:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 238              		.loc 2 195 2
 239              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 19


 240              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 241 0050 4FF05003 			mov r3, #80												
 242 0054 83F31188 		msr basepri, r3											
 243 0058 BFF36F8F 		isb														
 244 005c BFF34F8F 		dsb														
 245              	
 246              	@ 0 "" 2
 247              		.thumb
 248              		.syntax unified
 249 0060 BB61     		str	r3, [r7, #24]
 250              		.loc 2 203 1
 251 0062 00BF     		nop
 252              	.L7:
 253              	.LBE116:
 254              	.LBE115:
 255              		.loc 1 601 4 discriminator 3
 256 0064 FEE7     		b	.L7
 257              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 258              		.loc 1 602 4
 259 0066 3B69     		ldr	r3, [r7, #16]
 260              	.LBE114:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 261              		.loc 1 607 5
 262 0068 BB6B     		ldr	r3, [r7, #56]
 263 006a 002B     		cmp	r3, #0
 264 006c 1ED0     		beq	.L8
 265              		.loc 1 607 32 discriminator 1
 266 006e 7B6B     		ldr	r3, [r7, #52]
 267 0070 002B     		cmp	r3, #0
 268 0072 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 269              		.loc 1 611 13
 270 0074 BB6B     		ldr	r3, [r7, #56]
 271 0076 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 272              		.loc 1 612 22
 273 0078 7B6A     		ldr	r3, [r7, #36]
 274 007a 7A6B     		ldr	r2, [r7, #52]
 275 007c 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 276              		.loc 1 618 37
 277 007e 7B6A     		ldr	r3, [r7, #36]
 278 0080 0222     		movs	r2, #2
 279 0082 83F85120 		strb	r2, [r3, #81]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 20


 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 280              		.loc 1 622 4
 281 0086 0023     		movs	r3, #0
 282 0088 0393     		str	r3, [sp, #12]
 283 008a 7B6A     		ldr	r3, [r7, #36]
 284 008c 0293     		str	r3, [sp, #8]
 285 008e 07F11403 		add	r3, r7, #20
 286 0092 0193     		str	r3, [sp, #4]
 287 0094 3B6B     		ldr	r3, [r7, #48]
 288 0096 0093     		str	r3, [sp]
 289 0098 3B68     		ldr	r3, [r7]
 290 009a 7A68     		ldr	r2, [r7, #4]
 291 009c B968     		ldr	r1, [r7, #8]
 292 009e F868     		ldr	r0, [r7, #12]
 293 00a0 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 294              		.loc 1 623 4
 295 00a4 786A     		ldr	r0, [r7, #36]
 296 00a6 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 297 00aa 01E0     		b	.L9
 298              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 299              		.loc 1 627 12
 300 00ac 0023     		movs	r3, #0
 301 00ae 7B61     		str	r3, [r7, #20]
 302              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 303              		.loc 1 630 10
 304 00b0 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 631 2
 306 00b2 1846     		mov	r0, r3
 307 00b4 2837     		adds	r7, r7, #40
 308              	.LCFI3:
 309              		.cfi_def_cfa_offset 8
 310 00b6 BD46     		mov	sp, r7
 311              	.LCFI4:
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 00b8 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE5:
 318              		.section	.text.xTaskCreate,"ax",%progbits
 319              		.align	1
 320              		.global	xTaskCreate
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	xTaskCreate:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 21


 326              	.LFB6:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 22


 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 327              		.loc 1 739 2
 328              		.cfi_startproc
 329              		@ args = 8, pretend = 0, frame = 32
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 23


 332              	.LCFI5:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 8CB0     		sub	sp, sp, #48
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 56
 339 0004 04AF     		add	r7, sp, #16
 340              	.LCFI7:
 341              		.cfi_def_cfa 7, 40
 342 0006 F860     		str	r0, [r7, #12]
 343 0008 B960     		str	r1, [r7, #8]
 344 000a 3B60     		str	r3, [r7]
 345 000c 1346     		mov	r3, r2	@ movhi
 346 000e FB80     		strh	r3, [r7, #6]	@ movhi
 347              	.LBB117:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 348              		.loc 1 773 32
 349 0010 FB88     		ldrh	r3, [r7, #6]
 350              		.loc 1 773 14
 351 0012 9B00     		lsls	r3, r3, #2
 352 0014 1846     		mov	r0, r3
 353 0016 FFF7FEFF 		bl	pvPortMalloc
 354 001a 7861     		str	r0, [r7, #20]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 24


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 355              		.loc 1 775 6
 356 001c 7B69     		ldr	r3, [r7, #20]
 357 001e 002B     		cmp	r3, #0
 358 0020 0ED0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 359              		.loc 1 778 28
 360 0022 5420     		movs	r0, #84
 361 0024 FFF7FEFF 		bl	pvPortMalloc
 362 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 363              		.loc 1 780 7
 364 002a FB69     		ldr	r3, [r7, #28]
 365 002c 002B     		cmp	r3, #0
 366 002e 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 367              		.loc 1 783 24
 368 0030 FB69     		ldr	r3, [r7, #28]
 369 0032 7A69     		ldr	r2, [r7, #20]
 370 0034 1A63     		str	r2, [r3, #48]
 371 0036 05E0     		b	.L14
 372              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 373              		.loc 1 789 6
 374 0038 7869     		ldr	r0, [r7, #20]
 375 003a FFF7FEFF 		bl	vPortFree
 376 003e 01E0     		b	.L14
 377              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 378              		.loc 1 794 14
 379 0040 0023     		movs	r3, #0
 380 0042 FB61     		str	r3, [r7, #28]
 381              	.L14:
 382              	.LBE117:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 383              		.loc 1 799 5
 384 0044 FB69     		ldr	r3, [r7, #28]
 385 0046 002B     		cmp	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 25


 386 0048 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 387              		.loc 1 805 37
 388 004a FB69     		ldr	r3, [r7, #28]
 389 004c 0022     		movs	r2, #0
 390 004e 83F85120 		strb	r2, [r3, #81]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 391              		.loc 1 809 4
 392 0052 FA88     		ldrh	r2, [r7, #6]
 393 0054 0023     		movs	r3, #0
 394 0056 0393     		str	r3, [sp, #12]
 395 0058 FB69     		ldr	r3, [r7, #28]
 396 005a 0293     		str	r3, [sp, #8]
 397 005c FB6A     		ldr	r3, [r7, #44]
 398 005e 0193     		str	r3, [sp, #4]
 399 0060 BB6A     		ldr	r3, [r7, #40]
 400 0062 0093     		str	r3, [sp]
 401 0064 3B68     		ldr	r3, [r7]
 402 0066 B968     		ldr	r1, [r7, #8]
 403 0068 F868     		ldr	r0, [r7, #12]
 404 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 405              		.loc 1 810 4
 406 006e F869     		ldr	r0, [r7, #28]
 407 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 408              		.loc 1 811 12
 409 0074 0123     		movs	r3, #1
 410 0076 BB61     		str	r3, [r7, #24]
 411 0078 02E0     		b	.L16
 412              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 413              		.loc 1 815 12
 414 007a 4FF0FF33 		mov	r3, #-1
 415 007e BB61     		str	r3, [r7, #24]
 416              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 417              		.loc 1 818 10
 418 0080 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 419              		.loc 1 819 2
 420 0082 1846     		mov	r0, r3
 421 0084 2037     		adds	r7, r7, #32
 422              	.LCFI8:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 26


 423              		.cfi_def_cfa_offset 8
 424 0086 BD46     		mov	sp, r7
 425              	.LCFI9:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0088 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE6:
 432              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 438              	prvInitialiseNewTask:
 439              	.LFB7:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 440              		.loc 1 832 1
 441              		.cfi_startproc
 442              		@ args = 16, pretend = 0, frame = 32
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 0000 80B5     		push	{r7, lr}
 445              	.LCFI10:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 88B0     		sub	sp, sp, #32
 450              	.LCFI11:
 451              		.cfi_def_cfa_offset 40
 452 0004 00AF     		add	r7, sp, #0
 453              	.LCFI12:
 454              		.cfi_def_cfa_register 7
 455 0006 F860     		str	r0, [r7, #12]
 456 0008 B960     		str	r1, [r7, #8]
 457 000a 7A60     		str	r2, [r7, #4]
 458 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 27


 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 459              		.loc 1 864 29
 460 000e 3B6B     		ldr	r3, [r7, #48]
 461 0010 1A6B     		ldr	r2, [r3, #48]
 462              		.loc 1 864 38
 463 0012 7B68     		ldr	r3, [r7, #4]
 464 0014 03F18043 		add	r3, r3, #1073741824
 465 0018 013B     		subs	r3, r3, #1
 466 001a 9B00     		lsls	r3, r3, #2
 467              		.loc 1 864 16
 468 001c 1344     		add	r3, r3, r2
 469 001e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 470              		.loc 1 865 40
 471 0020 BB69     		ldr	r3, [r7, #24]
 472              		.loc 1 865 81
 473 0022 23F00703 		bic	r3, r3, #7
 474              		.loc 1 865 16
 475 0026 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 476              		.loc 1 868 3
 477 0028 BB69     		ldr	r3, [r7, #24]
 478 002a 03F00703 		and	r3, r3, #7
 479 002e 002B     		cmp	r3, #0
 480 0030 0AD0     		beq	.L19
 481              	.LBB118:
 482              	.LBB119:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 483              		.loc 2 195 2
 484              		.syntax unified
 485              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 486 0032 4FF05003 			mov r3, #80												
 487 0036 83F31188 		msr basepri, r3											
 488 003a BFF36F8F 		isb														
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 28


 489 003e BFF34F8F 		dsb														
 490              	
 491              	@ 0 "" 2
 492              		.thumb
 493              		.syntax unified
 494 0042 7B61     		str	r3, [r7, #20]
 495              		.loc 2 203 1
 496 0044 00BF     		nop
 497              	.L20:
 498              	.LBE119:
 499              	.LBE118:
 500              		.loc 1 868 3 discriminator 1
 501 0046 FEE7     		b	.L20
 502              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 503              		.loc 1 892 4
 504 0048 BB68     		ldr	r3, [r7, #8]
 505 004a 002B     		cmp	r3, #0
 506 004c 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 507              		.loc 1 894 10
 508 004e 0023     		movs	r3, #0
 509 0050 FB61     		str	r3, [r7, #28]
 510              		.loc 1 894 3
 511 0052 12E0     		b	.L22
 512              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 513              		.loc 1 896 38
 514 0054 BA68     		ldr	r2, [r7, #8]
 515 0056 FB69     		ldr	r3, [r7, #28]
 516 0058 1344     		add	r3, r3, r2
 517 005a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 29


 518              		.loc 1 896 30
 519 005c 3A6B     		ldr	r2, [r7, #48]
 520 005e FB69     		ldr	r3, [r7, #28]
 521 0060 1344     		add	r3, r3, r2
 522 0062 3433     		adds	r3, r3, #52
 523 0064 0A46     		mov	r2, r1
 524 0066 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 525              		.loc 1 901 14
 526 0068 BA68     		ldr	r2, [r7, #8]
 527 006a FB69     		ldr	r3, [r7, #28]
 528 006c 1344     		add	r3, r3, r2
 529 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 530              		.loc 1 901 6
 531 0070 002B     		cmp	r3, #0
 532 0072 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 533              		.loc 1 894 77 discriminator 2
 534 0074 FB69     		ldr	r3, [r7, #28]
 535 0076 0133     		adds	r3, r3, #1
 536 0078 FB61     		str	r3, [r7, #28]
 537              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 538              		.loc 1 894 3 discriminator 1
 539 007a FB69     		ldr	r3, [r7, #28]
 540 007c 0F2B     		cmp	r3, #15
 541 007e E9D9     		bls	.L25
 542 0080 00E0     		b	.L24
 543              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 544              		.loc 1 903 5
 545 0082 00BF     		nop
 546              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 547              		.loc 1 913 55
 548 0084 3B6B     		ldr	r3, [r7, #48]
 549 0086 0022     		movs	r2, #0
 550 0088 83F84320 		strb	r2, [r3, #67]
 551 008c 03E0     		b	.L26
 552              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 30


 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 553              		.loc 1 919 29
 554 008e 3B6B     		ldr	r3, [r7, #48]
 555 0090 0022     		movs	r2, #0
 556 0092 83F83420 		strb	r2, [r3, #52]
 557              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 558              		.loc 1 924 4
 559 0096 BB6A     		ldr	r3, [r7, #40]
 560 0098 062B     		cmp	r3, #6
 561 009a 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 562              		.loc 1 926 14
 563 009c 0623     		movs	r3, #6
 564 009e BB62     		str	r3, [r7, #40]
 565              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 566              		.loc 1 933 23
 567 00a0 3B6B     		ldr	r3, [r7, #48]
 568 00a2 BA6A     		ldr	r2, [r7, #40]
 569 00a4 DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 570              		.loc 1 936 28
 571 00a6 3B6B     		ldr	r3, [r7, #48]
 572 00a8 BA6A     		ldr	r2, [r7, #40]
 573 00aa 5A64     		str	r2, [r3, #68]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 574              		.loc 1 937 27
 575 00ac 3B6B     		ldr	r3, [r7, #48]
 576 00ae 0022     		movs	r2, #0
 577 00b0 9A64     		str	r2, [r3, #72]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 578              		.loc 1 941 2
 579 00b2 3B6B     		ldr	r3, [r7, #48]
 580 00b4 0433     		adds	r3, r3, #4
 581 00b6 1846     		mov	r0, r3
 582 00b8 FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 583              		.loc 1 942 2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 31


 584 00bc 3B6B     		ldr	r3, [r7, #48]
 585 00be 1833     		adds	r3, r3, #24
 586 00c0 1846     		mov	r0, r3
 587 00c2 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 588              		.loc 1 946 2
 589 00c6 3B6B     		ldr	r3, [r7, #48]
 590 00c8 3A6B     		ldr	r2, [r7, #48]
 591 00ca 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 592              		.loc 1 949 2
 593 00cc BB6A     		ldr	r3, [r7, #40]
 594 00ce C3F10702 		rsb	r2, r3, #7
 595 00d2 3B6B     		ldr	r3, [r7, #48]
 596 00d4 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 597              		.loc 1 950 2
 598 00d6 3B6B     		ldr	r3, [r7, #48]
 599 00d8 3A6B     		ldr	r2, [r7, #48]
 600 00da 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 32


 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 601              		.loc 1 992 29
 602 00dc 3B6B     		ldr	r3, [r7, #48]
 603 00de 0022     		movs	r2, #0
 604 00e0 DA64     		str	r2, [r3, #76]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 605              		.loc 1 993 27
 606 00e2 3B6B     		ldr	r3, [r7, #48]
 607 00e4 0022     		movs	r2, #0
 608 00e6 83F85020 		strb	r2, [r3, #80]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 33


1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 609              		.loc 1 1058 29
 610 00ea 3A68     		ldr	r2, [r7]
 611 00ec F968     		ldr	r1, [r7, #12]
 612 00ee B869     		ldr	r0, [r7, #24]
 613 00f0 FFF7FEFF 		bl	pxPortInitialiseStack
 614 00f4 0246     		mov	r2, r0
 615              		.loc 1 1058 27
 616 00f6 3B6B     		ldr	r3, [r7, #48]
 617 00f8 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 618              		.loc 1 1064 4
 619 00fa FB6A     		ldr	r3, [r7, #44]
 620 00fc 002B     		cmp	r3, #0
 621 00fe 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 622              		.loc 1 1068 18
 623 0100 FB6A     		ldr	r3, [r7, #44]
 624 0102 3A6B     		ldr	r2, [r7, #48]
 625 0104 1A60     		str	r2, [r3]
 626              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 34


1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 627              		.loc 1 1074 1
 628 0106 00BF     		nop
 629 0108 2037     		adds	r7, r7, #32
 630              	.LCFI13:
 631              		.cfi_def_cfa_offset 8
 632 010a BD46     		mov	sp, r7
 633              	.LCFI14:
 634              		.cfi_def_cfa_register 13
 635              		@ sp needed
 636 010c 80BD     		pop	{r7, pc}
 637              		.cfi_endproc
 638              	.LFE7:
 640              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 641              		.align	1
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 646              	prvAddNewTaskToReadyList:
 647              	.LFB8:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 648              		.loc 1 1078 1
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 8
 651              		@ frame_needed = 1, uses_anonymous_args = 0
 652 0000 80B5     		push	{r7, lr}
 653              	.LCFI15:
 654              		.cfi_def_cfa_offset 8
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657 0002 82B0     		sub	sp, sp, #8
 658              	.LCFI16:
 659              		.cfi_def_cfa_offset 16
 660 0004 00AF     		add	r7, sp, #0
 661              	.LCFI17:
 662              		.cfi_def_cfa_register 7
 663 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 664              		.loc 1 1081 2
 665 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 666              		.loc 1 1083 25
 667 000c 2A4B     		ldr	r3, .L36
 668 000e 1B68     		ldr	r3, [r3]
 669 0010 0133     		adds	r3, r3, #1
 670 0012 294A     		ldr	r2, .L36
 671 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 35


 672              		.loc 1 1084 20
 673 0016 294B     		ldr	r3, .L36+4
 674 0018 1B68     		ldr	r3, [r3]
 675              		.loc 1 1084 5
 676 001a 002B     		cmp	r3, #0
 677 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 678              		.loc 1 1088 17
 679 001e 274A     		ldr	r2, .L36+4
 680 0020 7B68     		ldr	r3, [r7, #4]
 681 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 682              		.loc 1 1090 31
 683 0024 244B     		ldr	r3, .L36
 684 0026 1B68     		ldr	r3, [r3]
 685              		.loc 1 1090 6
 686 0028 012B     		cmp	r3, #1
 687 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 688              		.loc 1 1095 5
 689 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 690 0030 0DE0     		b	.L33
 691              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 692              		.loc 1 1107 26
 693 0032 234B     		ldr	r3, .L36+8
 694 0034 1B68     		ldr	r3, [r3]
 695              		.loc 1 1107 6
 696 0036 002B     		cmp	r3, #0
 697 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 698              		.loc 1 1109 21
 699 003a 204B     		ldr	r3, .L36+4
 700 003c 1B68     		ldr	r3, [r3]
 701 003e DA6A     		ldr	r2, [r3, #44]
 702              		.loc 1 1109 45
 703 0040 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 36


 704 0042 DB6A     		ldr	r3, [r3, #44]
 705              		.loc 1 1109 7
 706 0044 9A42     		cmp	r2, r3
 707 0046 02D8     		bhi	.L33
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 708              		.loc 1 1111 19
 709 0048 1C4A     		ldr	r2, .L36+4
 710 004a 7B68     		ldr	r3, [r7, #4]
 711 004c 1360     		str	r3, [r2]
 712              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 713              		.loc 1 1124 15
 714 004e 1D4B     		ldr	r3, .L36+12
 715 0050 1B68     		ldr	r3, [r3]
 716 0052 0133     		adds	r3, r3, #1
 717 0054 1B4A     		ldr	r2, .L36+12
 718 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 719              		.loc 1 1134 3
 720 0058 7B68     		ldr	r3, [r7, #4]
 721 005a DB6A     		ldr	r3, [r3, #44]
 722 005c 0122     		movs	r2, #1
 723 005e 9A40     		lsls	r2, r2, r3
 724 0060 194B     		ldr	r3, .L36+16
 725 0062 1B68     		ldr	r3, [r3]
 726 0064 1343     		orrs	r3, r3, r2
 727 0066 184A     		ldr	r2, .L36+16
 728 0068 1360     		str	r3, [r2]
 729 006a 7B68     		ldr	r3, [r7, #4]
 730 006c DA6A     		ldr	r2, [r3, #44]
 731 006e 1346     		mov	r3, r2
 732 0070 9B00     		lsls	r3, r3, #2
 733 0072 1344     		add	r3, r3, r2
 734 0074 9B00     		lsls	r3, r3, #2
 735 0076 154A     		ldr	r2, .L36+20
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 37


 736 0078 1A44     		add	r2, r2, r3
 737 007a 7B68     		ldr	r3, [r7, #4]
 738 007c 0433     		adds	r3, r3, #4
 739 007e 1946     		mov	r1, r3
 740 0080 1046     		mov	r0, r2
 741 0082 FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 742              		.loc 1 1138 2
 743 0086 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 744              		.loc 1 1140 24
 745 008a 0D4B     		ldr	r3, .L36+8
 746 008c 1B68     		ldr	r3, [r3]
 747              		.loc 1 1140 4
 748 008e 002B     		cmp	r3, #0
 749 0090 0ED0     		beq	.L35
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 750              		.loc 1 1144 19
 751 0092 0A4B     		ldr	r3, .L36+4
 752 0094 1B68     		ldr	r3, [r3]
 753 0096 DA6A     		ldr	r2, [r3, #44]
 754              		.loc 1 1144 42
 755 0098 7B68     		ldr	r3, [r7, #4]
 756 009a DB6A     		ldr	r3, [r3, #44]
 757              		.loc 1 1144 5
 758 009c 9A42     		cmp	r2, r3
 759 009e 07D2     		bcs	.L35
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 760              		.loc 1 1146 4
 761 00a0 0B4B     		ldr	r3, .L36+24
 762 00a2 4FF08052 		mov	r2, #268435456
 763 00a6 1A60     		str	r2, [r3]
 764              		.syntax unified
 765              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 766 00a8 BFF34F8F 		dsb
 767              	@ 0 "" 2
 768              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 769 00ac BFF36F8F 		isb
 770              	@ 0 "" 2
 771              		.thumb
 772              		.syntax unified
 773              	.L35:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 38


1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 774              		.loc 1 1157 1
 775 00b0 00BF     		nop
 776 00b2 0837     		adds	r7, r7, #8
 777              	.LCFI18:
 778              		.cfi_def_cfa_offset 8
 779 00b4 BD46     		mov	sp, r7
 780              	.LCFI19:
 781              		.cfi_def_cfa_register 13
 782              		@ sp needed
 783 00b6 80BD     		pop	{r7, pc}
 784              	.L37:
 785              		.align	2
 786              	.L36:
 787 00b8 00000000 		.word	uxCurrentNumberOfTasks
 788 00bc 00000000 		.word	pxCurrentTCB
 789 00c0 00000000 		.word	xSchedulerRunning
 790 00c4 00000000 		.word	uxTaskNumber
 791 00c8 00000000 		.word	uxTopReadyPriority
 792 00cc 00000000 		.word	pxReadyTasksLists
 793 00d0 04ED00E0 		.word	-536810236
 794              		.cfi_endproc
 795              	.LFE8:
 797              		.section	.text.vTaskDelete,"ax",%progbits
 798              		.align	1
 799              		.global	vTaskDelete
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 804              	vTaskDelete:
 805              	.LFB9:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 806              		.loc 1 1163 2
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 16
 809              		@ frame_needed = 1, uses_anonymous_args = 0
 810 0000 80B5     		push	{r7, lr}
 811              	.LCFI20:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 7, -8
 814              		.cfi_offset 14, -4
 815 0002 84B0     		sub	sp, sp, #16
 816              	.LCFI21:
 817              		.cfi_def_cfa_offset 24
 818 0004 00AF     		add	r7, sp, #0
 819              	.LCFI22:
 820              		.cfi_def_cfa_register 7
 821 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 39


1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 822              		.loc 1 1166 3
 823 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 824              		.loc 1 1170 12
 825 000c 7B68     		ldr	r3, [r7, #4]
 826 000e 002B     		cmp	r3, #0
 827 0010 02D1     		bne	.L39
 828              		.loc 1 1170 12 is_stmt 0 discriminator 1
 829 0012 394B     		ldr	r3, .L49
 830 0014 1B68     		ldr	r3, [r3]
 831 0016 00E0     		b	.L40
 832              	.L39:
 833              		.loc 1 1170 12 discriminator 2
 834 0018 7B68     		ldr	r3, [r7, #4]
 835              	.L40:
 836              		.loc 1 1170 10 is_stmt 1 discriminator 4
 837 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 838              		.loc 1 1173 8 discriminator 4
 839 001c FB68     		ldr	r3, [r7, #12]
 840 001e 0433     		adds	r3, r3, #4
 841 0020 1846     		mov	r0, r3
 842 0022 FFF7FEFF 		bl	uxListRemove
 843 0026 0346     		mov	r3, r0
 844              		.loc 1 1173 6 discriminator 4
 845 0028 002B     		cmp	r3, #0
 846 002a 15D1     		bne	.L41
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 847              		.loc 1 1175 5
 848 002c FB68     		ldr	r3, [r7, #12]
 849 002e DA6A     		ldr	r2, [r3, #44]
 850 0030 3249     		ldr	r1, .L49+4
 851 0032 1346     		mov	r3, r2
 852 0034 9B00     		lsls	r3, r3, #2
 853 0036 1344     		add	r3, r3, r2
 854 0038 9B00     		lsls	r3, r3, #2
 855 003a 0B44     		add	r3, r3, r1
 856 003c 1B68     		ldr	r3, [r3]
 857 003e 002B     		cmp	r3, #0
 858 0040 0AD1     		bne	.L41
 859              		.loc 1 1175 5 is_stmt 0 discriminator 1
 860 0042 FB68     		ldr	r3, [r7, #12]
 861 0044 DB6A     		ldr	r3, [r3, #44]
 862 0046 0122     		movs	r2, #1
 863 0048 02FA03F3 		lsl	r3, r2, r3
 864 004c DA43     		mvns	r2, r3
 865 004e 2C4B     		ldr	r3, .L49+8
 866 0050 1B68     		ldr	r3, [r3]
 867 0052 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 40


 868 0054 2A4A     		ldr	r2, .L49+8
 869 0056 1360     		str	r3, [r2]
 870              	.L41:
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 871              		.loc 1 1183 8 is_stmt 1
 872 0058 FB68     		ldr	r3, [r7, #12]
 873 005a 9B6A     		ldr	r3, [r3, #40]
 874              		.loc 1 1183 6
 875 005c 002B     		cmp	r3, #0
 876 005e 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 877              		.loc 1 1185 14
 878 0060 FB68     		ldr	r3, [r7, #12]
 879 0062 1833     		adds	r3, r3, #24
 880 0064 1846     		mov	r0, r3
 881 0066 FFF7FEFF 		bl	uxListRemove
 882              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 883              		.loc 1 1196 16
 884 006a 264B     		ldr	r3, .L49+12
 885 006c 1B68     		ldr	r3, [r3]
 886 006e 0133     		adds	r3, r3, #1
 887 0070 244A     		ldr	r2, .L49+12
 888 0072 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 889              		.loc 1 1198 14
 890 0074 204B     		ldr	r3, .L49
 891 0076 1B68     		ldr	r3, [r3]
 892              		.loc 1 1198 6
 893 0078 FA68     		ldr	r2, [r7, #12]
 894 007a 9A42     		cmp	r2, r3
 895 007c 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 41


1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 896              		.loc 1 1205 5
 897 007e FB68     		ldr	r3, [r7, #12]
 898 0080 0433     		adds	r3, r3, #4
 899 0082 1946     		mov	r1, r3
 900 0084 2048     		ldr	r0, .L49+16
 901 0086 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 902              		.loc 1 1210 5
 903 008a 204B     		ldr	r3, .L49+20
 904 008c 1B68     		ldr	r3, [r3]
 905 008e 0133     		adds	r3, r3, #1
 906 0090 1E4A     		ldr	r2, .L49+20
 907 0092 1360     		str	r3, [r2]
 908 0094 09E0     		b	.L44
 909              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 910              		.loc 1 1225 5
 911 0096 1E4B     		ldr	r3, .L49+24
 912 0098 1B68     		ldr	r3, [r3]
 913 009a 013B     		subs	r3, r3, #1
 914 009c 1C4A     		ldr	r2, .L49+24
 915 009e 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 916              		.loc 1 1227 5
 917 00a0 F868     		ldr	r0, [r7, #12]
 918 00a2 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 919              		.loc 1 1231 5
 920 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 921              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 922              		.loc 1 1234 3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 42


 923 00aa FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 924              		.loc 1 1238 25
 925 00ae 194B     		ldr	r3, .L49+28
 926 00b0 1B68     		ldr	r3, [r3]
 927              		.loc 1 1238 5
 928 00b2 002B     		cmp	r3, #0
 929 00b4 1BD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 930              		.loc 1 1240 14
 931 00b6 104B     		ldr	r3, .L49
 932 00b8 1B68     		ldr	r3, [r3]
 933              		.loc 1 1240 6
 934 00ba FA68     		ldr	r2, [r7, #12]
 935 00bc 9A42     		cmp	r2, r3
 936 00be 16D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 937              		.loc 1 1242 5
 938 00c0 154B     		ldr	r3, .L49+32
 939 00c2 1B68     		ldr	r3, [r3]
 940 00c4 002B     		cmp	r3, #0
 941 00c6 0AD0     		beq	.L46
 942              	.LBB120:
 943              	.LBB121:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 944              		.loc 2 195 2
 945              		.syntax unified
 946              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 947 00c8 4FF05003 			mov r3, #80												
 948 00cc 83F31188 		msr basepri, r3											
 949 00d0 BFF36F8F 		isb														
 950 00d4 BFF34F8F 		dsb														
 951              	
 952              	@ 0 "" 2
 953              		.thumb
 954              		.syntax unified
 955 00d8 BB60     		str	r3, [r7, #8]
 956              		.loc 2 203 1
 957 00da 00BF     		nop
 958              	.L47:
 959              	.LBE121:
 960              	.LBE120:
 961              		.loc 1 1242 5 discriminator 1
 962 00dc FEE7     		b	.L47
 963              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 964              		.loc 1 1243 5
 965 00de 0F4B     		ldr	r3, .L49+36
 966 00e0 4FF08052 		mov	r2, #268435456
 967 00e4 1A60     		str	r2, [r3]
 968              		.syntax unified
 969              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 43


 970 00e6 BFF34F8F 		dsb
 971              	@ 0 "" 2
 972              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 973 00ea BFF36F8F 		isb
 974              	@ 0 "" 2
 975              		.thumb
 976              		.syntax unified
 977              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 978              		.loc 1 1250 2
 979 00ee 00BF     		nop
 980 00f0 1037     		adds	r7, r7, #16
 981              	.LCFI23:
 982              		.cfi_def_cfa_offset 8
 983 00f2 BD46     		mov	sp, r7
 984              	.LCFI24:
 985              		.cfi_def_cfa_register 13
 986              		@ sp needed
 987 00f4 80BD     		pop	{r7, pc}
 988              	.L50:
 989 00f6 00BF     		.align	2
 990              	.L49:
 991 00f8 00000000 		.word	pxCurrentTCB
 992 00fc 00000000 		.word	pxReadyTasksLists
 993 0100 00000000 		.word	uxTopReadyPriority
 994 0104 00000000 		.word	uxTaskNumber
 995 0108 00000000 		.word	xTasksWaitingTermination
 996 010c 00000000 		.word	uxDeletedTasksWaitingCleanUp
 997 0110 00000000 		.word	uxCurrentNumberOfTasks
 998 0114 00000000 		.word	xSchedulerRunning
 999 0118 00000000 		.word	uxSchedulerSuspended
 1000 011c 04ED00E0 		.word	-536810236
 1001              		.cfi_endproc
 1002              	.LFE9:
 1004              		.section	.text.vTaskDelay,"ax",%progbits
 1005              		.align	1
 1006              		.global	vTaskDelay
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1011              	vTaskDelay:
 1012              	.LFB10:
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 44


1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 45


1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1013              		.loc 1 1342 2
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 16
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017 0000 80B5     		push	{r7, lr}
 1018              	.LCFI25:
 1019              		.cfi_def_cfa_offset 8
 1020              		.cfi_offset 7, -8
 1021              		.cfi_offset 14, -4
 1022 0002 84B0     		sub	sp, sp, #16
 1023              	.LCFI26:
 1024              		.cfi_def_cfa_offset 24
 1025 0004 00AF     		add	r7, sp, #0
 1026              	.LCFI27:
 1027              		.cfi_def_cfa_register 7
 1028 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1029              		.loc 1 1343 13
 1030 0008 0023     		movs	r3, #0
 1031 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1032              		.loc 1 1346 5
 1033 000c 7B68     		ldr	r3, [r7, #4]
 1034 000e 002B     		cmp	r3, #0
 1035 0010 17D0     		beq	.L52
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1036              		.loc 1 1348 4
 1037 0012 134B     		ldr	r3, .L57
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 46


 1038 0014 1B68     		ldr	r3, [r3]
 1039 0016 002B     		cmp	r3, #0
 1040 0018 0AD0     		beq	.L53
 1041              	.LBB122:
 1042              	.LBB123:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1043              		.loc 2 195 2
 1044              		.syntax unified
 1045              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1046 001a 4FF05003 			mov r3, #80												
 1047 001e 83F31188 		msr basepri, r3											
 1048 0022 BFF36F8F 		isb														
 1049 0026 BFF34F8F 		dsb														
 1050              	
 1051              	@ 0 "" 2
 1052              		.thumb
 1053              		.syntax unified
 1054 002a BB60     		str	r3, [r7, #8]
 1055              		.loc 2 203 1
 1056 002c 00BF     		nop
 1057              	.L54:
 1058              	.LBE123:
 1059              	.LBE122:
 1060              		.loc 1 1348 4 discriminator 1
 1061 002e FEE7     		b	.L54
 1062              	.L53:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1063              		.loc 1 1349 4
 1064 0030 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1065              		.loc 1 1360 5
 1066 0034 0021     		movs	r1, #0
 1067 0036 7868     		ldr	r0, [r7, #4]
 1068 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1069              		.loc 1 1362 22
 1070 003c FFF7FEFF 		bl	xTaskResumeAll
 1071 0040 F860     		str	r0, [r7, #12]
 1072              	.L52:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 47


1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1073              		.loc 1 1371 5
 1074 0042 FB68     		ldr	r3, [r7, #12]
 1075 0044 002B     		cmp	r3, #0
 1076 0046 07D1     		bne	.L56
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1077              		.loc 1 1373 4
 1078 0048 064B     		ldr	r3, .L57+4
 1079 004a 4FF08052 		mov	r2, #268435456
 1080 004e 1A60     		str	r2, [r3]
 1081              		.syntax unified
 1082              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1083 0050 BFF34F8F 		dsb
 1084              	@ 0 "" 2
 1085              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1086 0054 BFF36F8F 		isb
 1087              	@ 0 "" 2
 1088              		.thumb
 1089              		.syntax unified
 1090              	.L56:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1091              		.loc 1 1379 2
 1092 0058 00BF     		nop
 1093 005a 1037     		adds	r7, r7, #16
 1094              	.LCFI28:
 1095              		.cfi_def_cfa_offset 8
 1096 005c BD46     		mov	sp, r7
 1097              	.LCFI29:
 1098              		.cfi_def_cfa_register 13
 1099              		@ sp needed
 1100 005e 80BD     		pop	{r7, pc}
 1101              	.L58:
 1102              		.align	2
 1103              	.L57:
 1104 0060 00000000 		.word	uxSchedulerSuspended
 1105 0064 04ED00E0 		.word	-536810236
 1106              		.cfi_endproc
 1107              	.LFE10:
 1109              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1110              		.align	1
 1111              		.global	uxTaskPriorityGet
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1116              	uxTaskPriorityGet:
 1117              	.LFB11:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 48


1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 49


1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1118              		.loc 1 1479 2
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 16
 1121              		@ frame_needed = 1, uses_anonymous_args = 0
 1122 0000 80B5     		push	{r7, lr}
 1123              	.LCFI30:
 1124              		.cfi_def_cfa_offset 8
 1125              		.cfi_offset 7, -8
 1126              		.cfi_offset 14, -4
 1127 0002 84B0     		sub	sp, sp, #16
 1128              	.LCFI31:
 1129              		.cfi_def_cfa_offset 24
 1130 0004 00AF     		add	r7, sp, #0
 1131              	.LCFI32:
 1132              		.cfi_def_cfa_register 7
 1133 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 50


1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1134              		.loc 1 1483 3
 1135 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1136              		.loc 1 1487 12
 1137 000c 7B68     		ldr	r3, [r7, #4]
 1138 000e 002B     		cmp	r3, #0
 1139 0010 02D1     		bne	.L60
 1140              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1141 0012 074B     		ldr	r3, .L63
 1142 0014 1B68     		ldr	r3, [r3]
 1143 0016 00E0     		b	.L61
 1144              	.L60:
 1145              		.loc 1 1487 12 discriminator 2
 1146 0018 7B68     		ldr	r3, [r7, #4]
 1147              	.L61:
 1148              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1149 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1150              		.loc 1 1488 13 discriminator 4
 1151 001c FB68     		ldr	r3, [r7, #12]
 1152 001e DB6A     		ldr	r3, [r3, #44]
 1153 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1154              		.loc 1 1490 3 discriminator 4
 1155 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1156              		.loc 1 1492 10 discriminator 4
 1157 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1158              		.loc 1 1493 2 discriminator 4
 1159 0028 1846     		mov	r0, r3
 1160 002a 1037     		adds	r7, r7, #16
 1161              	.LCFI33:
 1162              		.cfi_def_cfa_offset 8
 1163 002c BD46     		mov	sp, r7
 1164              	.LCFI34:
 1165              		.cfi_def_cfa_register 13
 1166              		@ sp needed
 1167 002e 80BD     		pop	{r7, pc}
 1168              	.L64:
 1169              		.align	2
 1170              	.L63:
 1171 0030 00000000 		.word	pxCurrentTCB
 1172              		.cfi_endproc
 1173              	.LFE11:
 1175              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1176              		.align	1
 1177              		.global	uxTaskPriorityGetFromISR
 1178              		.syntax unified
 1179              		.thumb
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 51


 1180              		.thumb_func
 1182              	uxTaskPriorityGetFromISR:
 1183              	.LFB12:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1184              		.loc 1 1501 2
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 32
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188 0000 80B5     		push	{r7, lr}
 1189              	.LCFI35:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 7, -8
 1192              		.cfi_offset 14, -4
 1193 0002 88B0     		sub	sp, sp, #32
 1194              	.LCFI36:
 1195              		.cfi_def_cfa_offset 40
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI37:
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1200              		.loc 1 1521 3
 1201 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1202              	.LBB124:
 1203              	.LBB125:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 52


 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1204              		.loc 2 211 2
 1205              		.syntax unified
 1206              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1207 000c EFF31182 			mrs r2, basepri											
 1208 0010 4FF05003 		mov r3, #80												
 1209 0014 83F31188 		msr basepri, r3											
 1210 0018 BFF36F8F 		isb														
 1211 001c BFF34F8F 		dsb														
 1212              	
 1213              	@ 0 "" 2
 1214              		.thumb
 1215              		.syntax unified
 1216 0020 3A61     		str	r2, [r7, #16]
 1217 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1218              		.loc 2 223 9
 1219 0024 3B69     		ldr	r3, [r7, #16]
 1220              	.LBE125:
 1221              	.LBE124:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1222              		.loc 1 1523 27
 1223 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1224              		.loc 1 1527 12
 1225 0028 7B68     		ldr	r3, [r7, #4]
 1226 002a 002B     		cmp	r3, #0
 1227 002c 02D1     		bne	.L67
 1228              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1229 002e 094B     		ldr	r3, .L70
 1230 0030 1B68     		ldr	r3, [r3]
 1231 0032 00E0     		b	.L68
 1232              	.L67:
 1233              		.loc 1 1527 12 discriminator 2
 1234 0034 7B68     		ldr	r3, [r7, #4]
 1235              	.L68:
 1236              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1237 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1238              		.loc 1 1528 13 discriminator 4
 1239 0038 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 53


 1240 003a DB6A     		ldr	r3, [r3, #44]
 1241 003c 7B61     		str	r3, [r7, #20]
 1242 003e FB69     		ldr	r3, [r7, #28]
 1243 0040 BB60     		str	r3, [r7, #8]
 1244              	.LBB126:
 1245              	.LBB127:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1246              		.loc 2 229 2 discriminator 4
 1247 0042 BB68     		ldr	r3, [r7, #8]
 1248              		.syntax unified
 1249              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1250 0044 83F31188 			msr basepri, r3	
 1251              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1252              		.loc 2 233 1 discriminator 4
 1253              		.thumb
 1254              		.syntax unified
 1255 0048 00BF     		nop
 1256              	.LBE127:
 1257              	.LBE126:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1258              		.loc 1 1532 10 discriminator 4
 1259 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1260              		.loc 1 1533 2 discriminator 4
 1261 004c 1846     		mov	r0, r3
 1262 004e 2037     		adds	r7, r7, #32
 1263              	.LCFI38:
 1264              		.cfi_def_cfa_offset 8
 1265 0050 BD46     		mov	sp, r7
 1266              	.LCFI39:
 1267              		.cfi_def_cfa_register 13
 1268              		@ sp needed
 1269 0052 80BD     		pop	{r7, pc}
 1270              	.L71:
 1271              		.align	2
 1272              	.L70:
 1273 0054 00000000 		.word	pxCurrentTCB
 1274              		.cfi_endproc
 1275              	.LFE12:
 1277              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1278              		.align	1
 1279              		.global	vTaskPrioritySet
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 54


 1284              	vTaskPrioritySet:
 1285              	.LFB13:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1286              		.loc 1 1541 2
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 32
 1289              		@ frame_needed = 1, uses_anonymous_args = 0
 1290 0000 80B5     		push	{r7, lr}
 1291              	.LCFI40:
 1292              		.cfi_def_cfa_offset 8
 1293              		.cfi_offset 7, -8
 1294              		.cfi_offset 14, -4
 1295 0002 88B0     		sub	sp, sp, #32
 1296              	.LCFI41:
 1297              		.cfi_def_cfa_offset 40
 1298 0004 00AF     		add	r7, sp, #0
 1299              	.LCFI42:
 1300              		.cfi_def_cfa_register 7
 1301 0006 7860     		str	r0, [r7, #4]
 1302 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1303              		.loc 1 1544 13
 1304 000a 0023     		movs	r3, #0
 1305 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1306              		.loc 1 1546 3
 1307 000e 3B68     		ldr	r3, [r7]
 1308 0010 062B     		cmp	r3, #6
 1309 0012 0AD9     		bls	.L73
 1310              	.LBB128:
 1311              	.LBB129:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1312              		.loc 2 195 2
 1313              		.syntax unified
 1314              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1315 0014 4FF05003 			mov r3, #80												
 1316 0018 83F31188 		msr basepri, r3											
 1317 001c BFF36F8F 		isb														
 1318 0020 BFF34F8F 		dsb														
 1319              	
 1320              	@ 0 "" 2
 1321              		.thumb
 1322              		.syntax unified
 1323 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1324              		.loc 2 203 1
 1325 0026 00BF     		nop
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 55


 1326              	.L74:
 1327              	.LBE129:
 1328              	.LBE128:
 1329              		.loc 1 1546 3 discriminator 1
 1330 0028 FEE7     		b	.L74
 1331              	.L73:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1332              		.loc 1 1549 5
 1333 002a 3B68     		ldr	r3, [r7]
 1334 002c 062B     		cmp	r3, #6
 1335 002e 01D9     		bls	.L75
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1336              		.loc 1 1551 18
 1337 0030 0623     		movs	r3, #6
 1338 0032 3B60     		str	r3, [r7]
 1339              	.L75:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1340              		.loc 1 1558 3
 1341 0034 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1342              		.loc 1 1562 12
 1343 0038 7B68     		ldr	r3, [r7, #4]
 1344 003a 002B     		cmp	r3, #0
 1345 003c 02D1     		bne	.L76
 1346              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1347 003e 414B     		ldr	r3, .L85
 1348 0040 1B68     		ldr	r3, [r3]
 1349 0042 00E0     		b	.L77
 1350              	.L76:
 1351              		.loc 1 1562 12 discriminator 2
 1352 0044 7B68     		ldr	r3, [r7, #4]
 1353              	.L77:
 1354              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1355 0046 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1356              		.loc 1 1568 27 discriminator 4
 1357 0048 BB69     		ldr	r3, [r7, #24]
 1358 004a 5B6C     		ldr	r3, [r3, #68]
 1359 004c 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 56


1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1360              		.loc 1 1576 6 discriminator 4
 1361 004e 7A69     		ldr	r2, [r7, #20]
 1362 0050 3B68     		ldr	r3, [r7]
 1363 0052 9A42     		cmp	r2, r3
 1364 0054 6FD0     		beq	.L78
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1365              		.loc 1 1580 7
 1366 0056 3A68     		ldr	r2, [r7]
 1367 0058 7B69     		ldr	r3, [r7, #20]
 1368 005a 9A42     		cmp	r2, r3
 1369 005c 0DD9     		bls	.L79
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1370              		.loc 1 1582 16
 1371 005e 394B     		ldr	r3, .L85
 1372 0060 1B68     		ldr	r3, [r3]
 1373              		.loc 1 1582 8
 1374 0062 BA69     		ldr	r2, [r7, #24]
 1375 0064 9A42     		cmp	r2, r3
 1376 0066 0FD0     		beq	.L80
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1377              		.loc 1 1587 40
 1378 0068 364B     		ldr	r3, .L85
 1379 006a 1B68     		ldr	r3, [r3]
 1380 006c DB6A     		ldr	r3, [r3, #44]
 1381              		.loc 1 1587 9
 1382 006e 3A68     		ldr	r2, [r7]
 1383 0070 9A42     		cmp	r2, r3
 1384 0072 09D3     		bcc	.L80
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1385              		.loc 1 1589 23
 1386 0074 0123     		movs	r3, #1
 1387 0076 FB61     		str	r3, [r7, #28]
 1388 0078 06E0     		b	.L80
 1389              	.L79:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 57


1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1390              		.loc 1 1603 20
 1391 007a 324B     		ldr	r3, .L85
 1392 007c 1B68     		ldr	r3, [r3]
 1393              		.loc 1 1603 12
 1394 007e BA69     		ldr	r2, [r7, #24]
 1395 0080 9A42     		cmp	r2, r3
 1396 0082 01D1     		bne	.L80
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1397              		.loc 1 1608 21
 1398 0084 0123     		movs	r3, #1
 1399 0086 FB61     		str	r3, [r7, #28]
 1400              	.L80:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1401              		.loc 1 1620 27
 1402 0088 BB69     		ldr	r3, [r7, #24]
 1403 008a DB6A     		ldr	r3, [r3, #44]
 1404 008c 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1405              		.loc 1 1626 15
 1406 008e BB69     		ldr	r3, [r7, #24]
 1407 0090 5A6C     		ldr	r2, [r3, #68]
 1408              		.loc 1 1626 40
 1409 0092 BB69     		ldr	r3, [r7, #24]
 1410 0094 DB6A     		ldr	r3, [r3, #44]
 1411              		.loc 1 1626 8
 1412 0096 9A42     		cmp	r2, r3
 1413 0098 02D1     		bne	.L81
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1414              		.loc 1 1628 25
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 58


 1415 009a BB69     		ldr	r3, [r7, #24]
 1416 009c 3A68     		ldr	r2, [r7]
 1417 009e DA62     		str	r2, [r3, #44]
 1418              	.L81:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1419              		.loc 1 1636 28
 1420 00a0 BB69     		ldr	r3, [r7, #24]
 1421 00a2 3A68     		ldr	r2, [r7]
 1422 00a4 5A64     		str	r2, [r3, #68]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1423              		.loc 1 1646 11
 1424 00a6 BB69     		ldr	r3, [r7, #24]
 1425 00a8 9B69     		ldr	r3, [r3, #24]
 1426              		.loc 1 1646 7
 1427 00aa 002B     		cmp	r3, #0
 1428 00ac 04DB     		blt	.L82
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1429              		.loc 1 1648 6
 1430 00ae 3B68     		ldr	r3, [r7]
 1431 00b0 C3F10702 		rsb	r2, r3, #7
 1432 00b4 BB69     		ldr	r3, [r7, #24]
 1433 00b6 9A61     		str	r2, [r3, #24]
 1434              	.L82:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1435              		.loc 1 1659 9
 1436 00b8 BB69     		ldr	r3, [r7, #24]
 1437 00ba 5969     		ldr	r1, [r3, #20]
 1438 00bc 3A69     		ldr	r2, [r7, #16]
 1439 00be 1346     		mov	r3, r2
 1440 00c0 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 59


 1441 00c2 1344     		add	r3, r3, r2
 1442 00c4 9B00     		lsls	r3, r3, #2
 1443 00c6 204A     		ldr	r2, .L85+4
 1444 00c8 1344     		add	r3, r3, r2
 1445              		.loc 1 1659 7
 1446 00ca 9942     		cmp	r1, r3
 1447 00cc 28D1     		bne	.L83
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1448              		.loc 1 1664 10
 1449 00ce BB69     		ldr	r3, [r7, #24]
 1450 00d0 0433     		adds	r3, r3, #4
 1451 00d2 1846     		mov	r0, r3
 1452 00d4 FFF7FEFF 		bl	uxListRemove
 1453 00d8 0346     		mov	r3, r0
 1454              		.loc 1 1664 8
 1455 00da 002B     		cmp	r3, #0
 1456 00dc 09D1     		bne	.L84
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1457              		.loc 1 1669 7
 1458 00de 0122     		movs	r2, #1
 1459 00e0 3B69     		ldr	r3, [r7, #16]
 1460 00e2 02FA03F3 		lsl	r3, r2, r3
 1461 00e6 DA43     		mvns	r2, r3
 1462 00e8 184B     		ldr	r3, .L85+8
 1463 00ea 1B68     		ldr	r3, [r3]
 1464 00ec 1340     		ands	r3, r3, r2
 1465 00ee 174A     		ldr	r2, .L85+8
 1466 00f0 1360     		str	r3, [r2]
 1467              	.L84:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1468              		.loc 1 1675 6
 1469 00f2 BB69     		ldr	r3, [r7, #24]
 1470 00f4 DB6A     		ldr	r3, [r3, #44]
 1471 00f6 0122     		movs	r2, #1
 1472 00f8 9A40     		lsls	r2, r2, r3
 1473 00fa 144B     		ldr	r3, .L85+8
 1474 00fc 1B68     		ldr	r3, [r3]
 1475 00fe 1343     		orrs	r3, r3, r2
 1476 0100 124A     		ldr	r2, .L85+8
 1477 0102 1360     		str	r3, [r2]
 1478 0104 BB69     		ldr	r3, [r7, #24]
 1479 0106 DA6A     		ldr	r2, [r3, #44]
 1480 0108 1346     		mov	r3, r2
 1481 010a 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 60


 1482 010c 1344     		add	r3, r3, r2
 1483 010e 9B00     		lsls	r3, r3, #2
 1484 0110 0D4A     		ldr	r2, .L85+4
 1485 0112 1A44     		add	r2, r2, r3
 1486 0114 BB69     		ldr	r3, [r7, #24]
 1487 0116 0433     		adds	r3, r3, #4
 1488 0118 1946     		mov	r1, r3
 1489 011a 1046     		mov	r0, r2
 1490 011c FFF7FEFF 		bl	vListInsertEnd
 1491              	.L83:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1492              		.loc 1 1682 7
 1493 0120 FB69     		ldr	r3, [r7, #28]
 1494 0122 002B     		cmp	r3, #0
 1495 0124 07D0     		beq	.L78
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1496              		.loc 1 1684 6
 1497 0126 0A4B     		ldr	r3, .L85+12
 1498 0128 4FF08052 		mov	r2, #268435456
 1499 012c 1A60     		str	r2, [r3]
 1500              		.syntax unified
 1501              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1502 012e BFF34F8F 		dsb
 1503              	@ 0 "" 2
 1504              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1505 0132 BFF36F8F 		isb
 1506              	@ 0 "" 2
 1507              		.thumb
 1508              		.syntax unified
 1509              	.L78:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1510              		.loc 1 1696 3
 1511 0136 FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1512              		.loc 1 1697 2
 1513 013a 00BF     		nop
 1514 013c 2037     		adds	r7, r7, #32
 1515              	.LCFI43:
 1516              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 61


 1517 013e BD46     		mov	sp, r7
 1518              	.LCFI44:
 1519              		.cfi_def_cfa_register 13
 1520              		@ sp needed
 1521 0140 80BD     		pop	{r7, pc}
 1522              	.L86:
 1523 0142 00BF     		.align	2
 1524              	.L85:
 1525 0144 00000000 		.word	pxCurrentTCB
 1526 0148 00000000 		.word	pxReadyTasksLists
 1527 014c 00000000 		.word	uxTopReadyPriority
 1528 0150 04ED00E0 		.word	-536810236
 1529              		.cfi_endproc
 1530              	.LFE13:
 1532              		.section	.text.vTaskSuspend,"ax",%progbits
 1533              		.align	1
 1534              		.global	vTaskSuspend
 1535              		.syntax unified
 1536              		.thumb
 1537              		.thumb_func
 1539              	vTaskSuspend:
 1540              	.LFB14:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1541              		.loc 1 1705 2
 1542              		.cfi_startproc
 1543              		@ args = 0, pretend = 0, frame = 16
 1544              		@ frame_needed = 1, uses_anonymous_args = 0
 1545 0000 80B5     		push	{r7, lr}
 1546              	.LCFI45:
 1547              		.cfi_def_cfa_offset 8
 1548              		.cfi_offset 7, -8
 1549              		.cfi_offset 14, -4
 1550 0002 84B0     		sub	sp, sp, #16
 1551              	.LCFI46:
 1552              		.cfi_def_cfa_offset 24
 1553 0004 00AF     		add	r7, sp, #0
 1554              	.LCFI47:
 1555              		.cfi_def_cfa_register 7
 1556 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1557              		.loc 1 1708 3
 1558 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1559              		.loc 1 1712 12
 1560 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 62


 1561 000e 002B     		cmp	r3, #0
 1562 0010 02D1     		bne	.L88
 1563              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1564 0012 3C4B     		ldr	r3, .L100
 1565 0014 1B68     		ldr	r3, [r3]
 1566 0016 00E0     		b	.L89
 1567              	.L88:
 1568              		.loc 1 1712 12 discriminator 2
 1569 0018 7B68     		ldr	r3, [r7, #4]
 1570              	.L89:
 1571              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1572 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1573              		.loc 1 1718 8 discriminator 4
 1574 001c FB68     		ldr	r3, [r7, #12]
 1575 001e 0433     		adds	r3, r3, #4
 1576 0020 1846     		mov	r0, r3
 1577 0022 FFF7FEFF 		bl	uxListRemove
 1578 0026 0346     		mov	r3, r0
 1579              		.loc 1 1718 6 discriminator 4
 1580 0028 002B     		cmp	r3, #0
 1581 002a 15D1     		bne	.L90
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1582              		.loc 1 1720 5
 1583 002c FB68     		ldr	r3, [r7, #12]
 1584 002e DA6A     		ldr	r2, [r3, #44]
 1585 0030 3549     		ldr	r1, .L100+4
 1586 0032 1346     		mov	r3, r2
 1587 0034 9B00     		lsls	r3, r3, #2
 1588 0036 1344     		add	r3, r3, r2
 1589 0038 9B00     		lsls	r3, r3, #2
 1590 003a 0B44     		add	r3, r3, r1
 1591 003c 1B68     		ldr	r3, [r3]
 1592 003e 002B     		cmp	r3, #0
 1593 0040 0AD1     		bne	.L90
 1594              		.loc 1 1720 5 is_stmt 0 discriminator 1
 1595 0042 FB68     		ldr	r3, [r7, #12]
 1596 0044 DB6A     		ldr	r3, [r3, #44]
 1597 0046 0122     		movs	r2, #1
 1598 0048 02FA03F3 		lsl	r3, r2, r3
 1599 004c DA43     		mvns	r2, r3
 1600 004e 2F4B     		ldr	r3, .L100+8
 1601 0050 1B68     		ldr	r3, [r3]
 1602 0052 1340     		ands	r3, r3, r2
 1603 0054 2D4A     		ldr	r2, .L100+8
 1604 0056 1360     		str	r3, [r2]
 1605              	.L90:
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 63


1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1606              		.loc 1 1728 8 is_stmt 1
 1607 0058 FB68     		ldr	r3, [r7, #12]
 1608 005a 9B6A     		ldr	r3, [r3, #40]
 1609              		.loc 1 1728 6
 1610 005c 002B     		cmp	r3, #0
 1611 005e 04D0     		beq	.L91
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1612              		.loc 1 1730 14
 1613 0060 FB68     		ldr	r3, [r7, #12]
 1614 0062 1833     		adds	r3, r3, #24
 1615 0064 1846     		mov	r0, r3
 1616 0066 FFF7FEFF 		bl	uxListRemove
 1617              	.L91:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1618              		.loc 1 1737 4
 1619 006a FB68     		ldr	r3, [r7, #12]
 1620 006c 0433     		adds	r3, r3, #4
 1621 006e 1946     		mov	r1, r3
 1622 0070 2748     		ldr	r0, .L100+12
 1623 0072 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1624              		.loc 1 1741 14
 1625 0076 FB68     		ldr	r3, [r7, #12]
 1626 0078 93F85030 		ldrb	r3, [r3, #80]
 1627 007c DBB2     		uxtb	r3, r3
 1628              		.loc 1 1741 7
 1629 007e 012B     		cmp	r3, #1
 1630 0080 03D1     		bne	.L92
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1631              		.loc 1 1745 27
 1632 0082 FB68     		ldr	r3, [r7, #12]
 1633 0084 0022     		movs	r2, #0
 1634 0086 83F85020 		strb	r2, [r3, #80]
 1635              	.L92:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1636              		.loc 1 1750 3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 64


 1637 008a FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1638              		.loc 1 1752 25
 1639 008e 214B     		ldr	r3, .L100+16
 1640 0090 1B68     		ldr	r3, [r3]
 1641              		.loc 1 1752 5
 1642 0092 002B     		cmp	r3, #0
 1643 0094 05D0     		beq	.L93
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1644              		.loc 1 1756 4
 1645 0096 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1646              		.loc 1 1758 5
 1647 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1648              		.loc 1 1760 4
 1649 009e FFF7FEFF 		bl	vPortExitCritical
 1650              	.L93:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1651              		.loc 1 1767 13
 1652 00a2 184B     		ldr	r3, .L100
 1653 00a4 1B68     		ldr	r3, [r3]
 1654              		.loc 1 1767 5
 1655 00a6 FA68     		ldr	r2, [r7, #12]
 1656 00a8 9A42     		cmp	r2, r3
 1657 00aa 27D1     		bne	.L99
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1658              		.loc 1 1769 26
 1659 00ac 194B     		ldr	r3, .L100+16
 1660 00ae 1B68     		ldr	r3, [r3]
 1661              		.loc 1 1769 6
 1662 00b0 002B     		cmp	r3, #0
 1663 00b2 17D0     		beq	.L95
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1664              		.loc 1 1772 5
 1665 00b4 184B     		ldr	r3, .L100+20
 1666 00b6 1B68     		ldr	r3, [r3]
 1667 00b8 002B     		cmp	r3, #0
 1668 00ba 0AD0     		beq	.L96
 1669              	.LBB130:
 1670              	.LBB131:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 65


 1671              		.loc 2 195 2
 1672              		.syntax unified
 1673              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1674 00bc 4FF05003 			mov r3, #80												
 1675 00c0 83F31188 		msr basepri, r3											
 1676 00c4 BFF36F8F 		isb														
 1677 00c8 BFF34F8F 		dsb														
 1678              	
 1679              	@ 0 "" 2
 1680              		.thumb
 1681              		.syntax unified
 1682 00cc BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1683              		.loc 2 203 1
 1684 00ce 00BF     		nop
 1685              	.L97:
 1686              	.LBE131:
 1687              	.LBE130:
 1688              		.loc 1 1772 5 discriminator 1
 1689 00d0 FEE7     		b	.L97
 1690              	.L96:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1691              		.loc 1 1773 5
 1692 00d2 124B     		ldr	r3, .L100+24
 1693 00d4 4FF08052 		mov	r2, #268435456
 1694 00d8 1A60     		str	r2, [r3]
 1695              		.syntax unified
 1696              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1697 00da BFF34F8F 		dsb
 1698              	@ 0 "" 2
 1699              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1700 00de BFF36F8F 		isb
 1701              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 66


1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1702              		.loc 1 1798 2
 1703              		.thumb
 1704              		.syntax unified
 1705 00e2 0BE0     		b	.L99
 1706              	.L95:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1707              		.loc 1 1780 9
 1708 00e4 0A4B     		ldr	r3, .L100+12
 1709 00e6 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1710              		.loc 1 1780 56
 1711 00e8 0D4B     		ldr	r3, .L100+28
 1712 00ea 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1713              		.loc 1 1780 7
 1714 00ec 9A42     		cmp	r2, r3
 1715 00ee 03D1     		bne	.L98
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1716              		.loc 1 1786 19
 1717 00f0 044B     		ldr	r3, .L100
 1718 00f2 0022     		movs	r2, #0
 1719 00f4 1A60     		str	r2, [r3]
 1720              		.loc 1 1798 2
 1721 00f6 01E0     		b	.L99
 1722              	.L98:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1723              		.loc 1 1790 6
 1724 00f8 FFF7FEFF 		bl	vTaskSwitchContext
 1725              	.L99:
 1726              		.loc 1 1798 2
 1727 00fc 00BF     		nop
 1728 00fe 1037     		adds	r7, r7, #16
 1729              	.LCFI48:
 1730              		.cfi_def_cfa_offset 8
 1731 0100 BD46     		mov	sp, r7
 1732              	.LCFI49:
 1733              		.cfi_def_cfa_register 13
 1734              		@ sp needed
 1735 0102 80BD     		pop	{r7, pc}
 1736              	.L101:
 1737              		.align	2
 1738              	.L100:
 1739 0104 00000000 		.word	pxCurrentTCB
 1740 0108 00000000 		.word	pxReadyTasksLists
 1741 010c 00000000 		.word	uxTopReadyPriority
 1742 0110 00000000 		.word	xSuspendedTaskList
 1743 0114 00000000 		.word	xSchedulerRunning
 1744 0118 00000000 		.word	uxSchedulerSuspended
 1745 011c 04ED00E0 		.word	-536810236
 1746 0120 00000000 		.word	uxCurrentNumberOfTasks
 1747              		.cfi_endproc
 1748              	.LFE14:
 1750              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1751              		.align	1
 1752              		.syntax unified
 1753              		.thumb
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 67


 1754              		.thumb_func
 1756              	prvTaskIsTaskSuspended:
 1757              	.LFB15:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1758              		.loc 1 1806 2
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 24
 1761              		@ frame_needed = 1, uses_anonymous_args = 0
 1762              		@ link register save eliminated.
 1763 0000 80B4     		push	{r7}
 1764              	.LCFI50:
 1765              		.cfi_def_cfa_offset 4
 1766              		.cfi_offset 7, -4
 1767 0002 87B0     		sub	sp, sp, #28
 1768              	.LCFI51:
 1769              		.cfi_def_cfa_offset 32
 1770 0004 00AF     		add	r7, sp, #0
 1771              	.LCFI52:
 1772              		.cfi_def_cfa_register 7
 1773 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1774              		.loc 1 1807 13
 1775 0008 0023     		movs	r3, #0
 1776 000a 7B61     		str	r3, [r7, #20]
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1777              		.loc 1 1808 22
 1778 000c 7B68     		ldr	r3, [r7, #4]
 1779 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1780              		.loc 1 1814 3
 1781 0010 7B68     		ldr	r3, [r7, #4]
 1782 0012 002B     		cmp	r3, #0
 1783 0014 0AD1     		bne	.L103
 1784              	.LBB132:
 1785              	.LBB133:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1786              		.loc 2 195 2
 1787              		.syntax unified
 1788              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1789 0016 4FF05003 			mov r3, #80												
 1790 001a 83F31188 		msr basepri, r3											
 1791 001e BFF36F8F 		isb														
 1792 0022 BFF34F8F 		dsb														
 1793              	
 1794              	@ 0 "" 2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 68


 1795              		.thumb
 1796              		.syntax unified
 1797 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1798              		.loc 2 203 1
 1799 0028 00BF     		nop
 1800              	.L104:
 1801              	.LBE133:
 1802              	.LBE132:
 1803              		.loc 1 1814 3 discriminator 1
 1804 002a FEE7     		b	.L104
 1805              	.L103:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1806              		.loc 1 1817 7
 1807 002c 3B69     		ldr	r3, [r7, #16]
 1808 002e 5B69     		ldr	r3, [r3, #20]
 1809              		.loc 1 1817 5
 1810 0030 0A4A     		ldr	r2, .L107
 1811 0032 9342     		cmp	r3, r2
 1812 0034 0AD1     		bne	.L105
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1813              		.loc 1 1820 8
 1814 0036 3B69     		ldr	r3, [r7, #16]
 1815 0038 9B6A     		ldr	r3, [r3, #40]
 1816              		.loc 1 1820 6
 1817 003a 094A     		ldr	r2, .L107+4
 1818 003c 9342     		cmp	r3, r2
 1819 003e 05D0     		beq	.L105
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1820              		.loc 1 1824 9
 1821 0040 3B69     		ldr	r3, [r7, #16]
 1822 0042 9B6A     		ldr	r3, [r3, #40]
 1823              		.loc 1 1824 7
 1824 0044 002B     		cmp	r3, #0
 1825 0046 01D1     		bne	.L105
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1826              		.loc 1 1826 14
 1827 0048 0123     		movs	r3, #1
 1828 004a 7B61     		str	r3, [r7, #20]
 1829              	.L105:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 69


1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1830              		.loc 1 1843 10
 1831 004c 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1832              		.loc 1 1844 2
 1833 004e 1846     		mov	r0, r3
 1834 0050 1C37     		adds	r7, r7, #28
 1835              	.LCFI53:
 1836              		.cfi_def_cfa_offset 4
 1837 0052 BD46     		mov	sp, r7
 1838              	.LCFI54:
 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 0054 5DF8047B 		ldr	r7, [sp], #4
 1842              	.LCFI55:
 1843              		.cfi_restore 7
 1844              		.cfi_def_cfa_offset 0
 1845 0058 7047     		bx	lr
 1846              	.L108:
 1847 005a 00BF     		.align	2
 1848              	.L107:
 1849 005c 00000000 		.word	xSuspendedTaskList
 1850 0060 00000000 		.word	xPendingReadyList
 1851              		.cfi_endproc
 1852              	.LFE15:
 1854              		.section	.text.vTaskResume,"ax",%progbits
 1855              		.align	1
 1856              		.global	vTaskResume
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1861              	vTaskResume:
 1862              	.LFB16:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1863              		.loc 1 1852 2
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 16
 1866              		@ frame_needed = 1, uses_anonymous_args = 0
 1867 0000 80B5     		push	{r7, lr}
 1868              	.LCFI56:
 1869              		.cfi_def_cfa_offset 8
 1870              		.cfi_offset 7, -8
 1871              		.cfi_offset 14, -4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 70


 1872 0002 84B0     		sub	sp, sp, #16
 1873              	.LCFI57:
 1874              		.cfi_def_cfa_offset 24
 1875 0004 00AF     		add	r7, sp, #0
 1876              	.LCFI58:
 1877              		.cfi_def_cfa_register 7
 1878 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1879              		.loc 1 1853 16
 1880 0008 7B68     		ldr	r3, [r7, #4]
 1881 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1882              		.loc 1 1856 3
 1883 000c 7B68     		ldr	r3, [r7, #4]
 1884 000e 002B     		cmp	r3, #0
 1885 0010 0AD1     		bne	.L110
 1886              	.LBB134:
 1887              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1888              		.loc 2 195 2
 1889              		.syntax unified
 1890              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1891 0012 4FF05003 			mov r3, #80												
 1892 0016 83F31188 		msr basepri, r3											
 1893 001a BFF36F8F 		isb														
 1894 001e BFF34F8F 		dsb														
 1895              	
 1896              	@ 0 "" 2
 1897              		.thumb
 1898              		.syntax unified
 1899 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1900              		.loc 2 203 1
 1901 0024 00BF     		nop
 1902              	.L111:
 1903              	.LBE135:
 1904              	.LBE134:
 1905              		.loc 1 1856 3 discriminator 1
 1906 0026 FEE7     		b	.L111
 1907              	.L110:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1908              		.loc 1 1860 15
 1909 0028 204B     		ldr	r3, .L115
 1910 002a 1B68     		ldr	r3, [r3]
 1911              		.loc 1 1860 5
 1912 002c FA68     		ldr	r2, [r7, #12]
 1913 002e 9A42     		cmp	r2, r3
 1914 0030 37D0     		beq	.L114
 1915              		.loc 1 1860 33 discriminator 1
 1916 0032 FB68     		ldr	r3, [r7, #12]
 1917 0034 002B     		cmp	r3, #0
 1918 0036 34D0     		beq	.L114
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 71


1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1919              		.loc 1 1862 4
 1920 0038 FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1921              		.loc 1 1864 9
 1922 003c F868     		ldr	r0, [r7, #12]
 1923 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1924 0042 0346     		mov	r3, r0
 1925              		.loc 1 1864 7
 1926 0044 002B     		cmp	r3, #0
 1927 0046 2AD0     		beq	.L113
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1928              		.loc 1 1870 15
 1929 0048 FB68     		ldr	r3, [r7, #12]
 1930 004a 0433     		adds	r3, r3, #4
 1931 004c 1846     		mov	r0, r3
 1932 004e FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1933              		.loc 1 1871 6
 1934 0052 FB68     		ldr	r3, [r7, #12]
 1935 0054 DB6A     		ldr	r3, [r3, #44]
 1936 0056 0122     		movs	r2, #1
 1937 0058 9A40     		lsls	r2, r2, r3
 1938 005a 154B     		ldr	r3, .L115+4
 1939 005c 1B68     		ldr	r3, [r3]
 1940 005e 1343     		orrs	r3, r3, r2
 1941 0060 134A     		ldr	r2, .L115+4
 1942 0062 1360     		str	r3, [r2]
 1943 0064 FB68     		ldr	r3, [r7, #12]
 1944 0066 DA6A     		ldr	r2, [r3, #44]
 1945 0068 1346     		mov	r3, r2
 1946 006a 9B00     		lsls	r3, r3, #2
 1947 006c 1344     		add	r3, r3, r2
 1948 006e 9B00     		lsls	r3, r3, #2
 1949 0070 104A     		ldr	r2, .L115+8
 1950 0072 1A44     		add	r2, r2, r3
 1951 0074 FB68     		ldr	r3, [r7, #12]
 1952 0076 0433     		adds	r3, r3, #4
 1953 0078 1946     		mov	r1, r3
 1954 007a 1046     		mov	r0, r2
 1955 007c FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1956              		.loc 1 1874 15
 1957 0080 FB68     		ldr	r3, [r7, #12]
 1958 0082 DA6A     		ldr	r2, [r3, #44]
 1959              		.loc 1 1874 43
 1960 0084 094B     		ldr	r3, .L115
 1961 0086 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 72


 1962 0088 DB6A     		ldr	r3, [r3, #44]
 1963              		.loc 1 1874 8
 1964 008a 9A42     		cmp	r2, r3
 1965 008c 07D3     		bcc	.L113
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1966              		.loc 1 1879 7
 1967 008e 0A4B     		ldr	r3, .L115+12
 1968 0090 4FF08052 		mov	r2, #268435456
 1969 0094 1A60     		str	r2, [r3]
 1970              		.syntax unified
 1971              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1972 0096 BFF34F8F 		dsb
 1973              	@ 0 "" 2
 1974              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1975 009a BFF36F8F 		isb
 1976              	@ 0 "" 2
 1977              		.thumb
 1978              		.syntax unified
 1979              	.L113:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1980              		.loc 1 1891 4
 1981 009e FFF7FEFF 		bl	vPortExitCritical
 1982              	.L114:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1983              		.loc 1 1897 2
 1984 00a2 00BF     		nop
 1985 00a4 1037     		adds	r7, r7, #16
 1986              	.LCFI59:
 1987              		.cfi_def_cfa_offset 8
 1988 00a6 BD46     		mov	sp, r7
 1989              	.LCFI60:
 1990              		.cfi_def_cfa_register 13
 1991              		@ sp needed
 1992 00a8 80BD     		pop	{r7, pc}
 1993              	.L116:
 1994 00aa 00BF     		.align	2
 1995              	.L115:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 73


 1996 00ac 00000000 		.word	pxCurrentTCB
 1997 00b0 00000000 		.word	uxTopReadyPriority
 1998 00b4 00000000 		.word	pxReadyTasksLists
 1999 00b8 04ED00E0 		.word	-536810236
 2000              		.cfi_endproc
 2001              	.LFE16:
 2003              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2004              		.align	1
 2005              		.global	xTaskResumeFromISR
 2006              		.syntax unified
 2007              		.thumb
 2008              		.thumb_func
 2010              	xTaskResumeFromISR:
 2011              	.LFB17:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2012              		.loc 1 1906 2
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 40
 2015              		@ frame_needed = 1, uses_anonymous_args = 0
 2016 0000 80B5     		push	{r7, lr}
 2017              	.LCFI61:
 2018              		.cfi_def_cfa_offset 8
 2019              		.cfi_offset 7, -8
 2020              		.cfi_offset 14, -4
 2021 0002 8AB0     		sub	sp, sp, #40
 2022              	.LCFI62:
 2023              		.cfi_def_cfa_offset 48
 2024 0004 00AF     		add	r7, sp, #0
 2025              	.LCFI63:
 2026              		.cfi_def_cfa_register 7
 2027 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2028              		.loc 1 1907 13
 2029 0008 0023     		movs	r3, #0
 2030 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2031              		.loc 1 1908 16
 2032 000c 7B68     		ldr	r3, [r7, #4]
 2033 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2034              		.loc 1 1911 3
 2035 0010 7B68     		ldr	r3, [r7, #4]
 2036 0012 002B     		cmp	r3, #0
 2037 0014 0AD1     		bne	.L118
 2038              	.LBB136:
 2039              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 74


 2040              		.loc 2 195 2
 2041              		.syntax unified
 2042              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2043 0016 4FF05003 			mov r3, #80												
 2044 001a 83F31188 		msr basepri, r3											
 2045 001e BFF36F8F 		isb														
 2046 0022 BFF34F8F 		dsb														
 2047              	
 2048              	@ 0 "" 2
 2049              		.thumb
 2050              		.syntax unified
 2051 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2052              		.loc 2 203 1
 2053 0028 00BF     		nop
 2054              	.L119:
 2055              	.LBE137:
 2056              	.LBE136:
 2057              		.loc 1 1911 3 discriminator 1
 2058 002a FEE7     		b	.L119
 2059              	.L118:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2060              		.loc 1 1929 3
 2061 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2062              	.LBB138:
 2063              	.LBB139:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2064              		.loc 2 211 2
 2065              		.syntax unified
 2066              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2067 0030 EFF31182 			mrs r2, basepri											
 2068 0034 4FF05003 		mov r3, #80												
 2069 0038 83F31188 		msr basepri, r3											
 2070 003c BFF36F8F 		isb														
 2071 0040 BFF34F8F 		dsb														
 2072              	
 2073              	@ 0 "" 2
 2074              		.thumb
 2075              		.syntax unified
 2076 0044 7A61     		str	r2, [r7, #20]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 75


 2077 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2078              		.loc 2 223 9
 2079 0048 7B69     		ldr	r3, [r7, #20]
 2080              	.LBE139:
 2081              	.LBE138:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2082              		.loc 1 1931 28
 2083 004a FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2084              		.loc 1 1933 8
 2085 004c 386A     		ldr	r0, [r7, #32]
 2086 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2087 0052 0346     		mov	r3, r0
 2088              		.loc 1 1933 6
 2089 0054 002B     		cmp	r3, #0
 2090 0056 2FD0     		beq	.L121
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2091              		.loc 1 1938 30
 2092 0058 1D4B     		ldr	r3, .L125
 2093 005a 1B68     		ldr	r3, [r3]
 2094              		.loc 1 1938 7
 2095 005c 002B     		cmp	r3, #0
 2096 005e 25D1     		bne	.L122
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2097              		.loc 1 1942 15
 2098 0060 3B6A     		ldr	r3, [r7, #32]
 2099 0062 DA6A     		ldr	r2, [r3, #44]
 2100              		.loc 1 1942 43
 2101 0064 1B4B     		ldr	r3, .L125+4
 2102 0066 1B68     		ldr	r3, [r3]
 2103 0068 DB6A     		ldr	r3, [r3, #44]
 2104              		.loc 1 1942 8
 2105 006a 9A42     		cmp	r2, r3
 2106 006c 01D3     		bcc	.L123
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2107              		.loc 1 1944 22
 2108 006e 0123     		movs	r3, #1
 2109 0070 7B62     		str	r3, [r7, #36]
 2110              	.L123:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 76


 2111              		.loc 1 1951 15
 2112 0072 3B6A     		ldr	r3, [r7, #32]
 2113 0074 0433     		adds	r3, r3, #4
 2114 0076 1846     		mov	r0, r3
 2115 0078 FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2116              		.loc 1 1952 6
 2117 007c 3B6A     		ldr	r3, [r7, #32]
 2118 007e DB6A     		ldr	r3, [r3, #44]
 2119 0080 0122     		movs	r2, #1
 2120 0082 9A40     		lsls	r2, r2, r3
 2121 0084 144B     		ldr	r3, .L125+8
 2122 0086 1B68     		ldr	r3, [r3]
 2123 0088 1343     		orrs	r3, r3, r2
 2124 008a 134A     		ldr	r2, .L125+8
 2125 008c 1360     		str	r3, [r2]
 2126 008e 3B6A     		ldr	r3, [r7, #32]
 2127 0090 DA6A     		ldr	r2, [r3, #44]
 2128 0092 1346     		mov	r3, r2
 2129 0094 9B00     		lsls	r3, r3, #2
 2130 0096 1344     		add	r3, r3, r2
 2131 0098 9B00     		lsls	r3, r3, #2
 2132 009a 104A     		ldr	r2, .L125+12
 2133 009c 1A44     		add	r2, r2, r3
 2134 009e 3B6A     		ldr	r3, [r7, #32]
 2135 00a0 0433     		adds	r3, r3, #4
 2136 00a2 1946     		mov	r1, r3
 2137 00a4 1046     		mov	r0, r2
 2138 00a6 FFF7FEFF 		bl	vListInsertEnd
 2139 00aa 05E0     		b	.L121
 2140              	.L122:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2141              		.loc 1 1959 6
 2142 00ac 3B6A     		ldr	r3, [r7, #32]
 2143 00ae 1833     		adds	r3, r3, #24
 2144 00b0 1946     		mov	r1, r3
 2145 00b2 0B48     		ldr	r0, .L125+16
 2146 00b4 FFF7FEFF 		bl	vListInsertEnd
 2147              	.L121:
 2148 00b8 FB69     		ldr	r3, [r7, #28]
 2149 00ba FB60     		str	r3, [r7, #12]
 2150              	.LBB140:
 2151              	.LBB141:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2152              		.loc 2 229 2
 2153 00bc FB68     		ldr	r3, [r7, #12]
 2154              		.syntax unified
 2155              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2156 00be 83F31188 			msr basepri, r3	
 2157              	@ 0 "" 2
 2158              		.loc 2 233 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 77


 2159              		.thumb
 2160              		.syntax unified
 2161 00c2 00BF     		nop
 2162              	.LBE141:
 2163              	.LBE140:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2164              		.loc 1 1969 10
 2165 00c4 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2166              		.loc 1 1970 2
 2167 00c6 1846     		mov	r0, r3
 2168 00c8 2837     		adds	r7, r7, #40
 2169              	.LCFI64:
 2170              		.cfi_def_cfa_offset 8
 2171 00ca BD46     		mov	sp, r7
 2172              	.LCFI65:
 2173              		.cfi_def_cfa_register 13
 2174              		@ sp needed
 2175 00cc 80BD     		pop	{r7, pc}
 2176              	.L126:
 2177 00ce 00BF     		.align	2
 2178              	.L125:
 2179 00d0 00000000 		.word	uxSchedulerSuspended
 2180 00d4 00000000 		.word	pxCurrentTCB
 2181 00d8 00000000 		.word	uxTopReadyPriority
 2182 00dc 00000000 		.word	pxReadyTasksLists
 2183 00e0 00000000 		.word	xPendingReadyList
 2184              		.cfi_endproc
 2185              	.LFE17:
 2187              		.section	.rodata
 2188              		.align	2
 2189              	.LC0:
 2190 0000 49444C45 		.ascii	"IDLE\000"
 2190      00
 2191              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2192              		.align	1
 2193              		.global	vTaskStartScheduler
 2194              		.syntax unified
 2195              		.thumb
 2196              		.thumb_func
 2198              	vTaskStartScheduler:
 2199              	.LFB18:
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 78


 2200              		.loc 1 1976 1
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 24
 2203              		@ frame_needed = 1, uses_anonymous_args = 0
 2204 0000 80B5     		push	{r7, lr}
 2205              	.LCFI66:
 2206              		.cfi_def_cfa_offset 8
 2207              		.cfi_offset 7, -8
 2208              		.cfi_offset 14, -4
 2209 0002 8AB0     		sub	sp, sp, #40
 2210              	.LCFI67:
 2211              		.cfi_def_cfa_offset 48
 2212 0004 04AF     		add	r7, sp, #16
 2213              	.LCFI68:
 2214              		.cfi_def_cfa 7, 32
 2215              	.LBB142:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2216              		.loc 1 1982 17
 2217 0006 0023     		movs	r3, #0
 2218 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2219              		.loc 1 1983 16
 2220 000a 0023     		movs	r3, #0
 2221 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2222              		.loc 1 1988 3
 2223 000e 3A46     		mov	r2, r7
 2224 0010 391D     		adds	r1, r7, #4
 2225 0012 07F10803 		add	r3, r7, #8
 2226 0016 1846     		mov	r0, r3
 2227 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2228              		.loc 1 1989 21
 2229 001c 3968     		ldr	r1, [r7]
 2230 001e 7B68     		ldr	r3, [r7, #4]
 2231 0020 BA68     		ldr	r2, [r7, #8]
 2232 0022 0292     		str	r2, [sp, #8]
 2233 0024 0193     		str	r3, [sp, #4]
 2234 0026 0023     		movs	r3, #0
 2235 0028 0093     		str	r3, [sp]
 2236 002a 0023     		movs	r3, #0
 2237 002c 0A46     		mov	r2, r1
 2238 002e 1E49     		ldr	r1, .L134
 2239 0030 1E48     		ldr	r0, .L134+4
 2240 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2241 0036 0346     		mov	r3, r0
 2242              		.loc 1 1989 19
 2243 0038 1D4A     		ldr	r2, .L134+8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 79


 2244 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2245              		.loc 1 1997 23
 2246 003c 1C4B     		ldr	r3, .L134+8
 2247 003e 1B68     		ldr	r3, [r3]
 2248              		.loc 1 1997 5
 2249 0040 002B     		cmp	r3, #0
 2250 0042 02D0     		beq	.L128
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2251              		.loc 1 1999 12
 2252 0044 0123     		movs	r3, #1
 2253 0046 7B61     		str	r3, [r7, #20]
 2254 0048 01E0     		b	.L129
 2255              	.L128:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2256              		.loc 1 2003 12
 2257 004a 0023     		movs	r3, #0
 2258 004c 7B61     		str	r3, [r7, #20]
 2259              	.L129:
 2260              	.LBE142:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 80


2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2261              		.loc 1 2031 4
 2262 004e 7B69     		ldr	r3, [r7, #20]
 2263 0050 012B     		cmp	r3, #1
 2264 0052 16D1     		bne	.L130
 2265              	.LBB143:
 2266              	.LBB144:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2267              		.loc 2 195 2
 2268              		.syntax unified
 2269              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2270 0054 4FF05003 			mov r3, #80												
 2271 0058 83F31188 		msr basepri, r3											
 2272 005c BFF36F8F 		isb														
 2273 0060 BFF34F8F 		dsb														
 2274              	
 2275              	@ 0 "" 2
 2276              		.thumb
 2277              		.syntax unified
 2278 0064 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2279              		.loc 2 203 1
 2280 0066 00BF     		nop
 2281              	.LBE144:
 2282              	.LBE143:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2283              		.loc 1 2059 24
 2284 0068 124B     		ldr	r3, .L134+12
 2285 006a 4FF0FF32 		mov	r2, #-1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 81


 2286 006e 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2287              		.loc 1 2060 21
 2288 0070 114B     		ldr	r3, .L134+16
 2289 0072 0122     		movs	r2, #1
 2290 0074 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2291              		.loc 1 2061 14
 2292 0076 114B     		ldr	r3, .L134+20
 2293 0078 0022     		movs	r2, #0
 2294 007a 1A60     		str	r2, [r3]
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2295              		.loc 1 2075 7
 2296 007c FFF7FEFF 		bl	xPortStartScheduler
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2297              		.loc 1 2096 1
 2298 0080 0EE0     		b	.L133
 2299              	.L130:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2300              		.loc 1 2090 3
 2301 0082 7B69     		ldr	r3, [r7, #20]
 2302 0084 B3F1FF3F 		cmp	r3, #-1
 2303 0088 0AD1     		bne	.L133
 2304              	.LBB145:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 82


 2305              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2306              		.loc 2 195 2
 2307              		.syntax unified
 2308              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2309 008a 4FF05003 			mov r3, #80												
 2310 008e 83F31188 		msr basepri, r3											
 2311 0092 BFF36F8F 		isb														
 2312 0096 BFF34F8F 		dsb														
 2313              	
 2314              	@ 0 "" 2
 2315              		.thumb
 2316              		.syntax unified
 2317 009a FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2318              		.loc 2 203 1
 2319 009c 00BF     		nop
 2320              	.L132:
 2321              	.LBE146:
 2322              	.LBE145:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2323              		.loc 1 2090 3 discriminator 2
 2324 009e FEE7     		b	.L132
 2325              	.L133:
 2326              		.loc 1 2096 1
 2327 00a0 00BF     		nop
 2328 00a2 1837     		adds	r7, r7, #24
 2329              	.LCFI69:
 2330              		.cfi_def_cfa_offset 8
 2331 00a4 BD46     		mov	sp, r7
 2332              	.LCFI70:
 2333              		.cfi_def_cfa_register 13
 2334              		@ sp needed
 2335 00a6 80BD     		pop	{r7, pc}
 2336              	.L135:
 2337              		.align	2
 2338              	.L134:
 2339 00a8 00000000 		.word	.LC0
 2340 00ac 00000000 		.word	prvIdleTask
 2341 00b0 00000000 		.word	xIdleTaskHandle
 2342 00b4 00000000 		.word	xNextTaskUnblockTime
 2343 00b8 00000000 		.word	xSchedulerRunning
 2344 00bc 00000000 		.word	xTickCount
 2345              		.cfi_endproc
 2346              	.LFE18:
 2348              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2349              		.align	1
 2350              		.global	vTaskEndScheduler
 2351              		.syntax unified
 2352              		.thumb
 2353              		.thumb_func
 2355              	vTaskEndScheduler:
 2356              	.LFB19:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 83


 2357              		.loc 1 2100 1
 2358              		.cfi_startproc
 2359              		@ args = 0, pretend = 0, frame = 8
 2360              		@ frame_needed = 1, uses_anonymous_args = 0
 2361 0000 80B5     		push	{r7, lr}
 2362              	.LCFI71:
 2363              		.cfi_def_cfa_offset 8
 2364              		.cfi_offset 7, -8
 2365              		.cfi_offset 14, -4
 2366 0002 82B0     		sub	sp, sp, #8
 2367              	.LCFI72:
 2368              		.cfi_def_cfa_offset 16
 2369 0004 00AF     		add	r7, sp, #0
 2370              	.LCFI73:
 2371              		.cfi_def_cfa_register 7
 2372              	.LBB147:
 2373              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2374              		.loc 2 195 2
 2375              		.syntax unified
 2376              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2377 0006 4FF05003 			mov r3, #80												
 2378 000a 83F31188 		msr basepri, r3											
 2379 000e BFF36F8F 		isb														
 2380 0012 BFF34F8F 		dsb														
 2381              	
 2382              	@ 0 "" 2
 2383              		.thumb
 2384              		.syntax unified
 2385 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2386              		.loc 2 203 1
 2387 0018 00BF     		nop
 2388              	.LBE148:
 2389              	.LBE147:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2390              		.loc 1 2105 20
 2391 001a 044B     		ldr	r3, .L137
 2392 001c 0022     		movs	r2, #0
 2393 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2394              		.loc 1 2106 2
 2395 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2396              		.loc 1 2107 1
 2397 0024 00BF     		nop
 2398 0026 0837     		adds	r7, r7, #8
 2399              	.LCFI74:
 2400              		.cfi_def_cfa_offset 8
 2401 0028 BD46     		mov	sp, r7
 2402              	.LCFI75:
 2403              		.cfi_def_cfa_register 13
 2404              		@ sp needed
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 84


 2405 002a 80BD     		pop	{r7, pc}
 2406              	.L138:
 2407              		.align	2
 2408              	.L137:
 2409 002c 00000000 		.word	xSchedulerRunning
 2410              		.cfi_endproc
 2411              	.LFE19:
 2413              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2414              		.align	1
 2415              		.global	vTaskSuspendAll
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2420              	vTaskSuspendAll:
 2421              	.LFB20:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2422              		.loc 1 2111 1
 2423              		.cfi_startproc
 2424              		@ args = 0, pretend = 0, frame = 0
 2425              		@ frame_needed = 1, uses_anonymous_args = 0
 2426              		@ link register save eliminated.
 2427 0000 80B4     		push	{r7}
 2428              	.LCFI76:
 2429              		.cfi_def_cfa_offset 4
 2430              		.cfi_offset 7, -4
 2431 0002 00AF     		add	r7, sp, #0
 2432              	.LCFI77:
 2433              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2434              		.loc 1 2123 2
 2435 0004 044B     		ldr	r3, .L140
 2436 0006 1B68     		ldr	r3, [r3]
 2437 0008 0133     		adds	r3, r3, #1
 2438 000a 034A     		ldr	r2, .L140
 2439 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2440              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2441              		.loc 1 2128 1
 2442 000e 00BF     		nop
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 85


 2443 0010 BD46     		mov	sp, r7
 2444              	.LCFI78:
 2445              		.cfi_def_cfa_register 13
 2446              		@ sp needed
 2447 0012 5DF8047B 		ldr	r7, [sp], #4
 2448              	.LCFI79:
 2449              		.cfi_restore 7
 2450              		.cfi_def_cfa_offset 0
 2451 0016 7047     		bx	lr
 2452              	.L141:
 2453              		.align	2
 2454              	.L140:
 2455 0018 00000000 		.word	uxSchedulerSuspended
 2456              		.cfi_endproc
 2457              	.LFE20:
 2459              		.section	.text.xTaskResumeAll,"ax",%progbits
 2460              		.align	1
 2461              		.global	xTaskResumeAll
 2462              		.syntax unified
 2463              		.thumb
 2464              		.thumb_func
 2466              	xTaskResumeAll:
 2467              	.LFB21:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 86


2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2468              		.loc 1 2195 1
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 16
 2471              		@ frame_needed = 1, uses_anonymous_args = 0
 2472 0000 80B5     		push	{r7, lr}
 2473              	.LCFI80:
 2474              		.cfi_def_cfa_offset 8
 2475              		.cfi_offset 7, -8
 2476              		.cfi_offset 14, -4
 2477 0002 84B0     		sub	sp, sp, #16
 2478              	.LCFI81:
 2479              		.cfi_def_cfa_offset 24
 2480 0004 00AF     		add	r7, sp, #0
 2481              	.LCFI82:
 2482              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2483              		.loc 1 2196 8
 2484 0006 0023     		movs	r3, #0
 2485 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2486              		.loc 1 2197 12
 2487 000a 0023     		movs	r3, #0
 2488 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 87


2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2489              		.loc 1 2201 2
 2490 000e 414B     		ldr	r3, .L153
 2491 0010 1B68     		ldr	r3, [r3]
 2492 0012 002B     		cmp	r3, #0
 2493 0014 0AD1     		bne	.L143
 2494              	.LBB149:
 2495              	.LBB150:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2496              		.loc 2 195 2
 2497              		.syntax unified
 2498              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2499 0016 4FF05003 			mov r3, #80												
 2500 001a 83F31188 		msr basepri, r3											
 2501 001e BFF36F8F 		isb														
 2502 0022 BFF34F8F 		dsb														
 2503              	
 2504              	@ 0 "" 2
 2505              		.thumb
 2506              		.syntax unified
 2507 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2508              		.loc 2 203 1
 2509 0028 00BF     		nop
 2510              	.L144:
 2511              	.LBE150:
 2512              	.LBE149:
 2513              		.loc 1 2201 2 discriminator 1
 2514 002a FEE7     		b	.L144
 2515              	.L143:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2516              		.loc 1 2208 2
 2517 002c FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2518              		.loc 1 2210 3
 2519 0030 384B     		ldr	r3, .L153
 2520 0032 1B68     		ldr	r3, [r3]
 2521 0034 013B     		subs	r3, r3, #1
 2522 0036 374A     		ldr	r2, .L153
 2523 0038 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2524              		.loc 1 2212 28
 2525 003a 364B     		ldr	r3, .L153
 2526 003c 1B68     		ldr	r3, [r3]
 2527              		.loc 1 2212 5
 2528 003e 002B     		cmp	r3, #0
 2529 0040 61D1     		bne	.L145
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 88


2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2530              		.loc 1 2214 31
 2531 0042 354B     		ldr	r3, .L153+4
 2532 0044 1B68     		ldr	r3, [r3]
 2533              		.loc 1 2214 6
 2534 0046 002B     		cmp	r3, #0
 2535 0048 5DD0     		beq	.L145
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2536              		.loc 1 2218 10
 2537 004a 2EE0     		b	.L146
 2538              	.L147:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2539              		.loc 1 2220 14
 2540 004c 334B     		ldr	r3, .L153+8
 2541 004e DB68     		ldr	r3, [r3, #12]
 2542              		.loc 1 2220 12
 2543 0050 DB68     		ldr	r3, [r3, #12]
 2544 0052 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2545              		.loc 1 2221 15
 2546 0054 FB68     		ldr	r3, [r7, #12]
 2547 0056 1833     		adds	r3, r3, #24
 2548 0058 1846     		mov	r0, r3
 2549 005a FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2550              		.loc 1 2222 15
 2551 005e FB68     		ldr	r3, [r7, #12]
 2552 0060 0433     		adds	r3, r3, #4
 2553 0062 1846     		mov	r0, r3
 2554 0064 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2555              		.loc 1 2223 6
 2556 0068 FB68     		ldr	r3, [r7, #12]
 2557 006a DB6A     		ldr	r3, [r3, #44]
 2558 006c 0122     		movs	r2, #1
 2559 006e 9A40     		lsls	r2, r2, r3
 2560 0070 2B4B     		ldr	r3, .L153+12
 2561 0072 1B68     		ldr	r3, [r3]
 2562 0074 1343     		orrs	r3, r3, r2
 2563 0076 2A4A     		ldr	r2, .L153+12
 2564 0078 1360     		str	r3, [r2]
 2565 007a FB68     		ldr	r3, [r7, #12]
 2566 007c DA6A     		ldr	r2, [r3, #44]
 2567 007e 1346     		mov	r3, r2
 2568 0080 9B00     		lsls	r3, r3, #2
 2569 0082 1344     		add	r3, r3, r2
 2570 0084 9B00     		lsls	r3, r3, #2
 2571 0086 274A     		ldr	r2, .L153+16
 2572 0088 1A44     		add	r2, r2, r3
 2573 008a FB68     		ldr	r3, [r7, #12]
 2574 008c 0433     		adds	r3, r3, #4
 2575 008e 1946     		mov	r1, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 89


 2576 0090 1046     		mov	r0, r2
 2577 0092 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2578              		.loc 1 2227 15
 2579 0096 FB68     		ldr	r3, [r7, #12]
 2580 0098 DA6A     		ldr	r2, [r3, #44]
 2581              		.loc 1 2227 43
 2582 009a 234B     		ldr	r3, .L153+20
 2583 009c 1B68     		ldr	r3, [r3]
 2584 009e DB6A     		ldr	r3, [r3, #44]
 2585              		.loc 1 2227 8
 2586 00a0 9A42     		cmp	r2, r3
 2587 00a2 02D3     		bcc	.L146
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2588              		.loc 1 2229 21
 2589 00a4 214B     		ldr	r3, .L153+24
 2590 00a6 0122     		movs	r2, #1
 2591 00a8 1A60     		str	r2, [r3]
 2592              	.L146:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2593              		.loc 1 2218 12
 2594 00aa 1C4B     		ldr	r3, .L153+8
 2595 00ac 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2596              		.loc 1 2218 10
 2597 00ae 002B     		cmp	r3, #0
 2598 00b0 CCD1     		bne	.L147
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2599              		.loc 1 2237 7
 2600 00b2 FB68     		ldr	r3, [r7, #12]
 2601 00b4 002B     		cmp	r3, #0
 2602 00b6 01D0     		beq	.L148
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2603              		.loc 1 2245 6
 2604 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2605              	.L148:
 2606              	.LBB151:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 90


2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2607              		.loc 1 2253 17
 2608 00bc 1C4B     		ldr	r3, .L153+28
 2609 00be 1B68     		ldr	r3, [r3]
 2610 00c0 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2611              		.loc 1 2255 8
 2612 00c2 7B68     		ldr	r3, [r7, #4]
 2613 00c4 002B     		cmp	r3, #0
 2614 00c6 10D0     		beq	.L149
 2615              	.L151:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2616              		.loc 1 2259 12
 2617 00c8 FFF7FEFF 		bl	xTaskIncrementTick
 2618 00cc 0346     		mov	r3, r0
 2619              		.loc 1 2259 10
 2620 00ce 002B     		cmp	r3, #0
 2621 00d0 02D0     		beq	.L150
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2622              		.loc 1 2261 23
 2623 00d2 164B     		ldr	r3, .L153+24
 2624 00d4 0122     		movs	r2, #1
 2625 00d6 1A60     		str	r2, [r3]
 2626              	.L150:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 2627              		.loc 1 2267 8
 2628 00d8 7B68     		ldr	r3, [r7, #4]
 2629 00da 013B     		subs	r3, r3, #1
 2630 00dc 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2631              		.loc 1 2268 7
 2632 00de 7B68     		ldr	r3, [r7, #4]
 2633 00e0 002B     		cmp	r3, #0
 2634 00e2 F1D1     		bne	.L151
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 2635              		.loc 1 2270 20
 2636 00e4 124B     		ldr	r3, .L153+28
 2637 00e6 0022     		movs	r2, #0
 2638 00e8 1A60     		str	r2, [r3]
 2639              	.L149:
 2640              	.LBE151:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 91


2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2641              		.loc 1 2278 23
 2642 00ea 104B     		ldr	r3, .L153+24
 2643 00ec 1B68     		ldr	r3, [r3]
 2644              		.loc 1 2278 7
 2645 00ee 002B     		cmp	r3, #0
 2646 00f0 09D0     		beq	.L145
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2647              		.loc 1 2282 23
 2648 00f2 0123     		movs	r3, #1
 2649 00f4 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2650              		.loc 1 2285 6
 2651 00f6 0F4B     		ldr	r3, .L153+32
 2652 00f8 4FF08052 		mov	r2, #268435456
 2653 00fc 1A60     		str	r2, [r3]
 2654              		.syntax unified
 2655              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2656 00fe BFF34F8F 		dsb
 2657              	@ 0 "" 2
 2658              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2659 0102 BFF36F8F 		isb
 2660              	@ 0 "" 2
 2661              		.thumb
 2662              		.syntax unified
 2663              	.L145:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2664              		.loc 1 2298 2
 2665 0106 FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2666              		.loc 1 2300 9
 2667 010a BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 92


2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2668              		.loc 1 2301 1
 2669 010c 1846     		mov	r0, r3
 2670 010e 1037     		adds	r7, r7, #16
 2671              	.LCFI83:
 2672              		.cfi_def_cfa_offset 8
 2673 0110 BD46     		mov	sp, r7
 2674              	.LCFI84:
 2675              		.cfi_def_cfa_register 13
 2676              		@ sp needed
 2677 0112 80BD     		pop	{r7, pc}
 2678              	.L154:
 2679              		.align	2
 2680              	.L153:
 2681 0114 00000000 		.word	uxSchedulerSuspended
 2682 0118 00000000 		.word	uxCurrentNumberOfTasks
 2683 011c 00000000 		.word	xPendingReadyList
 2684 0120 00000000 		.word	uxTopReadyPriority
 2685 0124 00000000 		.word	pxReadyTasksLists
 2686 0128 00000000 		.word	pxCurrentTCB
 2687 012c 00000000 		.word	xYieldPending
 2688 0130 00000000 		.word	xPendedTicks
 2689 0134 04ED00E0 		.word	-536810236
 2690              		.cfi_endproc
 2691              	.LFE21:
 2693              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2694              		.align	1
 2695              		.global	xTaskGetTickCount
 2696              		.syntax unified
 2697              		.thumb
 2698              		.thumb_func
 2700              	xTaskGetTickCount:
 2701              	.LFB22:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2702              		.loc 1 2305 1
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 8
 2705              		@ frame_needed = 1, uses_anonymous_args = 0
 2706              		@ link register save eliminated.
 2707 0000 80B4     		push	{r7}
 2708              	.LCFI85:
 2709              		.cfi_def_cfa_offset 4
 2710              		.cfi_offset 7, -4
 2711 0002 83B0     		sub	sp, sp, #12
 2712              	.LCFI86:
 2713              		.cfi_def_cfa_offset 16
 2714 0004 00AF     		add	r7, sp, #0
 2715              	.LCFI87:
 2716              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 93


2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2717              		.loc 1 2311 10
 2718 0006 054B     		ldr	r3, .L157
 2719 0008 1B68     		ldr	r3, [r3]
 2720 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2721              		.loc 1 2315 9
 2722 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2723              		.loc 1 2316 1
 2724 000e 1846     		mov	r0, r3
 2725 0010 0C37     		adds	r7, r7, #12
 2726              	.LCFI88:
 2727              		.cfi_def_cfa_offset 4
 2728 0012 BD46     		mov	sp, r7
 2729              	.LCFI89:
 2730              		.cfi_def_cfa_register 13
 2731              		@ sp needed
 2732 0014 5DF8047B 		ldr	r7, [sp], #4
 2733              	.LCFI90:
 2734              		.cfi_restore 7
 2735              		.cfi_def_cfa_offset 0
 2736 0018 7047     		bx	lr
 2737              	.L158:
 2738 001a 00BF     		.align	2
 2739              	.L157:
 2740 001c 00000000 		.word	xTickCount
 2741              		.cfi_endproc
 2742              	.LFE22:
 2744              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2745              		.align	1
 2746              		.global	xTaskGetTickCountFromISR
 2747              		.syntax unified
 2748              		.thumb
 2749              		.thumb_func
 2751              	xTaskGetTickCountFromISR:
 2752              	.LFB23:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2753              		.loc 1 2320 1
 2754              		.cfi_startproc
 2755              		@ args = 0, pretend = 0, frame = 8
 2756              		@ frame_needed = 1, uses_anonymous_args = 0
 2757 0000 80B5     		push	{r7, lr}
 2758              	.LCFI91:
 2759              		.cfi_def_cfa_offset 8
 2760              		.cfi_offset 7, -8
 2761              		.cfi_offset 14, -4
 2762 0002 82B0     		sub	sp, sp, #8
 2763              	.LCFI92:
 2764              		.cfi_def_cfa_offset 16
 2765 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 94


 2766              	.LCFI93:
 2767              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2768              		.loc 1 2338 2
 2769 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2770              		.loc 1 2340 25
 2771 000a 0023     		movs	r3, #0
 2772 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2773              		.loc 1 2342 11
 2774 000e 044B     		ldr	r3, .L161
 2775 0010 1B68     		ldr	r3, [r3]
 2776 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2777              		.loc 1 2346 9
 2778 0014 3B68     		ldr	r3, [r7]
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2779              		.loc 1 2347 1
 2780 0016 1846     		mov	r0, r3
 2781 0018 0837     		adds	r7, r7, #8
 2782              	.LCFI94:
 2783              		.cfi_def_cfa_offset 8
 2784 001a BD46     		mov	sp, r7
 2785              	.LCFI95:
 2786              		.cfi_def_cfa_register 13
 2787              		@ sp needed
 2788 001c 80BD     		pop	{r7, pc}
 2789              	.L162:
 2790 001e 00BF     		.align	2
 2791              	.L161:
 2792 0020 00000000 		.word	xTickCount
 2793              		.cfi_endproc
 2794              	.LFE23:
 2796              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 95


 2797              		.align	1
 2798              		.global	uxTaskGetNumberOfTasks
 2799              		.syntax unified
 2800              		.thumb
 2801              		.thumb_func
 2803              	uxTaskGetNumberOfTasks:
 2804              	.LFB24:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2805              		.loc 1 2351 1
 2806              		.cfi_startproc
 2807              		@ args = 0, pretend = 0, frame = 0
 2808              		@ frame_needed = 1, uses_anonymous_args = 0
 2809              		@ link register save eliminated.
 2810 0000 80B4     		push	{r7}
 2811              	.LCFI96:
 2812              		.cfi_def_cfa_offset 4
 2813              		.cfi_offset 7, -4
 2814 0002 00AF     		add	r7, sp, #0
 2815              	.LCFI97:
 2816              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2817              		.loc 1 2354 9
 2818 0004 034B     		ldr	r3, .L165
 2819 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2820              		.loc 1 2355 1
 2821 0008 1846     		mov	r0, r3
 2822 000a BD46     		mov	sp, r7
 2823              	.LCFI98:
 2824              		.cfi_def_cfa_register 13
 2825              		@ sp needed
 2826 000c 5DF8047B 		ldr	r7, [sp], #4
 2827              	.LCFI99:
 2828              		.cfi_restore 7
 2829              		.cfi_def_cfa_offset 0
 2830 0010 7047     		bx	lr
 2831              	.L166:
 2832 0012 00BF     		.align	2
 2833              	.L165:
 2834 0014 00000000 		.word	uxCurrentNumberOfTasks
 2835              		.cfi_endproc
 2836              	.LFE24:
 2838              		.section	.text.pcTaskGetName,"ax",%progbits
 2839              		.align	1
 2840              		.global	pcTaskGetName
 2841              		.syntax unified
 2842              		.thumb
 2843              		.thumb_func
 2845              	pcTaskGetName:
 2846              	.LFB25:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 96


2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2847              		.loc 1 2359 1
 2848              		.cfi_startproc
 2849              		@ args = 0, pretend = 0, frame = 16
 2850              		@ frame_needed = 1, uses_anonymous_args = 0
 2851              		@ link register save eliminated.
 2852 0000 80B4     		push	{r7}
 2853              	.LCFI100:
 2854              		.cfi_def_cfa_offset 4
 2855              		.cfi_offset 7, -4
 2856 0002 85B0     		sub	sp, sp, #20
 2857              	.LCFI101:
 2858              		.cfi_def_cfa_offset 24
 2859 0004 00AF     		add	r7, sp, #0
 2860              	.LCFI102:
 2861              		.cfi_def_cfa_register 7
 2862 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2863              		.loc 1 2364 10
 2864 0008 7B68     		ldr	r3, [r7, #4]
 2865 000a 002B     		cmp	r3, #0
 2866 000c 02D1     		bne	.L168
 2867              		.loc 1 2364 10 is_stmt 0 discriminator 1
 2868 000e 0D4B     		ldr	r3, .L173
 2869 0010 1B68     		ldr	r3, [r3]
 2870 0012 00E0     		b	.L169
 2871              	.L168:
 2872              		.loc 1 2364 10 discriminator 2
 2873 0014 7B68     		ldr	r3, [r7, #4]
 2874              	.L169:
 2875              		.loc 1 2364 8 is_stmt 1 discriminator 4
 2876 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2877              		.loc 1 2365 2 discriminator 4
 2878 0018 FB68     		ldr	r3, [r7, #12]
 2879 001a 002B     		cmp	r3, #0
 2880 001c 0AD1     		bne	.L170
 2881              	.LBB152:
 2882              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2883              		.loc 2 195 2
 2884              		.syntax unified
 2885              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2886 001e 4FF05003 			mov r3, #80												
 2887 0022 83F31188 		msr basepri, r3											
 2888 0026 BFF36F8F 		isb														
 2889 002a BFF34F8F 		dsb														
 2890              	
 2891              	@ 0 "" 2
 2892              		.thumb
 2893              		.syntax unified
 2894 002e BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 97


 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2895              		.loc 2 203 1
 2896 0030 00BF     		nop
 2897              	.L171:
 2898              	.LBE153:
 2899              	.LBE152:
 2900              		.loc 1 2365 2 discriminator 1
 2901 0032 FEE7     		b	.L171
 2902              	.L170:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2903              		.loc 1 2366 9
 2904 0034 FB68     		ldr	r3, [r7, #12]
 2905 0036 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2906              		.loc 1 2367 1
 2907 0038 1846     		mov	r0, r3
 2908 003a 1437     		adds	r7, r7, #20
 2909              	.LCFI103:
 2910              		.cfi_def_cfa_offset 4
 2911 003c BD46     		mov	sp, r7
 2912              	.LCFI104:
 2913              		.cfi_def_cfa_register 13
 2914              		@ sp needed
 2915 003e 5DF8047B 		ldr	r7, [sp], #4
 2916              	.LCFI105:
 2917              		.cfi_restore 7
 2918              		.cfi_def_cfa_offset 0
 2919 0042 7047     		bx	lr
 2920              	.L174:
 2921              		.align	2
 2922              	.L173:
 2923 0044 00000000 		.word	pxCurrentTCB
 2924              		.cfi_endproc
 2925              	.LFE25:
 2927              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2928              		.align	1
 2929              		.global	xTaskCatchUpTicks
 2930              		.syntax unified
 2931              		.thumb
 2932              		.thumb_func
 2934              	xTaskCatchUpTicks:
 2935              	.LFB26:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 98


2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 99


2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 100


2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 101


2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 102


 2936              		.loc 1 2610 1
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 16
 2939              		@ frame_needed = 1, uses_anonymous_args = 0
 2940 0000 80B5     		push	{r7, lr}
 2941              	.LCFI106:
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 84B0     		sub	sp, sp, #16
 2946              	.LCFI107:
 2947              		.cfi_def_cfa_offset 24
 2948 0004 00AF     		add	r7, sp, #0
 2949              	.LCFI108:
 2950              		.cfi_def_cfa_register 7
 2951 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2952              		.loc 1 2611 12
 2953 0008 0023     		movs	r3, #0
 2954 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 2955              		.loc 1 2615 2
 2956 000c 0F4B     		ldr	r3, .L179
 2957 000e 1B68     		ldr	r3, [r3]
 2958 0010 002B     		cmp	r3, #0
 2959 0012 0AD0     		beq	.L176
 2960              	.LBB154:
 2961              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2962              		.loc 2 195 2
 2963              		.syntax unified
 2964              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2965 0014 4FF05003 			mov r3, #80												
 2966 0018 83F31188 		msr basepri, r3											
 2967 001c BFF36F8F 		isb														
 2968 0020 BFF34F8F 		dsb														
 2969              	
 2970              	@ 0 "" 2
 2971              		.thumb
 2972              		.syntax unified
 2973 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2974              		.loc 2 203 1
 2975 0026 00BF     		nop
 2976              	.L177:
 2977              	.LBE155:
 2978              	.LBE154:
 2979              		.loc 1 2615 2 discriminator 1
 2980 0028 FEE7     		b	.L177
 2981              	.L176:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 103


 2982              		.loc 1 2619 2
 2983 002a FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2984              		.loc 1 2620 15
 2985 002e 084B     		ldr	r3, .L179+4
 2986 0030 1A68     		ldr	r2, [r3]
 2987 0032 7B68     		ldr	r3, [r7, #4]
 2988 0034 1344     		add	r3, r3, r2
 2989 0036 064A     		ldr	r2, .L179+4
 2990 0038 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2991              		.loc 1 2621 19
 2992 003a FFF7FEFF 		bl	xTaskResumeAll
 2993 003e F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 2994              		.loc 1 2623 9
 2995 0040 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2996              		.loc 1 2624 1
 2997 0042 1846     		mov	r0, r3
 2998 0044 1037     		adds	r7, r7, #16
 2999              	.LCFI109:
 3000              		.cfi_def_cfa_offset 8
 3001 0046 BD46     		mov	sp, r7
 3002              	.LCFI110:
 3003              		.cfi_def_cfa_register 13
 3004              		@ sp needed
 3005 0048 80BD     		pop	{r7, pc}
 3006              	.L180:
 3007 004a 00BF     		.align	2
 3008              	.L179:
 3009 004c 00000000 		.word	uxSchedulerSuspended
 3010 0050 00000000 		.word	xPendedTicks
 3011              		.cfi_endproc
 3012              	.LFE26:
 3014              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3015              		.align	1
 3016              		.global	xTaskIncrementTick
 3017              		.syntax unified
 3018              		.thumb
 3019              		.thumb_func
 3021              	xTaskIncrementTick:
 3022              	.LFB27:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 104


2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 105


2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3023              		.loc 1 2708 1
 3024              		.cfi_startproc
 3025              		@ args = 0, pretend = 0, frame = 24
 3026              		@ frame_needed = 1, uses_anonymous_args = 0
 3027 0000 80B5     		push	{r7, lr}
 3028              	.LCFI111:
 3029              		.cfi_def_cfa_offset 8
 3030              		.cfi_offset 7, -8
 3031              		.cfi_offset 14, -4
 3032 0002 86B0     		sub	sp, sp, #24
 3033              	.LCFI112:
 3034              		.cfi_def_cfa_offset 32
 3035 0004 00AF     		add	r7, sp, #0
 3036              	.LCFI113:
 3037              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3038              		.loc 1 2711 12
 3039 0006 0023     		movs	r3, #0
 3040 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3041              		.loc 1 2717 27
 3042 000a 4E4B     		ldr	r3, .L195
 3043 000c 1B68     		ldr	r3, [r3]
 3044              		.loc 1 2717 4
 3045 000e 002B     		cmp	r3, #0
 3046 0010 40F08E80 		bne	.L182
 3047              	.LBB156:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3048              		.loc 1 2721 49
 3049 0014 4C4B     		ldr	r3, .L195+4
 3050 0016 1B68     		ldr	r3, [r3]
 3051              		.loc 1 2721 20
 3052 0018 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 106


 3053 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3054              		.loc 1 2725 14
 3055 001c 4A4A     		ldr	r2, .L195+4
 3056 001e 3B69     		ldr	r3, [r7, #16]
 3057 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3058              		.loc 1 2727 5
 3059 0022 3B69     		ldr	r3, [r7, #16]
 3060 0024 002B     		cmp	r3, #0
 3061 0026 20D1     		bne	.L183
 3062              	.LBB157:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3063              		.loc 1 2729 4
 3064 0028 484B     		ldr	r3, .L195+8
 3065 002a 1B68     		ldr	r3, [r3]
 3066 002c 1B68     		ldr	r3, [r3]
 3067 002e 002B     		cmp	r3, #0
 3068 0030 0AD0     		beq	.L184
 3069              	.LBB158:
 3070              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3071              		.loc 2 195 2
 3072              		.syntax unified
 3073              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3074 0032 4FF05003 			mov r3, #80												
 3075 0036 83F31188 		msr basepri, r3											
 3076 003a BFF36F8F 		isb														
 3077 003e BFF34F8F 		dsb														
 3078              	
 3079              	@ 0 "" 2
 3080              		.thumb
 3081              		.syntax unified
 3082 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3083              		.loc 2 203 1
 3084 0044 00BF     		nop
 3085              	.L185:
 3086              	.LBE159:
 3087              	.LBE158:
 3088              		.loc 1 2729 4 discriminator 1
 3089 0046 FEE7     		b	.L185
 3090              	.L184:
 3091              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3092 0048 404B     		ldr	r3, .L195+8
 3093 004a 1B68     		ldr	r3, [r3]
 3094 004c FB60     		str	r3, [r7, #12]
 3095 004e 404B     		ldr	r3, .L195+12
 3096 0050 1B68     		ldr	r3, [r3]
 3097 0052 3E4A     		ldr	r2, .L195+8
 3098 0054 1360     		str	r3, [r2]
 3099 0056 3E4A     		ldr	r2, .L195+12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 107


 3100 0058 FB68     		ldr	r3, [r7, #12]
 3101 005a 1360     		str	r3, [r2]
 3102 005c 3D4B     		ldr	r3, .L195+16
 3103 005e 1B68     		ldr	r3, [r3]
 3104 0060 0133     		adds	r3, r3, #1
 3105 0062 3C4A     		ldr	r2, .L195+16
 3106 0064 1360     		str	r3, [r2]
 3107 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3108              	.L183:
 3109              	.LBE157:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3110              		.loc 1 2740 23 is_stmt 1
 3111 006a 3B4B     		ldr	r3, .L195+20
 3112 006c 1B68     		ldr	r3, [r3]
 3113              		.loc 1 2740 5
 3114 006e 3A69     		ldr	r2, [r7, #16]
 3115 0070 9A42     		cmp	r2, r3
 3116 0072 48D3     		bcc	.L186
 3117              	.L191:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3118              		.loc 1 2744 9
 3119 0074 354B     		ldr	r3, .L195+8
 3120 0076 1B68     		ldr	r3, [r3]
 3121 0078 1B68     		ldr	r3, [r3]
 3122              		.loc 1 2744 7
 3123 007a 002B     		cmp	r3, #0
 3124 007c 04D1     		bne	.L187
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3125              		.loc 1 2751 27
 3126 007e 364B     		ldr	r3, .L195+20
 3127 0080 4FF0FF32 		mov	r2, #-1
 3128 0084 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3129              		.loc 1 2752 6
 3130 0086 3EE0     		b	.L186
 3131              	.L187:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 108


2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3132              		.loc 1 2760 14
 3133 0088 304B     		ldr	r3, .L195+8
 3134 008a 1B68     		ldr	r3, [r3]
 3135 008c DB68     		ldr	r3, [r3, #12]
 3136              		.loc 1 2760 12
 3137 008e DB68     		ldr	r3, [r3, #12]
 3138 0090 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3139              		.loc 1 2761 17
 3140 0092 BB68     		ldr	r3, [r7, #8]
 3141 0094 5B68     		ldr	r3, [r3, #4]
 3142 0096 7B60     		str	r3, [r7, #4]
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3143              		.loc 1 2763 8
 3144 0098 3A69     		ldr	r2, [r7, #16]
 3145 009a 7B68     		ldr	r3, [r7, #4]
 3146 009c 9A42     		cmp	r2, r3
 3147 009e 03D2     		bcs	.L188
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3148              		.loc 1 2770 28
 3149 00a0 2D4A     		ldr	r2, .L195+20
 3150 00a2 7B68     		ldr	r3, [r7, #4]
 3151 00a4 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3152              		.loc 1 2771 7
 3153 00a6 2EE0     		b	.L186
 3154              	.L188:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3155              		.loc 1 2779 15
 3156 00a8 BB68     		ldr	r3, [r7, #8]
 3157 00aa 0433     		adds	r3, r3, #4
 3158 00ac 1846     		mov	r0, r3
 3159 00ae FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 109


 3160              		.loc 1 2783 10
 3161 00b2 BB68     		ldr	r3, [r7, #8]
 3162 00b4 9B6A     		ldr	r3, [r3, #40]
 3163              		.loc 1 2783 8
 3164 00b6 002B     		cmp	r3, #0
 3165 00b8 04D0     		beq	.L189
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3166              		.loc 1 2785 16
 3167 00ba BB68     		ldr	r3, [r7, #8]
 3168 00bc 1833     		adds	r3, r3, #24
 3169 00be 1846     		mov	r0, r3
 3170 00c0 FFF7FEFF 		bl	uxListRemove
 3171              	.L189:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3172              		.loc 1 2794 6
 3173 00c4 BB68     		ldr	r3, [r7, #8]
 3174 00c6 DB6A     		ldr	r3, [r3, #44]
 3175 00c8 0122     		movs	r2, #1
 3176 00ca 9A40     		lsls	r2, r2, r3
 3177 00cc 234B     		ldr	r3, .L195+24
 3178 00ce 1B68     		ldr	r3, [r3]
 3179 00d0 1343     		orrs	r3, r3, r2
 3180 00d2 224A     		ldr	r2, .L195+24
 3181 00d4 1360     		str	r3, [r2]
 3182 00d6 BB68     		ldr	r3, [r7, #8]
 3183 00d8 DA6A     		ldr	r2, [r3, #44]
 3184 00da 1346     		mov	r3, r2
 3185 00dc 9B00     		lsls	r3, r3, #2
 3186 00de 1344     		add	r3, r3, r2
 3187 00e0 9B00     		lsls	r3, r3, #2
 3188 00e2 1F4A     		ldr	r2, .L195+28
 3189 00e4 1A44     		add	r2, r2, r3
 3190 00e6 BB68     		ldr	r3, [r7, #8]
 3191 00e8 0433     		adds	r3, r3, #4
 3192 00ea 1946     		mov	r1, r3
 3193 00ec 1046     		mov	r0, r2
 3194 00ee FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3195              		.loc 1 2804 16
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 110


 3196 00f2 BB68     		ldr	r3, [r7, #8]
 3197 00f4 DA6A     		ldr	r2, [r3, #44]
 3198              		.loc 1 2804 44
 3199 00f6 1B4B     		ldr	r3, .L195+32
 3200 00f8 1B68     		ldr	r3, [r3]
 3201 00fa DB6A     		ldr	r3, [r3, #44]
 3202              		.loc 1 2804 9
 3203 00fc 9A42     		cmp	r2, r3
 3204 00fe B9D3     		bcc	.L191
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3205              		.loc 1 2806 24
 3206 0100 0123     		movs	r3, #1
 3207 0102 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3208              		.loc 1 2744 7
 3209 0104 B6E7     		b	.L191
 3210              	.L186:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3211              		.loc 1 2823 8
 3212 0106 174B     		ldr	r3, .L195+32
 3213 0108 1B68     		ldr	r3, [r3]
 3214 010a DA6A     		ldr	r2, [r3, #44]
 3215 010c 1449     		ldr	r1, .L195+28
 3216 010e 1346     		mov	r3, r2
 3217 0110 9B00     		lsls	r3, r3, #2
 3218 0112 1344     		add	r3, r3, r2
 3219 0114 9B00     		lsls	r3, r3, #2
 3220 0116 0B44     		add	r3, r3, r1
 3221 0118 1B68     		ldr	r3, [r3]
 3222              		.loc 1 2823 6
 3223 011a 012B     		cmp	r3, #1
 3224 011c 01D9     		bls	.L192
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3225              		.loc 1 2825 21
 3226 011e 0123     		movs	r3, #1
 3227 0120 7B61     		str	r3, [r7, #20]
 3228              	.L192:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 111


2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3229              		.loc 1 2851 22
 3230 0122 114B     		ldr	r3, .L195+36
 3231 0124 1B68     		ldr	r3, [r3]
 3232              		.loc 1 2851 6
 3233 0126 002B     		cmp	r3, #0
 3234 0128 07D0     		beq	.L193
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3235              		.loc 1 2853 21
 3236 012a 0123     		movs	r3, #1
 3237 012c 7B61     		str	r3, [r7, #20]
 3238 012e 04E0     		b	.L193
 3239              	.L182:
 3240              	.LBE156:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3241              		.loc 1 2864 3
 3242 0130 0E4B     		ldr	r3, .L195+40
 3243 0132 1B68     		ldr	r3, [r3]
 3244 0134 0133     		adds	r3, r3, #1
 3245 0136 0D4A     		ldr	r2, .L195+40
 3246 0138 1360     		str	r3, [r2]
 3247              	.L193:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 112


2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3248              		.loc 1 2875 9
 3249 013a 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3250              		.loc 1 2876 1
 3251 013c 1846     		mov	r0, r3
 3252 013e 1837     		adds	r7, r7, #24
 3253              	.LCFI114:
 3254              		.cfi_def_cfa_offset 8
 3255 0140 BD46     		mov	sp, r7
 3256              	.LCFI115:
 3257              		.cfi_def_cfa_register 13
 3258              		@ sp needed
 3259 0142 80BD     		pop	{r7, pc}
 3260              	.L196:
 3261              		.align	2
 3262              	.L195:
 3263 0144 00000000 		.word	uxSchedulerSuspended
 3264 0148 00000000 		.word	xTickCount
 3265 014c 00000000 		.word	pxDelayedTaskList
 3266 0150 00000000 		.word	pxOverflowDelayedTaskList
 3267 0154 00000000 		.word	xNumOfOverflows
 3268 0158 00000000 		.word	xNextTaskUnblockTime
 3269 015c 00000000 		.word	uxTopReadyPriority
 3270 0160 00000000 		.word	pxReadyTasksLists
 3271 0164 00000000 		.word	pxCurrentTCB
 3272 0168 00000000 		.word	xYieldPending
 3273 016c 00000000 		.word	xPendedTicks
 3274              		.cfi_endproc
 3275              	.LFE27:
 3277              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3278              		.align	1
 3279              		.global	vTaskSwitchContext
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3284              	vTaskSwitchContext:
 3285              	.LFB28:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 113


2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 114


2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3286              		.loc 1 2990 1
 3287              		.cfi_startproc
 3288              		@ args = 0, pretend = 0, frame = 24
 3289              		@ frame_needed = 1, uses_anonymous_args = 0
 3290              		@ link register save eliminated.
 3291 0000 80B4     		push	{r7}
 3292              	.LCFI116:
 3293              		.cfi_def_cfa_offset 4
 3294              		.cfi_offset 7, -4
 3295 0002 87B0     		sub	sp, sp, #28
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 115


 3296              	.LCFI117:
 3297              		.cfi_def_cfa_offset 32
 3298 0004 00AF     		add	r7, sp, #0
 3299              	.LCFI118:
 3300              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3301              		.loc 1 2991 27
 3302 0006 274B     		ldr	r3, .L205
 3303 0008 1B68     		ldr	r3, [r3]
 3304              		.loc 1 2991 4
 3305 000a 002B     		cmp	r3, #0
 3306 000c 03D0     		beq	.L198
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3307              		.loc 1 2995 17
 3308 000e 264B     		ldr	r3, .L205+4
 3309 0010 0122     		movs	r2, #1
 3310 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 116


3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3311              		.loc 1 3061 1
 3312 0014 3FE0     		b	.L204
 3313              	.L198:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3314              		.loc 1 2999 17
 3315 0016 244B     		ldr	r3, .L205+4
 3316 0018 0022     		movs	r2, #0
 3317 001a 1A60     		str	r2, [r3]
 3318              	.LBB160:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3319              		.loc 1 3041 3
 3320 001c 234B     		ldr	r3, .L205+8
 3321 001e 1B68     		ldr	r3, [r3]
 3322 0020 FB60     		str	r3, [r7, #12]
 3323              	.LBB161:
 3324              	.LBB162:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3325              		.loc 2 134 3
 3326 0022 FB68     		ldr	r3, [r7, #12]
 3327              		.syntax unified
 3328              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3329 0024 B3FA83F3 		clz r3, r3
 3330              	@ 0 "" 2
 3331              		.thumb
 3332              		.syntax unified
 3333 0028 FB72     		strb	r3, [r7, #11]
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3334              		.loc 2 135 10
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 117


 3335 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3336              	.LBE162:
 3337              	.LBE161:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3338              		.loc 1 3041 3
 3339 002c C3F11F03 		rsb	r3, r3, #31
 3340 0030 7B61     		str	r3, [r7, #20]
 3341 0032 1F49     		ldr	r1, .L205+12
 3342 0034 7A69     		ldr	r2, [r7, #20]
 3343 0036 1346     		mov	r3, r2
 3344 0038 9B00     		lsls	r3, r3, #2
 3345 003a 1344     		add	r3, r3, r2
 3346 003c 9B00     		lsls	r3, r3, #2
 3347 003e 0B44     		add	r3, r3, r1
 3348 0040 1B68     		ldr	r3, [r3]
 3349 0042 002B     		cmp	r3, #0
 3350 0044 0AD1     		bne	.L201
 3351              	.LBB163:
 3352              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3353              		.loc 2 195 2
 3354              		.syntax unified
 3355              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3356 0046 4FF05003 			mov r3, #80												
 3357 004a 83F31188 		msr basepri, r3											
 3358 004e BFF36F8F 		isb														
 3359 0052 BFF34F8F 		dsb														
 3360              	
 3361              	@ 0 "" 2
 3362              		.thumb
 3363              		.syntax unified
 3364 0056 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3365              		.loc 2 203 1
 3366 0058 00BF     		nop
 3367              	.L202:
 3368              	.LBE164:
 3369              	.LBE163:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3370              		.loc 1 3041 3 discriminator 1
 3371 005a FEE7     		b	.L202
 3372              	.L201:
 3373              	.LBB165:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3374              		.loc 1 3041 3 is_stmt 0 discriminator 2
 3375 005c 7A69     		ldr	r2, [r7, #20]
 3376 005e 1346     		mov	r3, r2
 3377 0060 9B00     		lsls	r3, r3, #2
 3378 0062 1344     		add	r3, r3, r2
 3379 0064 9B00     		lsls	r3, r3, #2
 3380 0066 124A     		ldr	r2, .L205+12
 3381 0068 1344     		add	r3, r3, r2
 3382 006a 3B61     		str	r3, [r7, #16]
 3383 006c 3B69     		ldr	r3, [r7, #16]
 3384 006e 5B68     		ldr	r3, [r3, #4]
 3385 0070 5A68     		ldr	r2, [r3, #4]
 3386 0072 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 118


 3387 0074 5A60     		str	r2, [r3, #4]
 3388 0076 3B69     		ldr	r3, [r7, #16]
 3389 0078 5A68     		ldr	r2, [r3, #4]
 3390 007a 3B69     		ldr	r3, [r7, #16]
 3391 007c 0833     		adds	r3, r3, #8
 3392 007e 9A42     		cmp	r2, r3
 3393 0080 04D1     		bne	.L203
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3394              		.loc 1 3041 3 discriminator 3
 3395 0082 3B69     		ldr	r3, [r7, #16]
 3396 0084 5B68     		ldr	r3, [r3, #4]
 3397 0086 5A68     		ldr	r2, [r3, #4]
 3398 0088 3B69     		ldr	r3, [r7, #16]
 3399 008a 5A60     		str	r2, [r3, #4]
 3400              	.L203:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3401              		.loc 1 3041 3 discriminator 5
 3402 008c 3B69     		ldr	r3, [r7, #16]
 3403 008e 5B68     		ldr	r3, [r3, #4]
 3404 0090 DB68     		ldr	r3, [r3, #12]
 3405 0092 084A     		ldr	r2, .L205+16
 3406 0094 1360     		str	r3, [r2]
 3407              	.L204:
 3408              	.LBE165:
 3409              	.LBE160:
 3410              		.loc 1 3061 1 is_stmt 1
 3411 0096 00BF     		nop
 3412 0098 1C37     		adds	r7, r7, #28
 3413              	.LCFI119:
 3414              		.cfi_def_cfa_offset 4
 3415 009a BD46     		mov	sp, r7
 3416              	.LCFI120:
 3417              		.cfi_def_cfa_register 13
 3418              		@ sp needed
 3419 009c 5DF8047B 		ldr	r7, [sp], #4
 3420              	.LCFI121:
 3421              		.cfi_restore 7
 3422              		.cfi_def_cfa_offset 0
 3423 00a0 7047     		bx	lr
 3424              	.L206:
 3425 00a2 00BF     		.align	2
 3426              	.L205:
 3427 00a4 00000000 		.word	uxSchedulerSuspended
 3428 00a8 00000000 		.word	xYieldPending
 3429 00ac 00000000 		.word	uxTopReadyPriority
 3430 00b0 00000000 		.word	pxReadyTasksLists
 3431 00b4 00000000 		.word	pxCurrentTCB
 3432              		.cfi_endproc
 3433              	.LFE28:
 3435              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3436              		.align	1
 3437              		.global	vTaskPlaceOnEventList
 3438              		.syntax unified
 3439              		.thumb
 3440              		.thumb_func
 3442              	vTaskPlaceOnEventList:
 3443              	.LFB29:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 119


3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3444              		.loc 1 3065 1
 3445              		.cfi_startproc
 3446              		@ args = 0, pretend = 0, frame = 16
 3447              		@ frame_needed = 1, uses_anonymous_args = 0
 3448 0000 80B5     		push	{r7, lr}
 3449              	.LCFI122:
 3450              		.cfi_def_cfa_offset 8
 3451              		.cfi_offset 7, -8
 3452              		.cfi_offset 14, -4
 3453 0002 84B0     		sub	sp, sp, #16
 3454              	.LCFI123:
 3455              		.cfi_def_cfa_offset 24
 3456 0004 00AF     		add	r7, sp, #0
 3457              	.LCFI124:
 3458              		.cfi_def_cfa_register 7
 3459 0006 7860     		str	r0, [r7, #4]
 3460 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3461              		.loc 1 3066 2
 3462 000a 7B68     		ldr	r3, [r7, #4]
 3463 000c 002B     		cmp	r3, #0
 3464 000e 0AD1     		bne	.L208
 3465              	.LBB166:
 3466              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3467              		.loc 2 195 2
 3468              		.syntax unified
 3469              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3470 0010 4FF05003 			mov r3, #80												
 3471 0014 83F31188 		msr basepri, r3											
 3472 0018 BFF36F8F 		isb														
 3473 001c BFF34F8F 		dsb														
 3474              	
 3475              	@ 0 "" 2
 3476              		.thumb
 3477              		.syntax unified
 3478 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3479              		.loc 2 203 1
 3480 0022 00BF     		nop
 3481              	.L209:
 3482              	.LBE167:
 3483              	.LBE166:
 3484              		.loc 1 3066 2 discriminator 1
 3485 0024 FEE7     		b	.L209
 3486              	.L208:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 120


3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3487              		.loc 1 3075 43
 3488 0026 074B     		ldr	r3, .L210
 3489 0028 1B68     		ldr	r3, [r3]
 3490              		.loc 1 3075 2
 3491 002a 1833     		adds	r3, r3, #24
 3492 002c 1946     		mov	r1, r3
 3493 002e 7868     		ldr	r0, [r7, #4]
 3494 0030 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3495              		.loc 1 3077 2
 3496 0034 0121     		movs	r1, #1
 3497 0036 3868     		ldr	r0, [r7]
 3498 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3499              		.loc 1 3078 1
 3500 003c 00BF     		nop
 3501 003e 1037     		adds	r7, r7, #16
 3502              	.LCFI125:
 3503              		.cfi_def_cfa_offset 8
 3504 0040 BD46     		mov	sp, r7
 3505              	.LCFI126:
 3506              		.cfi_def_cfa_register 13
 3507              		@ sp needed
 3508 0042 80BD     		pop	{r7, pc}
 3509              	.L211:
 3510              		.align	2
 3511              	.L210:
 3512 0044 00000000 		.word	pxCurrentTCB
 3513              		.cfi_endproc
 3514              	.LFE29:
 3516              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3517              		.align	1
 3518              		.global	vTaskPlaceOnUnorderedEventList
 3519              		.syntax unified
 3520              		.thumb
 3521              		.thumb_func
 3523              	vTaskPlaceOnUnorderedEventList:
 3524              	.LFB30:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3525              		.loc 1 3082 1
 3526              		.cfi_startproc
 3527              		@ args = 0, pretend = 0, frame = 24
 3528              		@ frame_needed = 1, uses_anonymous_args = 0
 3529 0000 80B5     		push	{r7, lr}
 3530              	.LCFI127:
 3531              		.cfi_def_cfa_offset 8
 3532              		.cfi_offset 7, -8
 3533              		.cfi_offset 14, -4
 3534 0002 86B0     		sub	sp, sp, #24
 3535              	.LCFI128:
 3536              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 121


 3537 0004 00AF     		add	r7, sp, #0
 3538              	.LCFI129:
 3539              		.cfi_def_cfa_register 7
 3540 0006 F860     		str	r0, [r7, #12]
 3541 0008 B960     		str	r1, [r7, #8]
 3542 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3543              		.loc 1 3083 2
 3544 000c FB68     		ldr	r3, [r7, #12]
 3545 000e 002B     		cmp	r3, #0
 3546 0010 0AD1     		bne	.L213
 3547              	.LBB168:
 3548              	.LBB169:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3549              		.loc 2 195 2
 3550              		.syntax unified
 3551              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3552 0012 4FF05003 			mov r3, #80												
 3553 0016 83F31188 		msr basepri, r3											
 3554 001a BFF36F8F 		isb														
 3555 001e BFF34F8F 		dsb														
 3556              	
 3557              	@ 0 "" 2
 3558              		.thumb
 3559              		.syntax unified
 3560 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3561              		.loc 2 203 1
 3562 0024 00BF     		nop
 3563              	.L214:
 3564              	.LBE169:
 3565              	.LBE168:
 3566              		.loc 1 3083 2 discriminator 1
 3567 0026 FEE7     		b	.L214
 3568              	.L213:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3569              		.loc 1 3087 2
 3570 0028 114B     		ldr	r3, .L217
 3571 002a 1B68     		ldr	r3, [r3]
 3572 002c 002B     		cmp	r3, #0
 3573 002e 0AD1     		bne	.L215
 3574              	.LBB170:
 3575              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3576              		.loc 2 195 2
 3577              		.syntax unified
 3578              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3579 0030 4FF05003 			mov r3, #80												
 3580 0034 83F31188 		msr basepri, r3											
 3581 0038 BFF36F8F 		isb														
 3582 003c BFF34F8F 		dsb														
 3583              	
 3584              	@ 0 "" 2
 3585              		.thumb
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 122


 3586              		.syntax unified
 3587 0040 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3588              		.loc 2 203 1
 3589 0042 00BF     		nop
 3590              	.L216:
 3591              	.LBE171:
 3592              	.LBE170:
 3593              		.loc 1 3087 2 discriminator 2
 3594 0044 FEE7     		b	.L216
 3595              	.L215:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3596              		.loc 1 3092 2
 3597 0046 0B4B     		ldr	r3, .L217+4
 3598 0048 1B68     		ldr	r3, [r3]
 3599 004a BA68     		ldr	r2, [r7, #8]
 3600 004c 42F00042 		orr	r2, r2, #-2147483648
 3601 0050 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3602              		.loc 1 3099 46
 3603 0052 084B     		ldr	r3, .L217+4
 3604 0054 1B68     		ldr	r3, [r3]
 3605              		.loc 1 3099 2
 3606 0056 1833     		adds	r3, r3, #24
 3607 0058 1946     		mov	r1, r3
 3608 005a F868     		ldr	r0, [r7, #12]
 3609 005c FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3610              		.loc 1 3101 2
 3611 0060 0121     		movs	r1, #1
 3612 0062 7868     		ldr	r0, [r7, #4]
 3613 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3614              		.loc 1 3102 1
 3615 0068 00BF     		nop
 3616 006a 1837     		adds	r7, r7, #24
 3617              	.LCFI130:
 3618              		.cfi_def_cfa_offset 8
 3619 006c BD46     		mov	sp, r7
 3620              	.LCFI131:
 3621              		.cfi_def_cfa_register 13
 3622              		@ sp needed
 3623 006e 80BD     		pop	{r7, pc}
 3624              	.L218:
 3625              		.align	2
 3626              	.L217:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 123


 3627 0070 00000000 		.word	uxSchedulerSuspended
 3628 0074 00000000 		.word	pxCurrentTCB
 3629              		.cfi_endproc
 3630              	.LFE30:
 3632              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3633              		.align	1
 3634              		.global	xTaskRemoveFromEventList
 3635              		.syntax unified
 3636              		.thumb
 3637              		.thumb_func
 3639              	xTaskRemoveFromEventList:
 3640              	.LFB31:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3641              		.loc 1 3139 1
 3642              		.cfi_startproc
 3643              		@ args = 0, pretend = 0, frame = 24
 3644              		@ frame_needed = 1, uses_anonymous_args = 0
 3645 0000 80B5     		push	{r7, lr}
 3646              	.LCFI132:
 3647              		.cfi_def_cfa_offset 8
 3648              		.cfi_offset 7, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 124


 3649              		.cfi_offset 14, -4
 3650 0002 86B0     		sub	sp, sp, #24
 3651              	.LCFI133:
 3652              		.cfi_def_cfa_offset 32
 3653 0004 00AF     		add	r7, sp, #0
 3654              	.LCFI134:
 3655              		.cfi_def_cfa_register 7
 3656 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 3657              		.loc 1 3156 19
 3658 0008 7B68     		ldr	r3, [r7, #4]
 3659 000a DB68     		ldr	r3, [r3, #12]
 3660              		.loc 1 3156 17
 3661 000c DB68     		ldr	r3, [r3, #12]
 3662 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3663              		.loc 1 3157 2
 3664 0010 3B69     		ldr	r3, [r7, #16]
 3665 0012 002B     		cmp	r3, #0
 3666 0014 0AD1     		bne	.L220
 3667              	.LBB172:
 3668              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3669              		.loc 2 195 2
 3670              		.syntax unified
 3671              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3672 0016 4FF05003 			mov r3, #80												
 3673 001a 83F31188 		msr basepri, r3											
 3674 001e BFF36F8F 		isb														
 3675 0022 BFF34F8F 		dsb														
 3676              	
 3677              	@ 0 "" 2
 3678              		.thumb
 3679              		.syntax unified
 3680 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3681              		.loc 2 203 1
 3682 0028 00BF     		nop
 3683              	.L221:
 3684              	.LBE173:
 3685              	.LBE172:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 125


 3686              		.loc 1 3157 2 discriminator 1
 3687 002a FEE7     		b	.L221
 3688              	.L220:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3689              		.loc 1 3158 11
 3690 002c 3B69     		ldr	r3, [r7, #16]
 3691 002e 1833     		adds	r3, r3, #24
 3692 0030 1846     		mov	r0, r3
 3693 0032 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3694              		.loc 1 3160 27
 3695 0036 1D4B     		ldr	r3, .L227
 3696 0038 1B68     		ldr	r3, [r3]
 3697              		.loc 1 3160 4
 3698 003a 002B     		cmp	r3, #0
 3699 003c 1CD1     		bne	.L222
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3700              		.loc 1 3162 12
 3701 003e 3B69     		ldr	r3, [r7, #16]
 3702 0040 0433     		adds	r3, r3, #4
 3703 0042 1846     		mov	r0, r3
 3704 0044 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3705              		.loc 1 3163 3
 3706 0048 3B69     		ldr	r3, [r7, #16]
 3707 004a DB6A     		ldr	r3, [r3, #44]
 3708 004c 0122     		movs	r2, #1
 3709 004e 9A40     		lsls	r2, r2, r3
 3710 0050 174B     		ldr	r3, .L227+4
 3711 0052 1B68     		ldr	r3, [r3]
 3712 0054 1343     		orrs	r3, r3, r2
 3713 0056 164A     		ldr	r2, .L227+4
 3714 0058 1360     		str	r3, [r2]
 3715 005a 3B69     		ldr	r3, [r7, #16]
 3716 005c DA6A     		ldr	r2, [r3, #44]
 3717 005e 1346     		mov	r3, r2
 3718 0060 9B00     		lsls	r3, r3, #2
 3719 0062 1344     		add	r3, r3, r2
 3720 0064 9B00     		lsls	r3, r3, #2
 3721 0066 134A     		ldr	r2, .L227+8
 3722 0068 1A44     		add	r2, r2, r3
 3723 006a 3B69     		ldr	r3, [r7, #16]
 3724 006c 0433     		adds	r3, r3, #4
 3725 006e 1946     		mov	r1, r3
 3726 0070 1046     		mov	r0, r2
 3727 0072 FFF7FEFF 		bl	vListInsertEnd
 3728 0076 05E0     		b	.L223
 3729              	.L222:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 126


3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3730              		.loc 1 3183 3
 3731 0078 3B69     		ldr	r3, [r7, #16]
 3732 007a 1833     		adds	r3, r3, #24
 3733 007c 1946     		mov	r1, r3
 3734 007e 0E48     		ldr	r0, .L227+12
 3735 0080 FFF7FEFF 		bl	vListInsertEnd
 3736              	.L223:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3737              		.loc 1 3186 20
 3738 0084 3B69     		ldr	r3, [r7, #16]
 3739 0086 DA6A     		ldr	r2, [r3, #44]
 3740              		.loc 1 3186 47
 3741 0088 0C4B     		ldr	r3, .L227+16
 3742 008a 1B68     		ldr	r3, [r3]
 3743 008c DB6A     		ldr	r3, [r3, #44]
 3744              		.loc 1 3186 4
 3745 008e 9A42     		cmp	r2, r3
 3746 0090 05D9     		bls	.L224
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3747              		.loc 1 3191 11
 3748 0092 0123     		movs	r3, #1
 3749 0094 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3750              		.loc 1 3195 17
 3751 0096 0A4B     		ldr	r3, .L227+20
 3752 0098 0122     		movs	r2, #1
 3753 009a 1A60     		str	r2, [r3]
 3754 009c 01E0     		b	.L225
 3755              	.L224:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3756              		.loc 1 3199 11
 3757 009e 0023     		movs	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 127


 3758 00a0 7B61     		str	r3, [r7, #20]
 3759              	.L225:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3760              		.loc 1 3202 9
 3761 00a2 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3762              		.loc 1 3203 1
 3763 00a4 1846     		mov	r0, r3
 3764 00a6 1837     		adds	r7, r7, #24
 3765              	.LCFI135:
 3766              		.cfi_def_cfa_offset 8
 3767 00a8 BD46     		mov	sp, r7
 3768              	.LCFI136:
 3769              		.cfi_def_cfa_register 13
 3770              		@ sp needed
 3771 00aa 80BD     		pop	{r7, pc}
 3772              	.L228:
 3773              		.align	2
 3774              	.L227:
 3775 00ac 00000000 		.word	uxSchedulerSuspended
 3776 00b0 00000000 		.word	uxTopReadyPriority
 3777 00b4 00000000 		.word	pxReadyTasksLists
 3778 00b8 00000000 		.word	xPendingReadyList
 3779 00bc 00000000 		.word	pxCurrentTCB
 3780 00c0 00000000 		.word	xYieldPending
 3781              		.cfi_endproc
 3782              	.LFE31:
 3784              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3785              		.align	1
 3786              		.global	vTaskRemoveFromUnorderedEventList
 3787              		.syntax unified
 3788              		.thumb
 3789              		.thumb_func
 3791              	vTaskRemoveFromUnorderedEventList:
 3792              	.LFB32:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3793              		.loc 1 3207 1
 3794              		.cfi_startproc
 3795              		@ args = 0, pretend = 0, frame = 24
 3796              		@ frame_needed = 1, uses_anonymous_args = 0
 3797 0000 80B5     		push	{r7, lr}
 3798              	.LCFI137:
 3799              		.cfi_def_cfa_offset 8
 3800              		.cfi_offset 7, -8
 3801              		.cfi_offset 14, -4
 3802 0002 86B0     		sub	sp, sp, #24
 3803              	.LCFI138:
 3804              		.cfi_def_cfa_offset 32
 3805 0004 00AF     		add	r7, sp, #0
 3806              	.LCFI139:
 3807              		.cfi_def_cfa_register 7
 3808 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 128


 3809 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3810              		.loc 1 3212 2
 3811 000a 294B     		ldr	r3, .L236
 3812 000c 1B68     		ldr	r3, [r3]
 3813 000e 002B     		cmp	r3, #0
 3814 0010 0AD1     		bne	.L230
 3815              	.LBB174:
 3816              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3817              		.loc 2 195 2
 3818              		.syntax unified
 3819              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3820 0012 4FF05003 			mov r3, #80												
 3821 0016 83F31188 		msr basepri, r3											
 3822 001a BFF36F8F 		isb														
 3823 001e BFF34F8F 		dsb														
 3824              	
 3825              	@ 0 "" 2
 3826              		.thumb
 3827              		.syntax unified
 3828 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3829              		.loc 2 203 1
 3830 0024 00BF     		nop
 3831              	.L231:
 3832              	.LBE175:
 3833              	.LBE174:
 3834              		.loc 1 3212 2 discriminator 1
 3835 0026 FEE7     		b	.L231
 3836              	.L230:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3837              		.loc 1 3215 2
 3838 0028 3B68     		ldr	r3, [r7]
 3839 002a 43F00042 		orr	r2, r3, #-2147483648
 3840 002e 7B68     		ldr	r3, [r7, #4]
 3841 0030 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 3842              		.loc 1 3219 17
 3843 0032 7B68     		ldr	r3, [r7, #4]
 3844 0034 DB68     		ldr	r3, [r3, #12]
 3845 0036 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3846              		.loc 1 3220 2
 3847 0038 7B69     		ldr	r3, [r7, #20]
 3848 003a 002B     		cmp	r3, #0
 3849 003c 0AD1     		bne	.L232
 3850              	.LBB176:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 129


 3851              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3852              		.loc 2 195 2
 3853              		.syntax unified
 3854              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3855 003e 4FF05003 			mov r3, #80												
 3856 0042 83F31188 		msr basepri, r3											
 3857 0046 BFF36F8F 		isb														
 3858 004a BFF34F8F 		dsb														
 3859              	
 3860              	@ 0 "" 2
 3861              		.thumb
 3862              		.syntax unified
 3863 004e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3864              		.loc 2 203 1
 3865 0050 00BF     		nop
 3866              	.L233:
 3867              	.LBE177:
 3868              	.LBE176:
 3869              		.loc 1 3220 2 discriminator 2
 3870 0052 FEE7     		b	.L233
 3871              	.L232:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3872              		.loc 1 3221 11
 3873 0054 7868     		ldr	r0, [r7, #4]
 3874 0056 FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3875              		.loc 1 3240 11
 3876 005a 7B69     		ldr	r3, [r7, #20]
 3877 005c 0433     		adds	r3, r3, #4
 3878 005e 1846     		mov	r0, r3
 3879 0060 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3880              		.loc 1 3241 2
 3881 0064 7B69     		ldr	r3, [r7, #20]
 3882 0066 DB6A     		ldr	r3, [r3, #44]
 3883 0068 0122     		movs	r2, #1
 3884 006a 9A40     		lsls	r2, r2, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 130


 3885 006c 114B     		ldr	r3, .L236+4
 3886 006e 1B68     		ldr	r3, [r3]
 3887 0070 1343     		orrs	r3, r3, r2
 3888 0072 104A     		ldr	r2, .L236+4
 3889 0074 1360     		str	r3, [r2]
 3890 0076 7B69     		ldr	r3, [r7, #20]
 3891 0078 DA6A     		ldr	r2, [r3, #44]
 3892 007a 1346     		mov	r3, r2
 3893 007c 9B00     		lsls	r3, r3, #2
 3894 007e 1344     		add	r3, r3, r2
 3895 0080 9B00     		lsls	r3, r3, #2
 3896 0082 0D4A     		ldr	r2, .L236+8
 3897 0084 1A44     		add	r2, r2, r3
 3898 0086 7B69     		ldr	r3, [r7, #20]
 3899 0088 0433     		adds	r3, r3, #4
 3900 008a 1946     		mov	r1, r3
 3901 008c 1046     		mov	r0, r2
 3902 008e FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3903              		.loc 1 3243 20
 3904 0092 7B69     		ldr	r3, [r7, #20]
 3905 0094 DA6A     		ldr	r2, [r3, #44]
 3906              		.loc 1 3243 47
 3907 0096 094B     		ldr	r3, .L236+12
 3908 0098 1B68     		ldr	r3, [r3]
 3909 009a DB6A     		ldr	r3, [r3, #44]
 3910              		.loc 1 3243 4
 3911 009c 9A42     		cmp	r2, r3
 3912 009e 02D9     		bls	.L235
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3913              		.loc 1 3249 17
 3914 00a0 074B     		ldr	r3, .L236+16
 3915 00a2 0122     		movs	r2, #1
 3916 00a4 1A60     		str	r2, [r3]
 3917              	.L235:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3918              		.loc 1 3251 1
 3919 00a6 00BF     		nop
 3920 00a8 1837     		adds	r7, r7, #24
 3921              	.LCFI140:
 3922              		.cfi_def_cfa_offset 8
 3923 00aa BD46     		mov	sp, r7
 3924              	.LCFI141:
 3925              		.cfi_def_cfa_register 13
 3926              		@ sp needed
 3927 00ac 80BD     		pop	{r7, pc}
 3928              	.L237:
 3929 00ae 00BF     		.align	2
 3930              	.L236:
 3931 00b0 00000000 		.word	uxSchedulerSuspended
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 131


 3932 00b4 00000000 		.word	uxTopReadyPriority
 3933 00b8 00000000 		.word	pxReadyTasksLists
 3934 00bc 00000000 		.word	pxCurrentTCB
 3935 00c0 00000000 		.word	xYieldPending
 3936              		.cfi_endproc
 3937              	.LFE32:
 3939              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3940              		.align	1
 3941              		.global	vTaskSetTimeOutState
 3942              		.syntax unified
 3943              		.thumb
 3944              		.thumb_func
 3946              	vTaskSetTimeOutState:
 3947              	.LFB33:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3948              		.loc 1 3255 1
 3949              		.cfi_startproc
 3950              		@ args = 0, pretend = 0, frame = 16
 3951              		@ frame_needed = 1, uses_anonymous_args = 0
 3952 0000 80B5     		push	{r7, lr}
 3953              	.LCFI142:
 3954              		.cfi_def_cfa_offset 8
 3955              		.cfi_offset 7, -8
 3956              		.cfi_offset 14, -4
 3957 0002 84B0     		sub	sp, sp, #16
 3958              	.LCFI143:
 3959              		.cfi_def_cfa_offset 24
 3960 0004 00AF     		add	r7, sp, #0
 3961              	.LCFI144:
 3962              		.cfi_def_cfa_register 7
 3963 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3964              		.loc 1 3256 2
 3965 0008 7B68     		ldr	r3, [r7, #4]
 3966 000a 002B     		cmp	r3, #0
 3967 000c 0AD1     		bne	.L239
 3968              	.LBB178:
 3969              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3970              		.loc 2 195 2
 3971              		.syntax unified
 3972              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3973 000e 4FF05003 			mov r3, #80												
 3974 0012 83F31188 		msr basepri, r3											
 3975 0016 BFF36F8F 		isb														
 3976 001a BFF34F8F 		dsb														
 3977              	
 3978              	@ 0 "" 2
 3979              		.thumb
 3980              		.syntax unified
 3981 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3982              		.loc 2 203 1
 3983 0020 00BF     		nop
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 132


 3984              	.L240:
 3985              	.LBE179:
 3986              	.LBE178:
 3987              		.loc 1 3256 2 discriminator 1
 3988 0022 FEE7     		b	.L240
 3989              	.L239:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3990              		.loc 1 3257 2
 3991 0024 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 3992              		.loc 1 3259 29
 3993 0028 064B     		ldr	r3, .L241
 3994 002a 1A68     		ldr	r2, [r3]
 3995 002c 7B68     		ldr	r3, [r7, #4]
 3996 002e 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3997              		.loc 1 3260 30
 3998 0030 054B     		ldr	r3, .L241+4
 3999 0032 1A68     		ldr	r2, [r3]
 4000 0034 7B68     		ldr	r3, [r7, #4]
 4001 0036 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4002              		.loc 1 3262 2
 4003 0038 FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4004              		.loc 1 3263 1
 4005 003c 00BF     		nop
 4006 003e 1037     		adds	r7, r7, #16
 4007              	.LCFI145:
 4008              		.cfi_def_cfa_offset 8
 4009 0040 BD46     		mov	sp, r7
 4010              	.LCFI146:
 4011              		.cfi_def_cfa_register 13
 4012              		@ sp needed
 4013 0042 80BD     		pop	{r7, pc}
 4014              	.L242:
 4015              		.align	2
 4016              	.L241:
 4017 0044 00000000 		.word	xNumOfOverflows
 4018 0048 00000000 		.word	xTickCount
 4019              		.cfi_endproc
 4020              	.LFE33:
 4022              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4023              		.align	1
 4024              		.global	vTaskInternalSetTimeOutState
 4025              		.syntax unified
 4026              		.thumb
 4027              		.thumb_func
 4029              	vTaskInternalSetTimeOutState:
 4030              	.LFB34:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4031              		.loc 1 3267 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 133


 4032              		.cfi_startproc
 4033              		@ args = 0, pretend = 0, frame = 8
 4034              		@ frame_needed = 1, uses_anonymous_args = 0
 4035              		@ link register save eliminated.
 4036 0000 80B4     		push	{r7}
 4037              	.LCFI147:
 4038              		.cfi_def_cfa_offset 4
 4039              		.cfi_offset 7, -4
 4040 0002 83B0     		sub	sp, sp, #12
 4041              	.LCFI148:
 4042              		.cfi_def_cfa_offset 16
 4043 0004 00AF     		add	r7, sp, #0
 4044              	.LCFI149:
 4045              		.cfi_def_cfa_register 7
 4046 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4047              		.loc 1 3269 28
 4048 0008 064B     		ldr	r3, .L244
 4049 000a 1A68     		ldr	r2, [r3]
 4050 000c 7B68     		ldr	r3, [r7, #4]
 4051 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4052              		.loc 1 3270 29
 4053 0010 054B     		ldr	r3, .L244+4
 4054 0012 1A68     		ldr	r2, [r3]
 4055 0014 7B68     		ldr	r3, [r7, #4]
 4056 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4057              		.loc 1 3271 1
 4058 0018 00BF     		nop
 4059 001a 0C37     		adds	r7, r7, #12
 4060              	.LCFI150:
 4061              		.cfi_def_cfa_offset 4
 4062 001c BD46     		mov	sp, r7
 4063              	.LCFI151:
 4064              		.cfi_def_cfa_register 13
 4065              		@ sp needed
 4066 001e 5DF8047B 		ldr	r7, [sp], #4
 4067              	.LCFI152:
 4068              		.cfi_restore 7
 4069              		.cfi_def_cfa_offset 0
 4070 0022 7047     		bx	lr
 4071              	.L245:
 4072              		.align	2
 4073              	.L244:
 4074 0024 00000000 		.word	xNumOfOverflows
 4075 0028 00000000 		.word	xTickCount
 4076              		.cfi_endproc
 4077              	.LFE34:
 4079              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4080              		.align	1
 4081              		.global	xTaskCheckForTimeOut
 4082              		.syntax unified
 4083              		.thumb
 4084              		.thumb_func
 4086              	xTaskCheckForTimeOut:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 134


 4087              	.LFB35:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4088              		.loc 1 3275 1
 4089              		.cfi_startproc
 4090              		@ args = 0, pretend = 0, frame = 32
 4091              		@ frame_needed = 1, uses_anonymous_args = 0
 4092 0000 80B5     		push	{r7, lr}
 4093              	.LCFI153:
 4094              		.cfi_def_cfa_offset 8
 4095              		.cfi_offset 7, -8
 4096              		.cfi_offset 14, -4
 4097 0002 88B0     		sub	sp, sp, #32
 4098              	.LCFI154:
 4099              		.cfi_def_cfa_offset 40
 4100 0004 00AF     		add	r7, sp, #0
 4101              	.LCFI155:
 4102              		.cfi_def_cfa_register 7
 4103 0006 7860     		str	r0, [r7, #4]
 4104 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4105              		.loc 1 3278 2
 4106 000a 7B68     		ldr	r3, [r7, #4]
 4107 000c 002B     		cmp	r3, #0
 4108 000e 0AD1     		bne	.L247
 4109              	.LBB180:
 4110              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4111              		.loc 2 195 2
 4112              		.syntax unified
 4113              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4114 0010 4FF05003 			mov r3, #80												
 4115 0014 83F31188 		msr basepri, r3											
 4116 0018 BFF36F8F 		isb														
 4117 001c BFF34F8F 		dsb														
 4118              	
 4119              	@ 0 "" 2
 4120              		.thumb
 4121              		.syntax unified
 4122 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4123              		.loc 2 203 1
 4124 0022 00BF     		nop
 4125              	.L248:
 4126              	.LBE181:
 4127              	.LBE180:
 4128              		.loc 1 3278 2 discriminator 1
 4129 0024 FEE7     		b	.L248
 4130              	.L247:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4131              		.loc 1 3279 2
 4132 0026 3B68     		ldr	r3, [r7]
 4133 0028 002B     		cmp	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 135


 4134 002a 0AD1     		bne	.L249
 4135              	.LBB182:
 4136              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4137              		.loc 2 195 2
 4138              		.syntax unified
 4139              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4140 002c 4FF05003 			mov r3, #80												
 4141 0030 83F31188 		msr basepri, r3											
 4142 0034 BFF36F8F 		isb														
 4143 0038 BFF34F8F 		dsb														
 4144              	
 4145              	@ 0 "" 2
 4146              		.thumb
 4147              		.syntax unified
 4148 003c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4149              		.loc 2 203 1
 4150 003e 00BF     		nop
 4151              	.L250:
 4152              	.LBE183:
 4153              	.LBE182:
 4154              		.loc 1 3279 2 discriminator 2
 4155 0040 FEE7     		b	.L250
 4156              	.L249:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4157              		.loc 1 3281 2
 4158 0042 FFF7FEFF 		bl	vPortEnterCritical
 4159              	.LBB184:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4160              		.loc 1 3284 20
 4161 0046 1D4B     		ldr	r3, .L256
 4162 0048 1B68     		ldr	r3, [r3]
 4163 004a BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4164              		.loc 1 3285 62
 4165 004c 7B68     		ldr	r3, [r7, #4]
 4166 004e 5B68     		ldr	r3, [r3, #4]
 4167              		.loc 1 3285 20
 4168 0050 BA69     		ldr	r2, [r7, #24]
 4169 0052 D31A     		subs	r3, r2, r3
 4170 0054 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 136


3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4171              		.loc 1 3299 8
 4172 0056 3B68     		ldr	r3, [r7]
 4173 0058 1B68     		ldr	r3, [r3]
 4174              		.loc 1 3299 6
 4175 005a B3F1FF3F 		cmp	r3, #-1
 4176 005e 02D1     		bne	.L251
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4177              		.loc 1 3304 13
 4178 0060 0023     		movs	r3, #0
 4179 0062 FB61     		str	r3, [r7, #28]
 4180 0064 23E0     		b	.L252
 4181              	.L251:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4182              		.loc 1 3309 37
 4183 0066 7B68     		ldr	r3, [r7, #4]
 4184 0068 1A68     		ldr	r2, [r3]
 4185              		.loc 1 3309 25
 4186 006a 154B     		ldr	r3, .L256+4
 4187 006c 1B68     		ldr	r3, [r3]
 4188              		.loc 1 3309 5
 4189 006e 9A42     		cmp	r2, r3
 4190 0070 07D0     		beq	.L253
 4191              		.loc 1 3309 89 discriminator 1
 4192 0072 7B68     		ldr	r3, [r7, #4]
 4193 0074 5B68     		ldr	r3, [r3, #4]
 4194              		.loc 1 3309 56 discriminator 1
 4195 0076 BA69     		ldr	r2, [r7, #24]
 4196 0078 9A42     		cmp	r2, r3
 4197 007a 02D3     		bcc	.L253
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4198              		.loc 1 3316 12
 4199 007c 0123     		movs	r3, #1
 4200 007e FB61     		str	r3, [r7, #28]
 4201 0080 15E0     		b	.L252
 4202              	.L253:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4203              		.loc 1 3318 27
 4204 0082 3B68     		ldr	r3, [r7]
 4205 0084 1B68     		ldr	r3, [r3]
 4206              		.loc 1 3318 10
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 137


 4207 0086 7A69     		ldr	r2, [r7, #20]
 4208 0088 9A42     		cmp	r2, r3
 4209 008a 0BD2     		bcs	.L254
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4210              		.loc 1 3321 19
 4211 008c 3B68     		ldr	r3, [r7]
 4212 008e 1A68     		ldr	r2, [r3]
 4213 0090 7B69     		ldr	r3, [r7, #20]
 4214 0092 D21A     		subs	r2, r2, r3
 4215 0094 3B68     		ldr	r3, [r7]
 4216 0096 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4217              		.loc 1 3322 4
 4218 0098 7868     		ldr	r0, [r7, #4]
 4219 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4220              		.loc 1 3323 12
 4221 009e 0023     		movs	r3, #0
 4222 00a0 FB61     		str	r3, [r7, #28]
 4223 00a2 04E0     		b	.L252
 4224              	.L254:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4225              		.loc 1 3327 19
 4226 00a4 3B68     		ldr	r3, [r7]
 4227 00a6 0022     		movs	r2, #0
 4228 00a8 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4229              		.loc 1 3328 12
 4230 00aa 0123     		movs	r3, #1
 4231 00ac FB61     		str	r3, [r7, #28]
 4232              	.L252:
 4233              	.LBE184:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4234              		.loc 1 3331 2
 4235 00ae FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4236              		.loc 1 3333 9
 4237 00b2 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4238              		.loc 1 3334 1
 4239 00b4 1846     		mov	r0, r3
 4240 00b6 2037     		adds	r7, r7, #32
 4241              	.LCFI156:
 4242              		.cfi_def_cfa_offset 8
 4243 00b8 BD46     		mov	sp, r7
 4244              	.LCFI157:
 4245              		.cfi_def_cfa_register 13
 4246              		@ sp needed
 4247 00ba 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 138


 4248              	.L257:
 4249              		.align	2
 4250              	.L256:
 4251 00bc 00000000 		.word	xTickCount
 4252 00c0 00000000 		.word	xNumOfOverflows
 4253              		.cfi_endproc
 4254              	.LFE35:
 4256              		.section	.text.vTaskMissedYield,"ax",%progbits
 4257              		.align	1
 4258              		.global	vTaskMissedYield
 4259              		.syntax unified
 4260              		.thumb
 4261              		.thumb_func
 4263              	vTaskMissedYield:
 4264              	.LFB36:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4265              		.loc 1 3338 1
 4266              		.cfi_startproc
 4267              		@ args = 0, pretend = 0, frame = 0
 4268              		@ frame_needed = 1, uses_anonymous_args = 0
 4269              		@ link register save eliminated.
 4270 0000 80B4     		push	{r7}
 4271              	.LCFI158:
 4272              		.cfi_def_cfa_offset 4
 4273              		.cfi_offset 7, -4
 4274 0002 00AF     		add	r7, sp, #0
 4275              	.LCFI159:
 4276              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4277              		.loc 1 3339 16
 4278 0004 034B     		ldr	r3, .L259
 4279 0006 0122     		movs	r2, #1
 4280 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4281              		.loc 1 3340 1
 4282 000a 00BF     		nop
 4283 000c BD46     		mov	sp, r7
 4284              	.LCFI160:
 4285              		.cfi_def_cfa_register 13
 4286              		@ sp needed
 4287 000e 5DF8047B 		ldr	r7, [sp], #4
 4288              	.LCFI161:
 4289              		.cfi_restore 7
 4290              		.cfi_def_cfa_offset 0
 4291 0012 7047     		bx	lr
 4292              	.L260:
 4293              		.align	2
 4294              	.L259:
 4295 0014 00000000 		.word	xYieldPending
 4296              		.cfi_endproc
 4297              	.LFE36:
 4299              		.section	.text.prvIdleTask,"ax",%progbits
 4300              		.align	1
 4301              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 139


 4302              		.thumb
 4303              		.thumb_func
 4305              	prvIdleTask:
 4306              	.LFB37:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 140


 4307              		.loc 1 3393 1
 4308              		.cfi_startproc
 4309              		@ args = 0, pretend = 0, frame = 8
 4310              		@ frame_needed = 1, uses_anonymous_args = 0
 4311 0000 80B5     		push	{r7, lr}
 4312              	.LCFI162:
 4313              		.cfi_def_cfa_offset 8
 4314              		.cfi_offset 7, -8
 4315              		.cfi_offset 14, -4
 4316 0002 82B0     		sub	sp, sp, #8
 4317              	.LCFI163:
 4318              		.cfi_def_cfa_offset 16
 4319 0004 00AF     		add	r7, sp, #0
 4320              	.LCFI164:
 4321              		.cfi_def_cfa_register 7
 4322 0006 7860     		str	r0, [r7, #4]
 4323              	.L263:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4324              		.loc 1 3409 3
 4325 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 141


3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4326              		.loc 1 3432 8
 4327 000c 064B     		ldr	r3, .L264
 4328 000e 1B68     		ldr	r3, [r3]
 4329              		.loc 1 3432 6
 4330 0010 012B     		cmp	r3, #1
 4331 0012 F9D9     		bls	.L263
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 4332              		.loc 1 3434 5
 4333 0014 054B     		ldr	r3, .L264+4
 4334 0016 4FF08052 		mov	r2, #268435456
 4335 001a 1A60     		str	r2, [r3]
 4336              		.syntax unified
 4337              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4338 001c BFF34F8F 		dsb
 4339              	@ 0 "" 2
 4340              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4341 0020 BFF36F8F 		isb
 4342              	@ 0 "" 2
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4343              		.loc 1 3409 3
 4344              		.thumb
 4345              		.syntax unified
 4346 0024 F0E7     		b	.L263
 4347              	.L265:
 4348 0026 00BF     		.align	2
 4349              	.L264:
 4350 0028 00000000 		.word	pxReadyTasksLists
 4351 002c 04ED00E0 		.word	-536810236
 4352              		.cfi_endproc
 4353              	.LFE37:
 4355              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4356              		.align	1
 4357              		.syntax unified
 4358              		.thumb
 4359              		.thumb_func
 4361              	prvInitialiseTaskLists:
 4362              	.LFB38:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 142


3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 143


3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 144


3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4363              		.loc 1 3608 1
 4364              		.cfi_startproc
 4365              		@ args = 0, pretend = 0, frame = 8
 4366              		@ frame_needed = 1, uses_anonymous_args = 0
 4367 0000 80B5     		push	{r7, lr}
 4368              	.LCFI165:
 4369              		.cfi_def_cfa_offset 8
 4370              		.cfi_offset 7, -8
 4371              		.cfi_offset 14, -4
 4372 0002 82B0     		sub	sp, sp, #8
 4373              	.LCFI166:
 4374              		.cfi_def_cfa_offset 16
 4375 0004 00AF     		add	r7, sp, #0
 4376              	.LCFI167:
 4377              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 145


3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4378              		.loc 1 3611 18
 4379 0006 0023     		movs	r3, #0
 4380 0008 7B60     		str	r3, [r7, #4]
 4381              		.loc 1 3611 2
 4382 000a 0CE0     		b	.L267
 4383              	.L268:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4384              		.loc 1 3613 3 discriminator 3
 4385 000c 7A68     		ldr	r2, [r7, #4]
 4386 000e 1346     		mov	r3, r2
 4387 0010 9B00     		lsls	r3, r3, #2
 4388 0012 1344     		add	r3, r3, r2
 4389 0014 9B00     		lsls	r3, r3, #2
 4390 0016 124A     		ldr	r2, .L269
 4391 0018 1344     		add	r3, r3, r2
 4392 001a 1846     		mov	r0, r3
 4393 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4394              		.loc 1 3611 101 discriminator 3
 4395 0020 7B68     		ldr	r3, [r7, #4]
 4396 0022 0133     		adds	r3, r3, #1
 4397 0024 7B60     		str	r3, [r7, #4]
 4398              	.L267:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4399              		.loc 1 3611 2 discriminator 1
 4400 0026 7B68     		ldr	r3, [r7, #4]
 4401 0028 062B     		cmp	r3, #6
 4402 002a EFD9     		bls	.L268
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4403              		.loc 1 3616 2
 4404 002c 0D48     		ldr	r0, .L269+4
 4405 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4406              		.loc 1 3617 2
 4407 0032 0D48     		ldr	r0, .L269+8
 4408 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4409              		.loc 1 3618 2
 4410 0038 0C48     		ldr	r0, .L269+12
 4411 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4412              		.loc 1 3622 3
 4413 003e 0C48     		ldr	r0, .L269+16
 4414 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 146


3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4415              		.loc 1 3628 3
 4416 0044 0B48     		ldr	r0, .L269+20
 4417 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4418              		.loc 1 3634 20
 4419 004a 0B4B     		ldr	r3, .L269+24
 4420 004c 054A     		ldr	r2, .L269+4
 4421 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4422              		.loc 1 3635 28
 4423 0050 0A4B     		ldr	r3, .L269+28
 4424 0052 054A     		ldr	r2, .L269+8
 4425 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4426              		.loc 1 3636 1
 4427 0056 00BF     		nop
 4428 0058 0837     		adds	r7, r7, #8
 4429              	.LCFI168:
 4430              		.cfi_def_cfa_offset 8
 4431 005a BD46     		mov	sp, r7
 4432              	.LCFI169:
 4433              		.cfi_def_cfa_register 13
 4434              		@ sp needed
 4435 005c 80BD     		pop	{r7, pc}
 4436              	.L270:
 4437 005e 00BF     		.align	2
 4438              	.L269:
 4439 0060 00000000 		.word	pxReadyTasksLists
 4440 0064 00000000 		.word	xDelayedTaskList1
 4441 0068 00000000 		.word	xDelayedTaskList2
 4442 006c 00000000 		.word	xPendingReadyList
 4443 0070 00000000 		.word	xTasksWaitingTermination
 4444 0074 00000000 		.word	xSuspendedTaskList
 4445 0078 00000000 		.word	pxDelayedTaskList
 4446 007c 00000000 		.word	pxOverflowDelayedTaskList
 4447              		.cfi_endproc
 4448              	.LFE38:
 4450              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4451              		.align	1
 4452              		.syntax unified
 4453              		.thumb
 4454              		.thumb_func
 4456              	prvCheckTasksWaitingTermination:
 4457              	.LFB39:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4458              		.loc 1 3640 1
 4459              		.cfi_startproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 147


 4460              		@ args = 0, pretend = 0, frame = 8
 4461              		@ frame_needed = 1, uses_anonymous_args = 0
 4462 0000 80B5     		push	{r7, lr}
 4463              	.LCFI170:
 4464              		.cfi_def_cfa_offset 8
 4465              		.cfi_offset 7, -8
 4466              		.cfi_offset 14, -4
 4467 0002 82B0     		sub	sp, sp, #8
 4468              	.LCFI171:
 4469              		.cfi_def_cfa_offset 16
 4470 0004 00AF     		add	r7, sp, #0
 4471              	.LCFI172:
 4472              		.cfi_def_cfa_register 7
 4473              	.LBB185:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4474              		.loc 1 3650 8
 4475 0006 19E0     		b	.L272
 4476              	.L273:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 4477              		.loc 1 3652 4
 4478 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 4479              		.loc 1 3654 13
 4480 000c 104B     		ldr	r3, .L274
 4481 000e DB68     		ldr	r3, [r3, #12]
 4482              		.loc 1 3654 11
 4483 0010 DB68     		ldr	r3, [r3, #12]
 4484 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4485              		.loc 1 3655 14
 4486 0014 7B68     		ldr	r3, [r7, #4]
 4487 0016 0433     		adds	r3, r3, #4
 4488 0018 1846     		mov	r0, r3
 4489 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 4490              		.loc 1 3656 5
 4491 001e 0D4B     		ldr	r3, .L274+4
 4492 0020 1B68     		ldr	r3, [r3]
 4493 0022 013B     		subs	r3, r3, #1
 4494 0024 0B4A     		ldr	r2, .L274+4
 4495 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 4496              		.loc 1 3657 5
 4497 0028 0B4B     		ldr	r3, .L274+8
 4498 002a 1B68     		ldr	r3, [r3]
 4499 002c 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 148


 4500 002e 0A4A     		ldr	r2, .L274+8
 4501 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 4502              		.loc 1 3659 4
 4503 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 4504              		.loc 1 3661 4
 4505 0036 7868     		ldr	r0, [r7, #4]
 4506 0038 FFF7FEFF 		bl	prvDeleteTCB
 4507              	.L272:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4508              		.loc 1 3650 39
 4509 003c 064B     		ldr	r3, .L274+8
 4510 003e 1B68     		ldr	r3, [r3]
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4511              		.loc 1 3650 8
 4512 0040 002B     		cmp	r3, #0
 4513 0042 E1D1     		bne	.L273
 4514              	.LBE185:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4515              		.loc 1 3665 1
 4516 0044 00BF     		nop
 4517 0046 00BF     		nop
 4518 0048 0837     		adds	r7, r7, #8
 4519              	.LCFI173:
 4520              		.cfi_def_cfa_offset 8
 4521 004a BD46     		mov	sp, r7
 4522              	.LCFI174:
 4523              		.cfi_def_cfa_register 13
 4524              		@ sp needed
 4525 004c 80BD     		pop	{r7, pc}
 4526              	.L275:
 4527 004e 00BF     		.align	2
 4528              	.L274:
 4529 0050 00000000 		.word	xTasksWaitingTermination
 4530 0054 00000000 		.word	uxCurrentNumberOfTasks
 4531 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4532              		.cfi_endproc
 4533              	.LFE39:
 4535              		.section	.text.prvDeleteTCB,"ax",%progbits
 4536              		.align	1
 4537              		.syntax unified
 4538              		.thumb
 4539              		.thumb_func
 4541              	prvDeleteTCB:
 4542              	.LFB40:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 149


3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 150


3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 151


3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 152


3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4543              		.loc 1 3888 2
 4544              		.cfi_startproc
 4545              		@ args = 0, pretend = 0, frame = 16
 4546              		@ frame_needed = 1, uses_anonymous_args = 0
 4547 0000 80B5     		push	{r7, lr}
 4548              	.LCFI175:
 4549              		.cfi_def_cfa_offset 8
 4550              		.cfi_offset 7, -8
 4551              		.cfi_offset 14, -4
 4552 0002 84B0     		sub	sp, sp, #16
 4553              	.LCFI176:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 153


 4554              		.cfi_def_cfa_offset 24
 4555 0004 00AF     		add	r7, sp, #0
 4556              	.LCFI177:
 4557              		.cfi_def_cfa_register 7
 4558 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 4559              		.loc 1 3916 13
 4560 0008 7B68     		ldr	r3, [r7, #4]
 4561 000a 93F85130 		ldrb	r3, [r3, #81]	@ zero_extendqisi2
 4562              		.loc 1 3916 6
 4563 000e 002B     		cmp	r3, #0
 4564 0010 08D1     		bne	.L277
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 4565              		.loc 1 3920 21
 4566 0012 7B68     		ldr	r3, [r7, #4]
 4567 0014 1B6B     		ldr	r3, [r3, #48]
 4568              		.loc 1 3920 5
 4569 0016 1846     		mov	r0, r3
 4570 0018 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 4571              		.loc 1 3921 5
 4572 001c 7868     		ldr	r0, [r7, #4]
 4573 001e FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 154


3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4574              		.loc 1 3938 2
 4575 0022 18E0     		b	.L281
 4576              	.L277:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4577              		.loc 1 3923 18
 4578 0024 7B68     		ldr	r3, [r7, #4]
 4579 0026 93F85130 		ldrb	r3, [r3, #81]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4580              		.loc 1 3923 11
 4581 002a 012B     		cmp	r3, #1
 4582 002c 03D1     		bne	.L279
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4583              		.loc 1 3927 5
 4584 002e 7868     		ldr	r0, [r7, #4]
 4585 0030 FFF7FEFF 		bl	vPortFree
 4586              		.loc 1 3938 2
 4587 0034 0FE0     		b	.L281
 4588              	.L279:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 4589              		.loc 1 3933 5
 4590 0036 7B68     		ldr	r3, [r7, #4]
 4591 0038 93F85130 		ldrb	r3, [r3, #81]	@ zero_extendqisi2
 4592 003c 022B     		cmp	r3, #2
 4593 003e 0AD0     		beq	.L281
 4594              	.LBB186:
 4595              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4596              		.loc 2 195 2
 4597              		.syntax unified
 4598              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4599 0040 4FF05003 			mov r3, #80												
 4600 0044 83F31188 		msr basepri, r3											
 4601 0048 BFF36F8F 		isb														
 4602 004c BFF34F8F 		dsb														
 4603              	
 4604              	@ 0 "" 2
 4605              		.thumb
 4606              		.syntax unified
 4607 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4608              		.loc 2 203 1
 4609 0052 00BF     		nop
 4610              	.L280:
 4611              	.LBE187:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 155


 4612              	.LBE186:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 4613              		.loc 1 3933 5 discriminator 1
 4614 0054 FEE7     		b	.L280
 4615              	.L281:
 4616              		.loc 1 3938 2
 4617 0056 00BF     		nop
 4618 0058 1037     		adds	r7, r7, #16
 4619              	.LCFI178:
 4620              		.cfi_def_cfa_offset 8
 4621 005a BD46     		mov	sp, r7
 4622              	.LCFI179:
 4623              		.cfi_def_cfa_register 13
 4624              		@ sp needed
 4625 005c 80BD     		pop	{r7, pc}
 4626              		.cfi_endproc
 4627              	.LFE40:
 4629              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4630              		.align	1
 4631              		.syntax unified
 4632              		.thumb
 4633              		.thumb_func
 4635              	prvResetNextTaskUnblockTime:
 4636              	.LFB41:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4637              		.loc 1 3944 1
 4638              		.cfi_startproc
 4639              		@ args = 0, pretend = 0, frame = 8
 4640              		@ frame_needed = 1, uses_anonymous_args = 0
 4641              		@ link register save eliminated.
 4642 0000 80B4     		push	{r7}
 4643              	.LCFI180:
 4644              		.cfi_def_cfa_offset 4
 4645              		.cfi_offset 7, -4
 4646 0002 83B0     		sub	sp, sp, #12
 4647              	.LCFI181:
 4648              		.cfi_def_cfa_offset 16
 4649 0004 00AF     		add	r7, sp, #0
 4650              	.LCFI182:
 4651              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4652              		.loc 1 3947 6
 4653 0006 0C4B     		ldr	r3, .L286
 4654 0008 1B68     		ldr	r3, [r3]
 4655 000a 1B68     		ldr	r3, [r3]
 4656              		.loc 1 3947 4
 4657 000c 002B     		cmp	r3, #0
 4658 000e 04D1     		bne	.L283
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 156


3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4659              		.loc 1 3953 24
 4660 0010 0A4B     		ldr	r3, .L286+4
 4661 0012 4FF0FF32 		mov	r2, #-1
 4662 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4663              		.loc 1 3964 1
 4664 0018 08E0     		b	.L285
 4665              	.L283:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4666              		.loc 1 3961 15
 4667 001a 074B     		ldr	r3, .L286
 4668 001c 1B68     		ldr	r3, [r3]
 4669 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4670              		.loc 1 3961 13
 4671 0020 DB68     		ldr	r3, [r3, #12]
 4672 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4673              		.loc 1 3962 26
 4674 0024 7B68     		ldr	r3, [r7, #4]
 4675 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4676              		.loc 1 3962 24
 4677 0028 044A     		ldr	r2, .L286+4
 4678 002a 1360     		str	r3, [r2]
 4679              	.L285:
 4680              		.loc 1 3964 1
 4681 002c 00BF     		nop
 4682 002e 0C37     		adds	r7, r7, #12
 4683              	.LCFI183:
 4684              		.cfi_def_cfa_offset 4
 4685 0030 BD46     		mov	sp, r7
 4686              	.LCFI184:
 4687              		.cfi_def_cfa_register 13
 4688              		@ sp needed
 4689 0032 5DF8047B 		ldr	r7, [sp], #4
 4690              	.LCFI185:
 4691              		.cfi_restore 7
 4692              		.cfi_def_cfa_offset 0
 4693 0036 7047     		bx	lr
 4694              	.L287:
 4695              		.align	2
 4696              	.L286:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 157


 4697 0038 00000000 		.word	pxDelayedTaskList
 4698 003c 00000000 		.word	xNextTaskUnblockTime
 4699              		.cfi_endproc
 4700              	.LFE41:
 4702              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4703              		.align	1
 4704              		.global	xTaskGetCurrentTaskHandle
 4705              		.syntax unified
 4706              		.thumb
 4707              		.thumb_func
 4709              	xTaskGetCurrentTaskHandle:
 4710              	.LFB42:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4711              		.loc 1 3970 2
 4712              		.cfi_startproc
 4713              		@ args = 0, pretend = 0, frame = 8
 4714              		@ frame_needed = 1, uses_anonymous_args = 0
 4715              		@ link register save eliminated.
 4716 0000 80B4     		push	{r7}
 4717              	.LCFI186:
 4718              		.cfi_def_cfa_offset 4
 4719              		.cfi_offset 7, -4
 4720 0002 83B0     		sub	sp, sp, #12
 4721              	.LCFI187:
 4722              		.cfi_def_cfa_offset 16
 4723 0004 00AF     		add	r7, sp, #0
 4724              	.LCFI188:
 4725              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4726              		.loc 1 3976 11
 4727 0006 054B     		ldr	r3, .L290
 4728 0008 1B68     		ldr	r3, [r3]
 4729 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4730              		.loc 1 3978 10
 4731 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4732              		.loc 1 3979 2
 4733 000e 1846     		mov	r0, r3
 4734 0010 0C37     		adds	r7, r7, #12
 4735              	.LCFI189:
 4736              		.cfi_def_cfa_offset 4
 4737 0012 BD46     		mov	sp, r7
 4738              	.LCFI190:
 4739              		.cfi_def_cfa_register 13
 4740              		@ sp needed
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 158


 4741 0014 5DF8047B 		ldr	r7, [sp], #4
 4742              	.LCFI191:
 4743              		.cfi_restore 7
 4744              		.cfi_def_cfa_offset 0
 4745 0018 7047     		bx	lr
 4746              	.L291:
 4747 001a 00BF     		.align	2
 4748              	.L290:
 4749 001c 00000000 		.word	pxCurrentTCB
 4750              		.cfi_endproc
 4751              	.LFE42:
 4753              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4754              		.align	1
 4755              		.global	xTaskGetSchedulerState
 4756              		.syntax unified
 4757              		.thumb
 4758              		.thumb_func
 4760              	xTaskGetSchedulerState:
 4761              	.LFB43:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4762              		.loc 1 3987 2
 4763              		.cfi_startproc
 4764              		@ args = 0, pretend = 0, frame = 8
 4765              		@ frame_needed = 1, uses_anonymous_args = 0
 4766              		@ link register save eliminated.
 4767 0000 80B4     		push	{r7}
 4768              	.LCFI192:
 4769              		.cfi_def_cfa_offset 4
 4770              		.cfi_offset 7, -4
 4771 0002 83B0     		sub	sp, sp, #12
 4772              	.LCFI193:
 4773              		.cfi_def_cfa_offset 16
 4774 0004 00AF     		add	r7, sp, #0
 4775              	.LCFI194:
 4776              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4777              		.loc 1 3990 25
 4778 0006 0B4B     		ldr	r3, .L297
 4779 0008 1B68     		ldr	r3, [r3]
 4780              		.loc 1 3990 5
 4781 000a 002B     		cmp	r3, #0
 4782 000c 02D1     		bne	.L293
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4783              		.loc 1 3992 12
 4784 000e 0123     		movs	r3, #1
 4785 0010 7B60     		str	r3, [r7, #4]
 4786 0012 08E0     		b	.L294
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 159


 4787              	.L293:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4788              		.loc 1 3996 29
 4789 0014 084B     		ldr	r3, .L297+4
 4790 0016 1B68     		ldr	r3, [r3]
 4791              		.loc 1 3996 6
 4792 0018 002B     		cmp	r3, #0
 4793 001a 02D1     		bne	.L295
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4794              		.loc 1 3998 13
 4795 001c 0223     		movs	r3, #2
 4796 001e 7B60     		str	r3, [r7, #4]
 4797 0020 01E0     		b	.L294
 4798              	.L295:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4799              		.loc 1 4002 13
 4800 0022 0023     		movs	r3, #0
 4801 0024 7B60     		str	r3, [r7, #4]
 4802              	.L294:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4803              		.loc 1 4006 10
 4804 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4805              		.loc 1 4007 2
 4806 0028 1846     		mov	r0, r3
 4807 002a 0C37     		adds	r7, r7, #12
 4808              	.LCFI195:
 4809              		.cfi_def_cfa_offset 4
 4810 002c BD46     		mov	sp, r7
 4811              	.LCFI196:
 4812              		.cfi_def_cfa_register 13
 4813              		@ sp needed
 4814 002e 5DF8047B 		ldr	r7, [sp], #4
 4815              	.LCFI197:
 4816              		.cfi_restore 7
 4817              		.cfi_def_cfa_offset 0
 4818 0032 7047     		bx	lr
 4819              	.L298:
 4820              		.align	2
 4821              	.L297:
 4822 0034 00000000 		.word	xSchedulerRunning
 4823 0038 00000000 		.word	uxSchedulerSuspended
 4824              		.cfi_endproc
 4825              	.LFE43:
 4827              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4828              		.align	1
 4829              		.global	xTaskPriorityInherit
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 160


 4830              		.syntax unified
 4831              		.thumb
 4832              		.thumb_func
 4834              	xTaskPriorityInherit:
 4835              	.LFB44:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4836              		.loc 1 4015 2
 4837              		.cfi_startproc
 4838              		@ args = 0, pretend = 0, frame = 16
 4839              		@ frame_needed = 1, uses_anonymous_args = 0
 4840 0000 80B5     		push	{r7, lr}
 4841              	.LCFI198:
 4842              		.cfi_def_cfa_offset 8
 4843              		.cfi_offset 7, -8
 4844              		.cfi_offset 14, -4
 4845 0002 84B0     		sub	sp, sp, #16
 4846              	.LCFI199:
 4847              		.cfi_def_cfa_offset 24
 4848 0004 00AF     		add	r7, sp, #0
 4849              	.LCFI200:
 4850              		.cfi_def_cfa_register 7
 4851 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4852              		.loc 1 4016 16
 4853 0008 7B68     		ldr	r3, [r7, #4]
 4854 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4855              		.loc 1 4017 13
 4856 000c 0023     		movs	r3, #0
 4857 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4858              		.loc 1 4022 5
 4859 0010 7B68     		ldr	r3, [r7, #4]
 4860 0012 002B     		cmp	r3, #0
 4861 0014 5ED0     		beq	.L300
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 4862              		.loc 1 4027 24
 4863 0016 BB68     		ldr	r3, [r7, #8]
 4864 0018 DA6A     		ldr	r2, [r3, #44]
 4865              		.loc 1 4027 51
 4866 001a 314B     		ldr	r3, .L307
 4867 001c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 161


 4868 001e DB6A     		ldr	r3, [r3, #44]
 4869              		.loc 1 4027 6
 4870 0020 9A42     		cmp	r2, r3
 4871 0022 4ED2     		bcs	.L301
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 4872              		.loc 1 4032 11
 4873 0024 BB68     		ldr	r3, [r7, #8]
 4874 0026 9B69     		ldr	r3, [r3, #24]
 4875              		.loc 1 4032 7
 4876 0028 002B     		cmp	r3, #0
 4877 002a 06DB     		blt	.L302
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 4878              		.loc 1 4034 6
 4879 002c 2C4B     		ldr	r3, .L307
 4880 002e 1B68     		ldr	r3, [r3]
 4881 0030 DB6A     		ldr	r3, [r3, #44]
 4882 0032 C3F10702 		rsb	r2, r3, #7
 4883 0036 BB68     		ldr	r3, [r7, #8]
 4884 0038 9A61     		str	r2, [r3, #24]
 4885              	.L302:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 4886              		.loc 1 4043 9
 4887 003a BB68     		ldr	r3, [r7, #8]
 4888 003c 5969     		ldr	r1, [r3, #20]
 4889 003e BB68     		ldr	r3, [r7, #8]
 4890 0040 DA6A     		ldr	r2, [r3, #44]
 4891 0042 1346     		mov	r3, r2
 4892 0044 9B00     		lsls	r3, r3, #2
 4893 0046 1344     		add	r3, r3, r2
 4894 0048 9B00     		lsls	r3, r3, #2
 4895 004a 264A     		ldr	r2, .L307+4
 4896 004c 1344     		add	r3, r3, r2
 4897              		.loc 1 4043 7
 4898 004e 9942     		cmp	r1, r3
 4899 0050 2FD1     		bne	.L303
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4900              		.loc 1 4045 10
 4901 0052 BB68     		ldr	r3, [r7, #8]
 4902 0054 0433     		adds	r3, r3, #4
 4903 0056 1846     		mov	r0, r3
 4904 0058 FFF7FEFF 		bl	uxListRemove
 4905 005c 0346     		mov	r3, r0
 4906              		.loc 1 4045 8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 162


 4907 005e 002B     		cmp	r3, #0
 4908 0060 0AD1     		bne	.L304
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 4909              		.loc 1 4050 7
 4910 0062 BB68     		ldr	r3, [r7, #8]
 4911 0064 DB6A     		ldr	r3, [r3, #44]
 4912 0066 0122     		movs	r2, #1
 4913 0068 02FA03F3 		lsl	r3, r2, r3
 4914 006c DA43     		mvns	r2, r3
 4915 006e 1E4B     		ldr	r3, .L307+8
 4916 0070 1B68     		ldr	r3, [r3]
 4917 0072 1340     		ands	r3, r3, r2
 4918 0074 1C4A     		ldr	r2, .L307+8
 4919 0076 1360     		str	r3, [r2]
 4920              	.L304:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 4921              		.loc 1 4058 49
 4922 0078 194B     		ldr	r3, .L307
 4923 007a 1B68     		ldr	r3, [r3]
 4924 007c DA6A     		ldr	r2, [r3, #44]
 4925              		.loc 1 4058 35
 4926 007e BB68     		ldr	r3, [r7, #8]
 4927 0080 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4928              		.loc 1 4059 6
 4929 0082 BB68     		ldr	r3, [r7, #8]
 4930 0084 DB6A     		ldr	r3, [r3, #44]
 4931 0086 0122     		movs	r2, #1
 4932 0088 9A40     		lsls	r2, r2, r3
 4933 008a 174B     		ldr	r3, .L307+8
 4934 008c 1B68     		ldr	r3, [r3]
 4935 008e 1343     		orrs	r3, r3, r2
 4936 0090 154A     		ldr	r2, .L307+8
 4937 0092 1360     		str	r3, [r2]
 4938 0094 BB68     		ldr	r3, [r7, #8]
 4939 0096 DA6A     		ldr	r2, [r3, #44]
 4940 0098 1346     		mov	r3, r2
 4941 009a 9B00     		lsls	r3, r3, #2
 4942 009c 1344     		add	r3, r3, r2
 4943 009e 9B00     		lsls	r3, r3, #2
 4944 00a0 104A     		ldr	r2, .L307+4
 4945 00a2 1A44     		add	r2, r2, r3
 4946 00a4 BB68     		ldr	r3, [r7, #8]
 4947 00a6 0433     		adds	r3, r3, #4
 4948 00a8 1946     		mov	r1, r3
 4949 00aa 1046     		mov	r0, r2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 163


 4950 00ac FFF7FEFF 		bl	vListInsertEnd
 4951 00b0 04E0     		b	.L305
 4952              	.L303:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 4953              		.loc 1 4064 49
 4954 00b2 0B4B     		ldr	r3, .L307
 4955 00b4 1B68     		ldr	r3, [r3]
 4956 00b6 DA6A     		ldr	r2, [r3, #44]
 4957              		.loc 1 4064 35
 4958 00b8 BB68     		ldr	r3, [r7, #8]
 4959 00ba DA62     		str	r2, [r3, #44]
 4960              	.L305:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4961              		.loc 1 4070 13
 4962 00bc 0123     		movs	r3, #1
 4963 00be FB60     		str	r3, [r7, #12]
 4964 00c0 08E0     		b	.L300
 4965              	.L301:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 4966              		.loc 1 4074 25
 4967 00c2 BB68     		ldr	r3, [r7, #8]
 4968 00c4 5A6C     		ldr	r2, [r3, #68]
 4969              		.loc 1 4074 56
 4970 00c6 064B     		ldr	r3, .L307
 4971 00c8 1B68     		ldr	r3, [r3]
 4972 00ca DB6A     		ldr	r3, [r3, #44]
 4973              		.loc 1 4074 7
 4974 00cc 9A42     		cmp	r2, r3
 4975 00ce 01D2     		bcs	.L300
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4976              		.loc 1 4083 14
 4977 00d0 0123     		movs	r3, #1
 4978 00d2 FB60     		str	r3, [r7, #12]
 4979              	.L300:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 164


4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4980              		.loc 1 4096 10
 4981 00d4 FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4982              		.loc 1 4097 2
 4983 00d6 1846     		mov	r0, r3
 4984 00d8 1037     		adds	r7, r7, #16
 4985              	.LCFI201:
 4986              		.cfi_def_cfa_offset 8
 4987 00da BD46     		mov	sp, r7
 4988              	.LCFI202:
 4989              		.cfi_def_cfa_register 13
 4990              		@ sp needed
 4991 00dc 80BD     		pop	{r7, pc}
 4992              	.L308:
 4993 00de 00BF     		.align	2
 4994              	.L307:
 4995 00e0 00000000 		.word	pxCurrentTCB
 4996 00e4 00000000 		.word	pxReadyTasksLists
 4997 00e8 00000000 		.word	uxTopReadyPriority
 4998              		.cfi_endproc
 4999              	.LFE44:
 5001              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5002              		.align	1
 5003              		.global	xTaskPriorityDisinherit
 5004              		.syntax unified
 5005              		.thumb
 5006              		.thumb_func
 5008              	xTaskPriorityDisinherit:
 5009              	.LFB45:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5010              		.loc 1 4105 2
 5011              		.cfi_startproc
 5012              		@ args = 0, pretend = 0, frame = 24
 5013              		@ frame_needed = 1, uses_anonymous_args = 0
 5014 0000 80B5     		push	{r7, lr}
 5015              	.LCFI203:
 5016              		.cfi_def_cfa_offset 8
 5017              		.cfi_offset 7, -8
 5018              		.cfi_offset 14, -4
 5019 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 165


 5020              	.LCFI204:
 5021              		.cfi_def_cfa_offset 32
 5022 0004 00AF     		add	r7, sp, #0
 5023              	.LCFI205:
 5024              		.cfi_def_cfa_register 7
 5025 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5026              		.loc 1 4106 16
 5027 0008 7B68     		ldr	r3, [r7, #4]
 5028 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5029              		.loc 1 4107 13
 5030 000c 0023     		movs	r3, #0
 5031 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5032              		.loc 1 4109 5
 5033 0010 7B68     		ldr	r3, [r7, #4]
 5034 0012 002B     		cmp	r3, #0
 5035 0014 6ED0     		beq	.L310
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5036              		.loc 1 4115 4
 5037 0016 3A4B     		ldr	r3, .L317
 5038 0018 1B68     		ldr	r3, [r3]
 5039 001a 3A69     		ldr	r2, [r7, #16]
 5040 001c 9A42     		cmp	r2, r3
 5041 001e 0AD0     		beq	.L311
 5042              	.LBB188:
 5043              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5044              		.loc 2 195 2
 5045              		.syntax unified
 5046              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5047 0020 4FF05003 			mov r3, #80												
 5048 0024 83F31188 		msr basepri, r3											
 5049 0028 BFF36F8F 		isb														
 5050 002c BFF34F8F 		dsb														
 5051              	
 5052              	@ 0 "" 2
 5053              		.thumb
 5054              		.syntax unified
 5055 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5056              		.loc 2 203 1
 5057 0032 00BF     		nop
 5058              	.L312:
 5059              	.LBE189:
 5060              	.LBE188:
 5061              		.loc 1 4115 4 discriminator 1
 5062 0034 FEE7     		b	.L312
 5063              	.L311:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 166


 5064              		.loc 1 4116 4
 5065 0036 3B69     		ldr	r3, [r7, #16]
 5066 0038 9B6C     		ldr	r3, [r3, #72]
 5067 003a 002B     		cmp	r3, #0
 5068 003c 0AD1     		bne	.L313
 5069              	.LBB190:
 5070              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5071              		.loc 2 195 2
 5072              		.syntax unified
 5073              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5074 003e 4FF05003 			mov r3, #80												
 5075 0042 83F31188 		msr basepri, r3											
 5076 0046 BFF36F8F 		isb														
 5077 004a BFF34F8F 		dsb														
 5078              	
 5079              	@ 0 "" 2
 5080              		.thumb
 5081              		.syntax unified
 5082 004e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5083              		.loc 2 203 1
 5084 0050 00BF     		nop
 5085              	.L314:
 5086              	.LBE191:
 5087              	.LBE190:
 5088              		.loc 1 4116 4 discriminator 2
 5089 0052 FEE7     		b	.L314
 5090              	.L313:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5091              		.loc 1 4117 11
 5092 0054 3B69     		ldr	r3, [r7, #16]
 5093 0056 9B6C     		ldr	r3, [r3, #72]
 5094              		.loc 1 4117 28
 5095 0058 5A1E     		subs	r2, r3, #1
 5096 005a 3B69     		ldr	r3, [r7, #16]
 5097 005c 9A64     		str	r2, [r3, #72]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5098              		.loc 1 4121 13
 5099 005e 3B69     		ldr	r3, [r7, #16]
 5100 0060 DA6A     		ldr	r2, [r3, #44]
 5101              		.loc 1 4121 34
 5102 0062 3B69     		ldr	r3, [r7, #16]
 5103 0064 5B6C     		ldr	r3, [r3, #68]
 5104              		.loc 1 4121 6
 5105 0066 9A42     		cmp	r2, r3
 5106 0068 44D0     		beq	.L310
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5107              		.loc 1 4124 14
 5108 006a 3B69     		ldr	r3, [r7, #16]
 5109 006c 9B6C     		ldr	r3, [r3, #72]
 5110              		.loc 1 4124 7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 167


 5111 006e 002B     		cmp	r3, #0
 5112 0070 40D1     		bne	.L310
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5113              		.loc 1 4131 10
 5114 0072 3B69     		ldr	r3, [r7, #16]
 5115 0074 0433     		adds	r3, r3, #4
 5116 0076 1846     		mov	r0, r3
 5117 0078 FFF7FEFF 		bl	uxListRemove
 5118 007c 0346     		mov	r3, r0
 5119              		.loc 1 4131 8
 5120 007e 002B     		cmp	r3, #0
 5121 0080 15D1     		bne	.L315
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5122              		.loc 1 4133 7
 5123 0082 3B69     		ldr	r3, [r7, #16]
 5124 0084 DA6A     		ldr	r2, [r3, #44]
 5125 0086 1F49     		ldr	r1, .L317+4
 5126 0088 1346     		mov	r3, r2
 5127 008a 9B00     		lsls	r3, r3, #2
 5128 008c 1344     		add	r3, r3, r2
 5129 008e 9B00     		lsls	r3, r3, #2
 5130 0090 0B44     		add	r3, r3, r1
 5131 0092 1B68     		ldr	r3, [r3]
 5132 0094 002B     		cmp	r3, #0
 5133 0096 0AD1     		bne	.L315
 5134              		.loc 1 4133 7 is_stmt 0 discriminator 1
 5135 0098 3B69     		ldr	r3, [r7, #16]
 5136 009a DB6A     		ldr	r3, [r3, #44]
 5137 009c 0122     		movs	r2, #1
 5138 009e 02FA03F3 		lsl	r3, r2, r3
 5139 00a2 DA43     		mvns	r2, r3
 5140 00a4 184B     		ldr	r3, .L317+8
 5141 00a6 1B68     		ldr	r3, [r3]
 5142 00a8 1340     		ands	r3, r3, r2
 5143 00aa 174A     		ldr	r2, .L317+8
 5144 00ac 1360     		str	r3, [r2]
 5145              	.L315:
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5146              		.loc 1 4143 31 is_stmt 1
 5147 00ae 3B69     		ldr	r3, [r7, #16]
 5148 00b0 5A6C     		ldr	r2, [r3, #68]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 168


 5149              		.loc 1 4143 24
 5150 00b2 3B69     		ldr	r3, [r7, #16]
 5151 00b4 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5152              		.loc 1 4148 6
 5153 00b6 3B69     		ldr	r3, [r7, #16]
 5154 00b8 DB6A     		ldr	r3, [r3, #44]
 5155 00ba C3F10702 		rsb	r2, r3, #7
 5156 00be 3B69     		ldr	r3, [r7, #16]
 5157 00c0 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5158              		.loc 1 4149 6
 5159 00c2 3B69     		ldr	r3, [r7, #16]
 5160 00c4 DB6A     		ldr	r3, [r3, #44]
 5161 00c6 0122     		movs	r2, #1
 5162 00c8 9A40     		lsls	r2, r2, r3
 5163 00ca 0F4B     		ldr	r3, .L317+8
 5164 00cc 1B68     		ldr	r3, [r3]
 5165 00ce 1343     		orrs	r3, r3, r2
 5166 00d0 0D4A     		ldr	r2, .L317+8
 5167 00d2 1360     		str	r3, [r2]
 5168 00d4 3B69     		ldr	r3, [r7, #16]
 5169 00d6 DA6A     		ldr	r2, [r3, #44]
 5170 00d8 1346     		mov	r3, r2
 5171 00da 9B00     		lsls	r3, r3, #2
 5172 00dc 1344     		add	r3, r3, r2
 5173 00de 9B00     		lsls	r3, r3, #2
 5174 00e0 084A     		ldr	r2, .L317+4
 5175 00e2 1A44     		add	r2, r2, r3
 5176 00e4 3B69     		ldr	r3, [r7, #16]
 5177 00e6 0433     		adds	r3, r3, #4
 5178 00e8 1946     		mov	r1, r3
 5179 00ea 1046     		mov	r0, r2
 5180 00ec FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 5181              		.loc 1 4159 14
 5182 00f0 0123     		movs	r3, #1
 5183 00f2 7B61     		str	r3, [r7, #20]
 5184              	.L310:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 169


4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5185              		.loc 1 4176 10
 5186 00f4 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5187              		.loc 1 4177 2
 5188 00f6 1846     		mov	r0, r3
 5189 00f8 1837     		adds	r7, r7, #24
 5190              	.LCFI206:
 5191              		.cfi_def_cfa_offset 8
 5192 00fa BD46     		mov	sp, r7
 5193              	.LCFI207:
 5194              		.cfi_def_cfa_register 13
 5195              		@ sp needed
 5196 00fc 80BD     		pop	{r7, pc}
 5197              	.L318:
 5198 00fe 00BF     		.align	2
 5199              	.L317:
 5200 0100 00000000 		.word	pxCurrentTCB
 5201 0104 00000000 		.word	pxReadyTasksLists
 5202 0108 00000000 		.word	uxTopReadyPriority
 5203              		.cfi_endproc
 5204              	.LFE45:
 5206              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5207              		.align	1
 5208              		.global	vTaskPriorityDisinheritAfterTimeout
 5209              		.syntax unified
 5210              		.thumb
 5211              		.thumb_func
 5213              	vTaskPriorityDisinheritAfterTimeout:
 5214              	.LFB46:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5215              		.loc 1 4185 2
 5216              		.cfi_startproc
 5217              		@ args = 0, pretend = 0, frame = 32
 5218              		@ frame_needed = 1, uses_anonymous_args = 0
 5219 0000 80B5     		push	{r7, lr}
 5220              	.LCFI208:
 5221              		.cfi_def_cfa_offset 8
 5222              		.cfi_offset 7, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 170


 5223              		.cfi_offset 14, -4
 5224 0002 88B0     		sub	sp, sp, #32
 5225              	.LCFI209:
 5226              		.cfi_def_cfa_offset 40
 5227 0004 00AF     		add	r7, sp, #0
 5228              	.LCFI210:
 5229              		.cfi_def_cfa_register 7
 5230 0006 7860     		str	r0, [r7, #4]
 5231 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5232              		.loc 1 4186 16
 5233 000a 7B68     		ldr	r3, [r7, #4]
 5234 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5235              		.loc 1 4188 20
 5236 000e 0123     		movs	r3, #1
 5237 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5238              		.loc 1 4190 5
 5239 0012 7B68     		ldr	r3, [r7, #4]
 5240 0014 002B     		cmp	r3, #0
 5241 0016 77D0     		beq	.L329
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5242              		.loc 1 4194 4
 5243 0018 BB69     		ldr	r3, [r7, #24]
 5244 001a 9B6C     		ldr	r3, [r3, #72]
 5245 001c 002B     		cmp	r3, #0
 5246 001e 0AD1     		bne	.L321
 5247              	.LBB192:
 5248              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5249              		.loc 2 195 2
 5250              		.syntax unified
 5251              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5252 0020 4FF05003 			mov r3, #80												
 5253 0024 83F31188 		msr basepri, r3											
 5254 0028 BFF36F8F 		isb														
 5255 002c BFF34F8F 		dsb														
 5256              	
 5257              	@ 0 "" 2
 5258              		.thumb
 5259              		.syntax unified
 5260 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5261              		.loc 2 203 1
 5262 0032 00BF     		nop
 5263              	.L322:
 5264              	.LBE193:
 5265              	.LBE192:
 5266              		.loc 1 4194 4 discriminator 1
 5267 0034 FEE7     		b	.L322
 5268              	.L321:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 171


4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 5269              		.loc 1 4200 13
 5270 0036 BB69     		ldr	r3, [r7, #24]
 5271 0038 5B6C     		ldr	r3, [r3, #68]
 5272              		.loc 1 4200 6
 5273 003a 3A68     		ldr	r2, [r7]
 5274 003c 9A42     		cmp	r2, r3
 5275 003e 02D9     		bls	.L323
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 5276              		.loc 1 4202 21
 5277 0040 3B68     		ldr	r3, [r7]
 5278 0042 FB61     		str	r3, [r7, #28]
 5279 0044 02E0     		b	.L324
 5280              	.L323:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 5281              		.loc 1 4206 21
 5282 0046 BB69     		ldr	r3, [r7, #24]
 5283 0048 5B6C     		ldr	r3, [r3, #68]
 5284 004a FB61     		str	r3, [r7, #28]
 5285              	.L324:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 5286              		.loc 1 4210 13
 5287 004c BB69     		ldr	r3, [r7, #24]
 5288 004e DB6A     		ldr	r3, [r3, #44]
 5289              		.loc 1 4210 6
 5290 0050 FA69     		ldr	r2, [r7, #28]
 5291 0052 9A42     		cmp	r2, r3
 5292 0054 58D0     		beq	.L329
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 5293              		.loc 1 4216 14
 5294 0056 BB69     		ldr	r3, [r7, #24]
 5295 0058 9B6C     		ldr	r3, [r3, #72]
 5296              		.loc 1 4216 7
 5297 005a 7A69     		ldr	r2, [r7, #20]
 5298 005c 9A42     		cmp	r2, r3
 5299 005e 53D1     		bne	.L329
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 172


4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 5300              		.loc 1 4221 6
 5301 0060 2B4B     		ldr	r3, .L330
 5302 0062 1B68     		ldr	r3, [r3]
 5303 0064 BA69     		ldr	r2, [r7, #24]
 5304 0066 9A42     		cmp	r2, r3
 5305 0068 0AD1     		bne	.L325
 5306              	.LBB194:
 5307              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5308              		.loc 2 195 2
 5309              		.syntax unified
 5310              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5311 006a 4FF05003 			mov r3, #80												
 5312 006e 83F31188 		msr basepri, r3											
 5313 0072 BFF36F8F 		isb														
 5314 0076 BFF34F8F 		dsb														
 5315              	
 5316              	@ 0 "" 2
 5317              		.thumb
 5318              		.syntax unified
 5319 007a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5320              		.loc 2 203 1
 5321 007c 00BF     		nop
 5322              	.L326:
 5323              	.LBE195:
 5324              	.LBE194:
 5325              		.loc 1 4221 6 discriminator 2
 5326 007e FEE7     		b	.L326
 5327              	.L325:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5328              		.loc 1 4227 28
 5329 0080 BB69     		ldr	r3, [r7, #24]
 5330 0082 DB6A     		ldr	r3, [r3, #44]
 5331 0084 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 5332              		.loc 1 4228 24
 5333 0086 BB69     		ldr	r3, [r7, #24]
 5334 0088 FA69     		ldr	r2, [r7, #28]
 5335 008a DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 5336              		.loc 1 4232 12
 5337 008c BB69     		ldr	r3, [r7, #24]
 5338 008e 9B69     		ldr	r3, [r3, #24]
 5339              		.loc 1 4232 8
 5340 0090 002B     		cmp	r3, #0
 5341 0092 04DB     		blt	.L327
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 173


4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 5342              		.loc 1 4234 7
 5343 0094 FB69     		ldr	r3, [r7, #28]
 5344 0096 C3F10702 		rsb	r2, r3, #7
 5345 009a BB69     		ldr	r3, [r7, #24]
 5346 009c 9A61     		str	r2, [r3, #24]
 5347              	.L327:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 5348              		.loc 1 4247 10
 5349 009e BB69     		ldr	r3, [r7, #24]
 5350 00a0 5969     		ldr	r1, [r3, #20]
 5351 00a2 3A69     		ldr	r2, [r7, #16]
 5352 00a4 1346     		mov	r3, r2
 5353 00a6 9B00     		lsls	r3, r3, #2
 5354 00a8 1344     		add	r3, r3, r2
 5355 00aa 9B00     		lsls	r3, r3, #2
 5356 00ac 194A     		ldr	r2, .L330+4
 5357 00ae 1344     		add	r3, r3, r2
 5358              		.loc 1 4247 8
 5359 00b0 9942     		cmp	r1, r3
 5360 00b2 29D1     		bne	.L329
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5361              		.loc 1 4249 11
 5362 00b4 BB69     		ldr	r3, [r7, #24]
 5363 00b6 0433     		adds	r3, r3, #4
 5364 00b8 1846     		mov	r0, r3
 5365 00ba FFF7FEFF 		bl	uxListRemove
 5366 00be 0346     		mov	r3, r0
 5367              		.loc 1 4249 9
 5368 00c0 002B     		cmp	r3, #0
 5369 00c2 0AD1     		bne	.L328
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 5370              		.loc 1 4254 8
 5371 00c4 BB69     		ldr	r3, [r7, #24]
 5372 00c6 DB6A     		ldr	r3, [r3, #44]
 5373 00c8 0122     		movs	r2, #1
 5374 00ca 02FA03F3 		lsl	r3, r2, r3
 5375 00ce DA43     		mvns	r2, r3
 5376 00d0 114B     		ldr	r3, .L330+8
 5377 00d2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 174


 5378 00d4 1340     		ands	r3, r3, r2
 5379 00d6 104A     		ldr	r2, .L330+8
 5380 00d8 1360     		str	r3, [r2]
 5381              	.L328:
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 5382              		.loc 1 4261 7
 5383 00da BB69     		ldr	r3, [r7, #24]
 5384 00dc DB6A     		ldr	r3, [r3, #44]
 5385 00de 0122     		movs	r2, #1
 5386 00e0 9A40     		lsls	r2, r2, r3
 5387 00e2 0D4B     		ldr	r3, .L330+8
 5388 00e4 1B68     		ldr	r3, [r3]
 5389 00e6 1343     		orrs	r3, r3, r2
 5390 00e8 0B4A     		ldr	r2, .L330+8
 5391 00ea 1360     		str	r3, [r2]
 5392 00ec BB69     		ldr	r3, [r7, #24]
 5393 00ee DA6A     		ldr	r2, [r3, #44]
 5394 00f0 1346     		mov	r3, r2
 5395 00f2 9B00     		lsls	r3, r3, #2
 5396 00f4 1344     		add	r3, r3, r2
 5397 00f6 9B00     		lsls	r3, r3, #2
 5398 00f8 064A     		ldr	r2, .L330+4
 5399 00fa 1A44     		add	r2, r2, r3
 5400 00fc BB69     		ldr	r3, [r7, #24]
 5401 00fe 0433     		adds	r3, r3, #4
 5402 0100 1946     		mov	r1, r3
 5403 0102 1046     		mov	r0, r2
 5404 0104 FFF7FEFF 		bl	vListInsertEnd
 5405              	.L329:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5406              		.loc 1 4282 2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 175


 5407 0108 00BF     		nop
 5408 010a 2037     		adds	r7, r7, #32
 5409              	.LCFI211:
 5410              		.cfi_def_cfa_offset 8
 5411 010c BD46     		mov	sp, r7
 5412              	.LCFI212:
 5413              		.cfi_def_cfa_register 13
 5414              		@ sp needed
 5415 010e 80BD     		pop	{r7, pc}
 5416              	.L331:
 5417              		.align	2
 5418              	.L330:
 5419 0110 00000000 		.word	pxCurrentTCB
 5420 0114 00000000 		.word	pxReadyTasksLists
 5421 0118 00000000 		.word	uxTopReadyPriority
 5422              		.cfi_endproc
 5423              	.LFE46:
 5425              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5426              		.align	1
 5427              		.global	uxTaskResetEventItemValue
 5428              		.syntax unified
 5429              		.thumb
 5430              		.thumb_func
 5432              	uxTaskResetEventItemValue:
 5433              	.LFB47:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 176


4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 177


4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 178


4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 179


4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 180


4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 181


4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5434              		.loc 1 4603 1
 5435              		.cfi_startproc
 5436              		@ args = 0, pretend = 0, frame = 8
 5437              		@ frame_needed = 1, uses_anonymous_args = 0
 5438              		@ link register save eliminated.
 5439 0000 80B4     		push	{r7}
 5440              	.LCFI213:
 5441              		.cfi_def_cfa_offset 4
 5442              		.cfi_offset 7, -4
 5443 0002 83B0     		sub	sp, sp, #12
 5444              	.LCFI214:
 5445              		.cfi_def_cfa_offset 16
 5446 0004 00AF     		add	r7, sp, #0
 5447              	.LCFI215:
 5448              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5449              		.loc 1 4606 13
 5450 0006 094B     		ldr	r3, .L334
 5451 0008 1B68     		ldr	r3, [r3]
 5452              		.loc 1 4606 11
 5453 000a 9B69     		ldr	r3, [r3, #24]
 5454 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5455              		.loc 1 4610 2
 5456 000e 074B     		ldr	r3, .L334
 5457 0010 1B68     		ldr	r3, [r3]
 5458 0012 DA6A     		ldr	r2, [r3, #44]
 5459 0014 054B     		ldr	r3, .L334
 5460 0016 1B68     		ldr	r3, [r3]
 5461 0018 C2F10702 		rsb	r2, r2, #7
 5462 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 5463              		.loc 1 4612 9
 5464 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5465              		.loc 1 4613 1
 5466 0020 1846     		mov	r0, r3
 5467 0022 0C37     		adds	r7, r7, #12
 5468              	.LCFI216:
 5469              		.cfi_def_cfa_offset 4
 5470 0024 BD46     		mov	sp, r7
 5471              	.LCFI217:
 5472              		.cfi_def_cfa_register 13
 5473              		@ sp needed
 5474 0026 5DF8047B 		ldr	r7, [sp], #4
 5475              	.LCFI218:
 5476              		.cfi_restore 7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 182


 5477              		.cfi_def_cfa_offset 0
 5478 002a 7047     		bx	lr
 5479              	.L335:
 5480              		.align	2
 5481              	.L334:
 5482 002c 00000000 		.word	pxCurrentTCB
 5483              		.cfi_endproc
 5484              	.LFE47:
 5486              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5487              		.align	1
 5488              		.global	pvTaskIncrementMutexHeldCount
 5489              		.syntax unified
 5490              		.thumb
 5491              		.thumb_func
 5493              	pvTaskIncrementMutexHeldCount:
 5494              	.LFB48:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5495              		.loc 1 4619 2
 5496              		.cfi_startproc
 5497              		@ args = 0, pretend = 0, frame = 0
 5498              		@ frame_needed = 1, uses_anonymous_args = 0
 5499              		@ link register save eliminated.
 5500 0000 80B4     		push	{r7}
 5501              	.LCFI219:
 5502              		.cfi_def_cfa_offset 4
 5503              		.cfi_offset 7, -4
 5504 0002 00AF     		add	r7, sp, #0
 5505              	.LCFI220:
 5506              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5507              		.loc 1 4622 20
 5508 0004 074B     		ldr	r3, .L339
 5509 0006 1B68     		ldr	r3, [r3]
 5510              		.loc 1 4622 5
 5511 0008 002B     		cmp	r3, #0
 5512 000a 04D0     		beq	.L337
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5513              		.loc 1 4624 18
 5514 000c 054B     		ldr	r3, .L339
 5515 000e 1B68     		ldr	r3, [r3]
 5516 0010 9A6C     		ldr	r2, [r3, #72]
 5517              		.loc 1 4624 35
 5518 0012 0132     		adds	r2, r2, #1
 5519 0014 9A64     		str	r2, [r3, #72]
 5520              	.L337:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 5521              		.loc 1 4627 10
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 183


 5522 0016 034B     		ldr	r3, .L339
 5523 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5524              		.loc 1 4628 2
 5525 001a 1846     		mov	r0, r3
 5526 001c BD46     		mov	sp, r7
 5527              	.LCFI221:
 5528              		.cfi_def_cfa_register 13
 5529              		@ sp needed
 5530 001e 5DF8047B 		ldr	r7, [sp], #4
 5531              	.LCFI222:
 5532              		.cfi_restore 7
 5533              		.cfi_def_cfa_offset 0
 5534 0022 7047     		bx	lr
 5535              	.L340:
 5536              		.align	2
 5537              	.L339:
 5538 0024 00000000 		.word	pxCurrentTCB
 5539              		.cfi_endproc
 5540              	.LFE48:
 5542              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5543              		.align	1
 5544              		.global	ulTaskNotifyTake
 5545              		.syntax unified
 5546              		.thumb
 5547              		.thumb_func
 5549              	ulTaskNotifyTake:
 5550              	.LFB49:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5551              		.loc 1 4636 2
 5552              		.cfi_startproc
 5553              		@ args = 0, pretend = 0, frame = 16
 5554              		@ frame_needed = 1, uses_anonymous_args = 0
 5555 0000 80B5     		push	{r7, lr}
 5556              	.LCFI223:
 5557              		.cfi_def_cfa_offset 8
 5558              		.cfi_offset 7, -8
 5559              		.cfi_offset 14, -4
 5560 0002 84B0     		sub	sp, sp, #16
 5561              	.LCFI224:
 5562              		.cfi_def_cfa_offset 24
 5563 0004 00AF     		add	r7, sp, #0
 5564              	.LCFI225:
 5565              		.cfi_def_cfa_register 7
 5566 0006 7860     		str	r0, [r7, #4]
 5567 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5568              		.loc 1 4639 3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 184


 5569 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5570              		.loc 1 4642 20
 5571 000e 1E4B     		ldr	r3, .L346
 5572 0010 1B68     		ldr	r3, [r3]
 5573 0012 DB6C     		ldr	r3, [r3, #76]
 5574              		.loc 1 4642 6
 5575 0014 002B     		cmp	r3, #0
 5576 0016 13D1     		bne	.L342
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5577              		.loc 1 4645 17
 5578 0018 1B4B     		ldr	r3, .L346
 5579 001a 1B68     		ldr	r3, [r3]
 5580              		.loc 1 4645 33
 5581 001c 0122     		movs	r2, #1
 5582 001e 83F85020 		strb	r2, [r3, #80]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5583              		.loc 1 4647 7
 5584 0022 3B68     		ldr	r3, [r7]
 5585 0024 002B     		cmp	r3, #0
 5586 0026 0BD0     		beq	.L342
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5587              		.loc 1 4649 6
 5588 0028 0121     		movs	r1, #1
 5589 002a 3868     		ldr	r0, [r7]
 5590 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5591              		.loc 1 4656 6
 5592 0030 164B     		ldr	r3, .L346+4
 5593 0032 4FF08052 		mov	r2, #268435456
 5594 0036 1A60     		str	r2, [r3]
 5595              		.syntax unified
 5596              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5597 0038 BFF34F8F 		dsb
 5598              	@ 0 "" 2
 5599              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5600 003c BFF36F8F 		isb
 5601              	@ 0 "" 2
 5602              		.thumb
 5603              		.syntax unified
 5604              	.L342:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 185


4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5605              		.loc 1 4668 3
 5606 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5607              		.loc 1 4670 3
 5608 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5609              		.loc 1 4673 27
 5610 0048 0F4B     		ldr	r3, .L346
 5611 004a 1B68     		ldr	r3, [r3]
 5612              		.loc 1 4673 13
 5613 004c DB6C     		ldr	r3, [r3, #76]
 5614 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 5615              		.loc 1 4675 6
 5616 0050 FB68     		ldr	r3, [r7, #12]
 5617 0052 002B     		cmp	r3, #0
 5618 0054 0CD0     		beq	.L343
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5619              		.loc 1 4677 7
 5620 0056 7B68     		ldr	r3, [r7, #4]
 5621 0058 002B     		cmp	r3, #0
 5622 005a 04D0     		beq	.L344
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5623              		.loc 1 4679 18
 5624 005c 0A4B     		ldr	r3, .L346
 5625 005e 1B68     		ldr	r3, [r3]
 5626              		.loc 1 4679 36
 5627 0060 0022     		movs	r2, #0
 5628 0062 DA64     		str	r2, [r3, #76]
 5629 0064 04E0     		b	.L343
 5630              	.L344:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 5631              		.loc 1 4683 18
 5632 0066 084B     		ldr	r3, .L346
 5633 0068 1B68     		ldr	r3, [r3]
 5634              		.loc 1 4683 47
 5635 006a FA68     		ldr	r2, [r7, #12]
 5636 006c 013A     		subs	r2, r2, #1
 5637              		.loc 1 4683 36
 5638 006e DA64     		str	r2, [r3, #76]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 186


 5639              	.L343:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5640              		.loc 1 4691 16
 5641 0070 054B     		ldr	r3, .L346
 5642 0072 1B68     		ldr	r3, [r3]
 5643              		.loc 1 4691 32
 5644 0074 0022     		movs	r2, #0
 5645 0076 83F85020 		strb	r2, [r3, #80]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5646              		.loc 1 4693 3
 5647 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 5648              		.loc 1 4695 10
 5649 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5650              		.loc 1 4696 2
 5651 0080 1846     		mov	r0, r3
 5652 0082 1037     		adds	r7, r7, #16
 5653              	.LCFI226:
 5654              		.cfi_def_cfa_offset 8
 5655 0084 BD46     		mov	sp, r7
 5656              	.LCFI227:
 5657              		.cfi_def_cfa_register 13
 5658              		@ sp needed
 5659 0086 80BD     		pop	{r7, pc}
 5660              	.L347:
 5661              		.align	2
 5662              	.L346:
 5663 0088 00000000 		.word	pxCurrentTCB
 5664 008c 04ED00E0 		.word	-536810236
 5665              		.cfi_endproc
 5666              	.LFE49:
 5668              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5669              		.align	1
 5670              		.global	xTaskNotifyWait
 5671              		.syntax unified
 5672              		.thumb
 5673              		.thumb_func
 5675              	xTaskNotifyWait:
 5676              	.LFB50:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 187


 5677              		.loc 1 4704 2
 5678              		.cfi_startproc
 5679              		@ args = 0, pretend = 0, frame = 24
 5680              		@ frame_needed = 1, uses_anonymous_args = 0
 5681 0000 80B5     		push	{r7, lr}
 5682              	.LCFI228:
 5683              		.cfi_def_cfa_offset 8
 5684              		.cfi_offset 7, -8
 5685              		.cfi_offset 14, -4
 5686 0002 86B0     		sub	sp, sp, #24
 5687              	.LCFI229:
 5688              		.cfi_def_cfa_offset 32
 5689 0004 00AF     		add	r7, sp, #0
 5690              	.LCFI230:
 5691              		.cfi_def_cfa_register 7
 5692 0006 F860     		str	r0, [r7, #12]
 5693 0008 B960     		str	r1, [r7, #8]
 5694 000a 7A60     		str	r2, [r7, #4]
 5695 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5696              		.loc 1 4707 3
 5697 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5698              		.loc 1 4710 20
 5699 0012 264B     		ldr	r3, .L354
 5700 0014 1B68     		ldr	r3, [r3]
 5701 0016 93F85030 		ldrb	r3, [r3, #80]
 5702 001a DBB2     		uxtb	r3, r3
 5703              		.loc 1 4710 6
 5704 001c 022B     		cmp	r3, #2
 5705 001e 1AD0     		beq	.L349
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5706              		.loc 1 4715 35
 5707 0020 224B     		ldr	r3, .L354
 5708 0022 1B68     		ldr	r3, [r3]
 5709 0024 D96C     		ldr	r1, [r3, #76]
 5710              		.loc 1 4715 38
 5711 0026 FA68     		ldr	r2, [r7, #12]
 5712 0028 D243     		mvns	r2, r2
 5713              		.loc 1 4715 35
 5714 002a 0A40     		ands	r2, r2, r1
 5715 002c DA64     		str	r2, [r3, #76]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5716              		.loc 1 4718 17
 5717 002e 1F4B     		ldr	r3, .L354
 5718 0030 1B68     		ldr	r3, [r3]
 5719              		.loc 1 4718 33
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 188


 5720 0032 0122     		movs	r2, #1
 5721 0034 83F85020 		strb	r2, [r3, #80]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5722              		.loc 1 4720 7
 5723 0038 3B68     		ldr	r3, [r7]
 5724 003a 002B     		cmp	r3, #0
 5725 003c 0BD0     		beq	.L349
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5726              		.loc 1 4722 6
 5727 003e 0121     		movs	r1, #1
 5728 0040 3868     		ldr	r0, [r7]
 5729 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5730              		.loc 1 4729 6
 5731 0046 1A4B     		ldr	r3, .L354+4
 5732 0048 4FF08052 		mov	r2, #268435456
 5733 004c 1A60     		str	r2, [r3]
 5734              		.syntax unified
 5735              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5736 004e BFF34F8F 		dsb
 5737              	@ 0 "" 2
 5738              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5739 0052 BFF36F8F 		isb
 5740              	@ 0 "" 2
 5741              		.thumb
 5742              		.syntax unified
 5743              	.L349:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5744              		.loc 1 4741 3
 5745 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5746              		.loc 1 4743 3
 5747 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 189


 5748              		.loc 1 4747 6
 5749 005e 7B68     		ldr	r3, [r7, #4]
 5750 0060 002B     		cmp	r3, #0
 5751 0062 04D0     		beq	.L350
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5752              		.loc 1 4751 41
 5753 0064 114B     		ldr	r3, .L354
 5754 0066 1B68     		ldr	r3, [r3]
 5755 0068 DA6C     		ldr	r2, [r3, #76]
 5756              		.loc 1 4751 27
 5757 006a 7B68     		ldr	r3, [r7, #4]
 5758 006c 1A60     		str	r2, [r3]
 5759              	.L350:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5760              		.loc 1 4758 20
 5761 006e 0F4B     		ldr	r3, .L354
 5762 0070 1B68     		ldr	r3, [r3]
 5763 0072 93F85030 		ldrb	r3, [r3, #80]
 5764 0076 DBB2     		uxtb	r3, r3
 5765              		.loc 1 4758 6
 5766 0078 022B     		cmp	r3, #2
 5767 007a 02D0     		beq	.L351
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5768              		.loc 1 4761 13
 5769 007c 0023     		movs	r3, #0
 5770 007e 7B61     		str	r3, [r7, #20]
 5771 0080 08E0     		b	.L352
 5772              	.L351:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5773              		.loc 1 4767 35
 5774 0082 0A4B     		ldr	r3, .L354
 5775 0084 1B68     		ldr	r3, [r3]
 5776 0086 D96C     		ldr	r1, [r3, #76]
 5777              		.loc 1 4767 38
 5778 0088 BA68     		ldr	r2, [r7, #8]
 5779 008a D243     		mvns	r2, r2
 5780              		.loc 1 4767 35
 5781 008c 0A40     		ands	r2, r2, r1
 5782 008e DA64     		str	r2, [r3, #76]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5783              		.loc 1 4768 13
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 190


 5784 0090 0123     		movs	r3, #1
 5785 0092 7B61     		str	r3, [r7, #20]
 5786              	.L352:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5787              		.loc 1 4771 16
 5788 0094 054B     		ldr	r3, .L354
 5789 0096 1B68     		ldr	r3, [r3]
 5790              		.loc 1 4771 32
 5791 0098 0022     		movs	r2, #0
 5792 009a 83F85020 		strb	r2, [r3, #80]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5793              		.loc 1 4773 3
 5794 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5795              		.loc 1 4775 10
 5796 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5797              		.loc 1 4776 2
 5798 00a4 1846     		mov	r0, r3
 5799 00a6 1837     		adds	r7, r7, #24
 5800              	.LCFI231:
 5801              		.cfi_def_cfa_offset 8
 5802 00a8 BD46     		mov	sp, r7
 5803              	.LCFI232:
 5804              		.cfi_def_cfa_register 13
 5805              		@ sp needed
 5806 00aa 80BD     		pop	{r7, pc}
 5807              	.L355:
 5808              		.align	2
 5809              	.L354:
 5810 00ac 00000000 		.word	pxCurrentTCB
 5811 00b0 04ED00E0 		.word	-536810236
 5812              		.cfi_endproc
 5813              	.LFE50:
 5815              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5816              		.align	1
 5817              		.global	xTaskGenericNotify
 5818              		.syntax unified
 5819              		.thumb
 5820              		.thumb_func
 5822              	xTaskGenericNotify:
 5823              	.LFB51:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5824              		.loc 1 4784 2
 5825              		.cfi_startproc
 5826              		@ args = 0, pretend = 0, frame = 40
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 191


 5827              		@ frame_needed = 1, uses_anonymous_args = 0
 5828 0000 80B5     		push	{r7, lr}
 5829              	.LCFI233:
 5830              		.cfi_def_cfa_offset 8
 5831              		.cfi_offset 7, -8
 5832              		.cfi_offset 14, -4
 5833 0002 8AB0     		sub	sp, sp, #40
 5834              	.LCFI234:
 5835              		.cfi_def_cfa_offset 48
 5836 0004 00AF     		add	r7, sp, #0
 5837              	.LCFI235:
 5838              		.cfi_def_cfa_register 7
 5839 0006 F860     		str	r0, [r7, #12]
 5840 0008 B960     		str	r1, [r7, #8]
 5841 000a 3B60     		str	r3, [r7]
 5842 000c 1346     		mov	r3, r2
 5843 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5844              		.loc 1 4786 13
 5845 0010 0123     		movs	r3, #1
 5846 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5847              		.loc 1 4789 3
 5848 0014 FB68     		ldr	r3, [r7, #12]
 5849 0016 002B     		cmp	r3, #0
 5850 0018 0AD1     		bne	.L357
 5851              	.LBB196:
 5852              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5853              		.loc 2 195 2
 5854              		.syntax unified
 5855              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5856 001a 4FF05003 			mov r3, #80												
 5857 001e 83F31188 		msr basepri, r3											
 5858 0022 BFF36F8F 		isb														
 5859 0026 BFF34F8F 		dsb														
 5860              	
 5861              	@ 0 "" 2
 5862              		.thumb
 5863              		.syntax unified
 5864 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5865              		.loc 2 203 1
 5866 002c 00BF     		nop
 5867              	.L358:
 5868              	.LBE197:
 5869              	.LBE196:
 5870              		.loc 1 4789 3 discriminator 1
 5871 002e FEE7     		b	.L358
 5872              	.L357:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5873              		.loc 1 4790 9
 5874 0030 FB68     		ldr	r3, [r7, #12]
 5875 0032 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 192


4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5876              		.loc 1 4792 3
 5877 0034 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5878              		.loc 1 4794 6
 5879 0038 3B68     		ldr	r3, [r7]
 5880 003a 002B     		cmp	r3, #0
 5881 003c 03D0     		beq	.L359
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5882              		.loc 1 4796 42
 5883 003e 3B6A     		ldr	r3, [r7, #32]
 5884 0040 DA6C     		ldr	r2, [r3, #76]
 5885              		.loc 1 4796 35
 5886 0042 3B68     		ldr	r3, [r7]
 5887 0044 1A60     		str	r2, [r3]
 5888              	.L359:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5889              		.loc 1 4799 26
 5890 0046 3B6A     		ldr	r3, [r7, #32]
 5891 0048 93F85030 		ldrb	r3, [r3, #80]
 5892 004c FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5893              		.loc 1 4801 25
 5894 004e 3B6A     		ldr	r3, [r7, #32]
 5895 0050 0222     		movs	r2, #2
 5896 0052 83F85020 		strb	r2, [r3, #80]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5897              		.loc 1 4803 4
 5898 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5899 0058 042B     		cmp	r3, #4
 5900 005a 28D8     		bhi	.L360
 5901 005c 01A2     		adr	r2, .L362
 5902 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5903 0062 00BF     		.p2align 2
 5904              	.L362:
 5905 0064 CF000000 		.word	.L376+1
 5906 0068 79000000 		.word	.L365+1
 5907 006c 87000000 		.word	.L364+1
 5908 0070 93000000 		.word	.L363+1
 5909 0074 9B000000 		.word	.L361+1
 5910              		.p2align 1
 5911              	.L365:
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5912              		.loc 1 4806 29
 5913 0078 3B6A     		ldr	r3, [r7, #32]
 5914 007a DA6C     		ldr	r2, [r3, #76]
 5915 007c BB68     		ldr	r3, [r7, #8]
 5916 007e 1A43     		orrs	r2, r2, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 193


 5917 0080 3B6A     		ldr	r3, [r7, #32]
 5918 0082 DA64     		str	r2, [r3, #76]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5919              		.loc 1 4807 6
 5920 0084 26E0     		b	.L367
 5921              	.L364:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5922              		.loc 1 4810 13
 5923 0086 3B6A     		ldr	r3, [r7, #32]
 5924 0088 DB6C     		ldr	r3, [r3, #76]
 5925              		.loc 1 4810 32
 5926 008a 5A1C     		adds	r2, r3, #1
 5927 008c 3B6A     		ldr	r3, [r7, #32]
 5928 008e DA64     		str	r2, [r3, #76]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5929              		.loc 1 4811 6
 5930 0090 20E0     		b	.L367
 5931              	.L363:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5932              		.loc 1 4814 29
 5933 0092 3B6A     		ldr	r3, [r7, #32]
 5934 0094 BA68     		ldr	r2, [r7, #8]
 5935 0096 DA64     		str	r2, [r3, #76]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5936              		.loc 1 4815 6
 5937 0098 1CE0     		b	.L367
 5938              	.L361:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5939              		.loc 1 4818 8
 5940 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5941 009c 022B     		cmp	r3, #2
 5942 009e 03D0     		beq	.L368
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5943              		.loc 1 4820 30
 5944 00a0 3B6A     		ldr	r3, [r7, #32]
 5945 00a2 BA68     		ldr	r2, [r7, #8]
 5946 00a4 DA64     		str	r2, [r3, #76]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5947              		.loc 1 4827 6
 5948 00a6 15E0     		b	.L367
 5949              	.L368:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5950              		.loc 1 4825 15
 5951 00a8 0023     		movs	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 194


 5952 00aa 7B62     		str	r3, [r7, #36]
 5953              		.loc 1 4827 6
 5954 00ac 12E0     		b	.L367
 5955              	.L360:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 5956              		.loc 1 4838 6
 5957 00ae 3B6A     		ldr	r3, [r7, #32]
 5958 00b0 DB6C     		ldr	r3, [r3, #76]
 5959 00b2 B3F1FF3F 		cmp	r3, #-1
 5960 00b6 0CD0     		beq	.L377
 5961              	.LBB198:
 5962              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5963              		.loc 2 195 2
 5964              		.syntax unified
 5965              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5966 00b8 4FF05003 			mov r3, #80												
 5967 00bc 83F31188 		msr basepri, r3											
 5968 00c0 BFF36F8F 		isb														
 5969 00c4 BFF34F8F 		dsb														
 5970              	
 5971              	@ 0 "" 2
 5972              		.thumb
 5973              		.syntax unified
 5974 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5975              		.loc 2 203 1
 5976 00ca 00BF     		nop
 5977              	.L371:
 5978              	.LBE199:
 5979              	.LBE198:
 5980              		.loc 1 4838 6 discriminator 2
 5981 00cc FEE7     		b	.L371
 5982              	.L376:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5983              		.loc 1 4832 6
 5984 00ce 00BF     		nop
 5985 00d0 00E0     		b	.L367
 5986              	.L377:
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5987              		.loc 1 4840 6
 5988 00d2 00BF     		nop
 5989              	.L367:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 195


4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5990              		.loc 1 4847 6
 5991 00d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5992 00d6 012B     		cmp	r3, #1
 5993 00d8 39D1     		bne	.L372
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5994              		.loc 1 4849 14
 5995 00da 3B6A     		ldr	r3, [r7, #32]
 5996 00dc 0433     		adds	r3, r3, #4
 5997 00de 1846     		mov	r0, r3
 5998 00e0 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5999              		.loc 1 4850 5
 6000 00e4 3B6A     		ldr	r3, [r7, #32]
 6001 00e6 DB6A     		ldr	r3, [r3, #44]
 6002 00e8 0122     		movs	r2, #1
 6003 00ea 9A40     		lsls	r2, r2, r3
 6004 00ec 1B4B     		ldr	r3, .L378
 6005 00ee 1B68     		ldr	r3, [r3]
 6006 00f0 1343     		orrs	r3, r3, r2
 6007 00f2 1A4A     		ldr	r2, .L378
 6008 00f4 1360     		str	r3, [r2]
 6009 00f6 3B6A     		ldr	r3, [r7, #32]
 6010 00f8 DA6A     		ldr	r2, [r3, #44]
 6011 00fa 1346     		mov	r3, r2
 6012 00fc 9B00     		lsls	r3, r3, #2
 6013 00fe 1344     		add	r3, r3, r2
 6014 0100 9B00     		lsls	r3, r3, #2
 6015 0102 174A     		ldr	r2, .L378+4
 6016 0104 1A44     		add	r2, r2, r3
 6017 0106 3B6A     		ldr	r3, [r7, #32]
 6018 0108 0433     		adds	r3, r3, #4
 6019 010a 1946     		mov	r1, r3
 6020 010c 1046     		mov	r0, r2
 6021 010e FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6022              		.loc 1 4853 5
 6023 0112 3B6A     		ldr	r3, [r7, #32]
 6024 0114 9B6A     		ldr	r3, [r3, #40]
 6025 0116 002B     		cmp	r3, #0
 6026 0118 0AD0     		beq	.L373
 6027              	.LBB200:
 6028              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6029              		.loc 2 195 2
 6030              		.syntax unified
 6031              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6032 011a 4FF05003 			mov r3, #80												
 6033 011e 83F31188 		msr basepri, r3											
 6034 0122 BFF36F8F 		isb														
 6035 0126 BFF34F8F 		dsb														
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 196


 6036              	
 6037              	@ 0 "" 2
 6038              		.thumb
 6039              		.syntax unified
 6040 012a 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6041              		.loc 2 203 1
 6042 012c 00BF     		nop
 6043              	.L374:
 6044              	.LBE201:
 6045              	.LBE200:
 6046              		.loc 1 4853 5 discriminator 3
 6047 012e FEE7     		b	.L374
 6048              	.L373:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6049              		.loc 1 4871 14
 6050 0130 3B6A     		ldr	r3, [r7, #32]
 6051 0132 DA6A     		ldr	r2, [r3, #44]
 6052              		.loc 1 4871 41
 6053 0134 0B4B     		ldr	r3, .L378+8
 6054 0136 1B68     		ldr	r3, [r3]
 6055 0138 DB6A     		ldr	r3, [r3, #44]
 6056              		.loc 1 4871 7
 6057 013a 9A42     		cmp	r2, r3
 6058 013c 07D9     		bls	.L372
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6059              		.loc 1 4875 6
 6060 013e 0A4B     		ldr	r3, .L378+12
 6061 0140 4FF08052 		mov	r2, #268435456
 6062 0144 1A60     		str	r2, [r3]
 6063              		.syntax unified
 6064              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6065 0146 BFF34F8F 		dsb
 6066              	@ 0 "" 2
 6067              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6068 014a BFF36F8F 		isb
 6069              	@ 0 "" 2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 197


 6070              		.thumb
 6071              		.syntax unified
 6072              	.L372:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6073              		.loc 1 4887 3
 6074 014e FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6075              		.loc 1 4889 10
 6076 0152 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6077              		.loc 1 4890 2
 6078 0154 1846     		mov	r0, r3
 6079 0156 2837     		adds	r7, r7, #40
 6080              	.LCFI236:
 6081              		.cfi_def_cfa_offset 8
 6082 0158 BD46     		mov	sp, r7
 6083              	.LCFI237:
 6084              		.cfi_def_cfa_register 13
 6085              		@ sp needed
 6086 015a 80BD     		pop	{r7, pc}
 6087              	.L379:
 6088              		.align	2
 6089              	.L378:
 6090 015c 00000000 		.word	uxTopReadyPriority
 6091 0160 00000000 		.word	pxReadyTasksLists
 6092 0164 00000000 		.word	pxCurrentTCB
 6093 0168 04ED00E0 		.word	-536810236
 6094              		.cfi_endproc
 6095              	.LFE51:
 6097              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6098              		.align	1
 6099              		.global	xTaskGenericNotifyFromISR
 6100              		.syntax unified
 6101              		.thumb
 6102              		.thumb_func
 6104              	xTaskGenericNotifyFromISR:
 6105              	.LFB52:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 198


 6106              		.loc 1 4898 2
 6107              		.cfi_startproc
 6108              		@ args = 4, pretend = 0, frame = 56
 6109              		@ frame_needed = 1, uses_anonymous_args = 0
 6110 0000 80B5     		push	{r7, lr}
 6111              	.LCFI238:
 6112              		.cfi_def_cfa_offset 8
 6113              		.cfi_offset 7, -8
 6114              		.cfi_offset 14, -4
 6115 0002 8EB0     		sub	sp, sp, #56
 6116              	.LCFI239:
 6117              		.cfi_def_cfa_offset 64
 6118 0004 00AF     		add	r7, sp, #0
 6119              	.LCFI240:
 6120              		.cfi_def_cfa_register 7
 6121 0006 F860     		str	r0, [r7, #12]
 6122 0008 B960     		str	r1, [r7, #8]
 6123 000a 3B60     		str	r3, [r7]
 6124 000c 1346     		mov	r3, r2
 6125 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6126              		.loc 1 4901 13
 6127 0010 0123     		movs	r3, #1
 6128 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6129              		.loc 1 4904 3
 6130 0014 FB68     		ldr	r3, [r7, #12]
 6131 0016 002B     		cmp	r3, #0
 6132 0018 0AD1     		bne	.L381
 6133              	.LBB202:
 6134              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6135              		.loc 2 195 2
 6136              		.syntax unified
 6137              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6138 001a 4FF05003 			mov r3, #80												
 6139 001e 83F31188 		msr basepri, r3											
 6140 0022 BFF36F8F 		isb														
 6141 0026 BFF34F8F 		dsb														
 6142              	
 6143              	@ 0 "" 2
 6144              		.thumb
 6145              		.syntax unified
 6146 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6147              		.loc 2 203 1
 6148 002c 00BF     		nop
 6149              	.L382:
 6150              	.LBE203:
 6151              	.LBE202:
 6152              		.loc 1 4904 3 discriminator 1
 6153 002e FEE7     		b	.L382
 6154              	.L381:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 199


4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6155              		.loc 1 4922 3
 6156 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6157              		.loc 1 4924 9
 6158 0034 FB68     		ldr	r3, [r7, #12]
 6159 0036 3B63     		str	r3, [r7, #48]
 6160              	.LBB204:
 6161              	.LBB205:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6162              		.loc 2 211 2
 6163              		.syntax unified
 6164              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6165 0038 EFF31182 			mrs r2, basepri											
 6166 003c 4FF05003 		mov r3, #80												
 6167 0040 83F31188 		msr basepri, r3											
 6168 0044 BFF36F8F 		isb														
 6169 0048 BFF34F8F 		dsb														
 6170              	
 6171              	@ 0 "" 2
 6172              		.thumb
 6173              		.syntax unified
 6174 004c 3A62     		str	r2, [r7, #32]
 6175 004e FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6176              		.loc 2 223 9
 6177 0050 3B6A     		ldr	r3, [r7, #32]
 6178              	.LBE205:
 6179              	.LBE204:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6180              		.loc 1 4926 28
 6181 0052 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6182              		.loc 1 4928 6
 6183 0054 3B68     		ldr	r3, [r7]
 6184 0056 002B     		cmp	r3, #0
 6185 0058 03D0     		beq	.L384
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 200


4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6186              		.loc 1 4930 42
 6187 005a 3B6B     		ldr	r3, [r7, #48]
 6188 005c DA6C     		ldr	r2, [r3, #76]
 6189              		.loc 1 4930 35
 6190 005e 3B68     		ldr	r3, [r7]
 6191 0060 1A60     		str	r2, [r3]
 6192              	.L384:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6193              		.loc 1 4933 26
 6194 0062 3B6B     		ldr	r3, [r7, #48]
 6195 0064 93F85030 		ldrb	r3, [r3, #80]
 6196 0068 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6197              		.loc 1 4934 25
 6198 006c 3B6B     		ldr	r3, [r7, #48]
 6199 006e 0222     		movs	r2, #2
 6200 0070 83F85020 		strb	r2, [r3, #80]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 6201              		.loc 1 4936 4
 6202 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6203 0076 042B     		cmp	r3, #4
 6204 0078 28D8     		bhi	.L385
 6205 007a 01A2     		adr	r2, .L387
 6206 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6207              		.p2align 2
 6208              	.L387:
 6209 0080 ED000000 		.word	.L404+1
 6210 0084 95000000 		.word	.L390+1
 6211 0088 A3000000 		.word	.L389+1
 6212 008c AF000000 		.word	.L388+1
 6213 0090 B7000000 		.word	.L386+1
 6214              		.p2align 1
 6215              	.L390:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6216              		.loc 1 4939 29
 6217 0094 3B6B     		ldr	r3, [r7, #48]
 6218 0096 DA6C     		ldr	r2, [r3, #76]
 6219 0098 BB68     		ldr	r3, [r7, #8]
 6220 009a 1A43     		orrs	r2, r2, r3
 6221 009c 3B6B     		ldr	r3, [r7, #48]
 6222 009e DA64     		str	r2, [r3, #76]
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6223              		.loc 1 4940 6
 6224 00a0 27E0     		b	.L392
 6225              	.L389:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6226              		.loc 1 4943 13
 6227 00a2 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 201


 6228 00a4 DB6C     		ldr	r3, [r3, #76]
 6229              		.loc 1 4943 32
 6230 00a6 5A1C     		adds	r2, r3, #1
 6231 00a8 3B6B     		ldr	r3, [r7, #48]
 6232 00aa DA64     		str	r2, [r3, #76]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6233              		.loc 1 4944 6
 6234 00ac 21E0     		b	.L392
 6235              	.L388:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6236              		.loc 1 4947 29
 6237 00ae 3B6B     		ldr	r3, [r7, #48]
 6238 00b0 BA68     		ldr	r2, [r7, #8]
 6239 00b2 DA64     		str	r2, [r3, #76]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6240              		.loc 1 4948 6
 6241 00b4 1DE0     		b	.L392
 6242              	.L386:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6243              		.loc 1 4951 8
 6244 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6245 00ba 022B     		cmp	r3, #2
 6246 00bc 03D0     		beq	.L393
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6247              		.loc 1 4953 30
 6248 00be 3B6B     		ldr	r3, [r7, #48]
 6249 00c0 BA68     		ldr	r2, [r7, #8]
 6250 00c2 DA64     		str	r2, [r3, #76]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6251              		.loc 1 4960 6
 6252 00c4 15E0     		b	.L392
 6253              	.L393:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6254              		.loc 1 4958 15
 6255 00c6 0023     		movs	r3, #0
 6256 00c8 7B63     		str	r3, [r7, #52]
 6257              		.loc 1 4960 6
 6258 00ca 12E0     		b	.L392
 6259              	.L385:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 202


4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6260              		.loc 1 4971 6
 6261 00cc 3B6B     		ldr	r3, [r7, #48]
 6262 00ce DB6C     		ldr	r3, [r3, #76]
 6263 00d0 B3F1FF3F 		cmp	r3, #-1
 6264 00d4 0CD0     		beq	.L405
 6265              	.LBB206:
 6266              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6267              		.loc 2 195 2
 6268              		.syntax unified
 6269              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6270 00d6 4FF05003 			mov r3, #80												
 6271 00da 83F31188 		msr basepri, r3											
 6272 00de BFF36F8F 		isb														
 6273 00e2 BFF34F8F 		dsb														
 6274              	
 6275              	@ 0 "" 2
 6276              		.thumb
 6277              		.syntax unified
 6278 00e6 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6279              		.loc 2 203 1
 6280 00e8 00BF     		nop
 6281              	.L396:
 6282              	.LBE207:
 6283              	.LBE206:
 6284              		.loc 1 4971 6 discriminator 2
 6285 00ea FEE7     		b	.L396
 6286              	.L404:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6287              		.loc 1 4965 6
 6288 00ec 00BF     		nop
 6289 00ee 00E0     		b	.L392
 6290              	.L405:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6291              		.loc 1 4972 6
 6292 00f0 00BF     		nop
 6293              	.L392:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6294              		.loc 1 4979 6
 6295 00f2 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6296 00f6 012B     		cmp	r3, #1
 6297 00f8 45D1     		bne	.L397
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6298              		.loc 1 4982 5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 203


 6299 00fa 3B6B     		ldr	r3, [r7, #48]
 6300 00fc 9B6A     		ldr	r3, [r3, #40]
 6301 00fe 002B     		cmp	r3, #0
 6302 0100 0AD0     		beq	.L398
 6303              	.LBB208:
 6304              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6305              		.loc 2 195 2
 6306              		.syntax unified
 6307              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6308 0102 4FF05003 			mov r3, #80												
 6309 0106 83F31188 		msr basepri, r3											
 6310 010a BFF36F8F 		isb														
 6311 010e BFF34F8F 		dsb														
 6312              	
 6313              	@ 0 "" 2
 6314              		.thumb
 6315              		.syntax unified
 6316 0112 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6317              		.loc 2 203 1
 6318 0114 00BF     		nop
 6319              	.L399:
 6320              	.LBE209:
 6321              	.LBE208:
 6322              		.loc 1 4982 5 discriminator 3
 6323 0116 FEE7     		b	.L399
 6324              	.L398:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6325              		.loc 1 4984 30
 6326 0118 204B     		ldr	r3, .L406
 6327 011a 1B68     		ldr	r3, [r3]
 6328              		.loc 1 4984 7
 6329 011c 002B     		cmp	r3, #0
 6330 011e 1CD1     		bne	.L400
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6331              		.loc 1 4986 15
 6332 0120 3B6B     		ldr	r3, [r7, #48]
 6333 0122 0433     		adds	r3, r3, #4
 6334 0124 1846     		mov	r0, r3
 6335 0126 FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6336              		.loc 1 4987 6
 6337 012a 3B6B     		ldr	r3, [r7, #48]
 6338 012c DB6A     		ldr	r3, [r3, #44]
 6339 012e 0122     		movs	r2, #1
 6340 0130 9A40     		lsls	r2, r2, r3
 6341 0132 1B4B     		ldr	r3, .L406+4
 6342 0134 1B68     		ldr	r3, [r3]
 6343 0136 1343     		orrs	r3, r3, r2
 6344 0138 194A     		ldr	r2, .L406+4
 6345 013a 1360     		str	r3, [r2]
 6346 013c 3B6B     		ldr	r3, [r7, #48]
 6347 013e DA6A     		ldr	r2, [r3, #44]
 6348 0140 1346     		mov	r3, r2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 204


 6349 0142 9B00     		lsls	r3, r3, #2
 6350 0144 1344     		add	r3, r3, r2
 6351 0146 9B00     		lsls	r3, r3, #2
 6352 0148 164A     		ldr	r2, .L406+8
 6353 014a 1A44     		add	r2, r2, r3
 6354 014c 3B6B     		ldr	r3, [r7, #48]
 6355 014e 0433     		adds	r3, r3, #4
 6356 0150 1946     		mov	r1, r3
 6357 0152 1046     		mov	r0, r2
 6358 0154 FFF7FEFF 		bl	vListInsertEnd
 6359 0158 05E0     		b	.L401
 6360              	.L400:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6361              		.loc 1 4993 6
 6362 015a 3B6B     		ldr	r3, [r7, #48]
 6363 015c 1833     		adds	r3, r3, #24
 6364 015e 1946     		mov	r1, r3
 6365 0160 1148     		ldr	r0, .L406+12
 6366 0162 FFF7FEFF 		bl	vListInsertEnd
 6367              	.L401:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6368              		.loc 1 4996 14
 6369 0166 3B6B     		ldr	r3, [r7, #48]
 6370 0168 DA6A     		ldr	r2, [r3, #44]
 6371              		.loc 1 4996 41
 6372 016a 104B     		ldr	r3, .L406+16
 6373 016c 1B68     		ldr	r3, [r3]
 6374 016e DB6A     		ldr	r3, [r3, #44]
 6375              		.loc 1 4996 7
 6376 0170 9A42     		cmp	r2, r3
 6377 0172 08D9     		bls	.L397
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6378              		.loc 1 5000 8
 6379 0174 3B6C     		ldr	r3, [r7, #64]
 6380 0176 002B     		cmp	r3, #0
 6381 0178 02D0     		beq	.L402
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6382              		.loc 1 5002 34
 6383 017a 3B6C     		ldr	r3, [r7, #64]
 6384 017c 0122     		movs	r2, #1
 6385 017e 1A60     		str	r2, [r3]
 6386              	.L402:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 205


5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 6387              		.loc 1 5008 20
 6388 0180 0B4B     		ldr	r3, .L406+20
 6389 0182 0122     		movs	r2, #1
 6390 0184 1A60     		str	r2, [r3]
 6391              	.L397:
 6392 0186 FB6A     		ldr	r3, [r7, #44]
 6393 0188 3B61     		str	r3, [r7, #16]
 6394              	.LBB210:
 6395              	.LBB211:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6396              		.loc 2 229 2
 6397 018a 3B69     		ldr	r3, [r7, #16]
 6398              		.syntax unified
 6399              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6400 018c 83F31188 			msr basepri, r3	
 6401              	@ 0 "" 2
 6402              		.loc 2 233 1
 6403              		.thumb
 6404              		.syntax unified
 6405 0190 00BF     		nop
 6406              	.LBE211:
 6407              	.LBE210:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6408              		.loc 1 5018 10
 6409 0192 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6410              		.loc 1 5019 2
 6411 0194 1846     		mov	r0, r3
 6412 0196 3837     		adds	r7, r7, #56
 6413              	.LCFI241:
 6414              		.cfi_def_cfa_offset 8
 6415 0198 BD46     		mov	sp, r7
 6416              	.LCFI242:
 6417              		.cfi_def_cfa_register 13
 6418              		@ sp needed
 6419 019a 80BD     		pop	{r7, pc}
 6420              	.L407:
 6421              		.align	2
 6422              	.L406:
 6423 019c 00000000 		.word	uxSchedulerSuspended
 6424 01a0 00000000 		.word	uxTopReadyPriority
 6425 01a4 00000000 		.word	pxReadyTasksLists
 6426 01a8 00000000 		.word	xPendingReadyList
 6427 01ac 00000000 		.word	pxCurrentTCB
 6428 01b0 00000000 		.word	xYieldPending
 6429              		.cfi_endproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 206


 6430              	.LFE52:
 6432              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6433              		.align	1
 6434              		.global	vTaskNotifyGiveFromISR
 6435              		.syntax unified
 6436              		.thumb
 6437              		.thumb_func
 6439              	vTaskNotifyGiveFromISR:
 6440              	.LFB53:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6441              		.loc 1 5027 2
 6442              		.cfi_startproc
 6443              		@ args = 0, pretend = 0, frame = 40
 6444              		@ frame_needed = 1, uses_anonymous_args = 0
 6445 0000 80B5     		push	{r7, lr}
 6446              	.LCFI243:
 6447              		.cfi_def_cfa_offset 8
 6448              		.cfi_offset 7, -8
 6449              		.cfi_offset 14, -4
 6450 0002 8AB0     		sub	sp, sp, #40
 6451              	.LCFI244:
 6452              		.cfi_def_cfa_offset 48
 6453 0004 00AF     		add	r7, sp, #0
 6454              	.LCFI245:
 6455              		.cfi_def_cfa_register 7
 6456 0006 7860     		str	r0, [r7, #4]
 6457 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6458              		.loc 1 5032 3
 6459 000a 7B68     		ldr	r3, [r7, #4]
 6460 000c 002B     		cmp	r3, #0
 6461 000e 0AD1     		bne	.L409
 6462              	.LBB212:
 6463              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6464              		.loc 2 195 2
 6465              		.syntax unified
 6466              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6467 0010 4FF05003 			mov r3, #80												
 6468 0014 83F31188 		msr basepri, r3											
 6469 0018 BFF36F8F 		isb														
 6470 001c BFF34F8F 		dsb														
 6471              	
 6472              	@ 0 "" 2
 6473              		.thumb
 6474              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 207


 6475 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6476              		.loc 2 203 1
 6477 0022 00BF     		nop
 6478              	.L410:
 6479              	.LBE213:
 6480              	.LBE212:
 6481              		.loc 1 5032 3 discriminator 1
 6482 0024 FEE7     		b	.L410
 6483              	.L409:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6484              		.loc 1 5050 3
 6485 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6486              		.loc 1 5052 9
 6487 002a 7B68     		ldr	r3, [r7, #4]
 6488 002c 7B62     		str	r3, [r7, #36]
 6489              	.LBB214:
 6490              	.LBB215:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6491              		.loc 2 211 2
 6492              		.syntax unified
 6493              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6494 002e EFF31182 			mrs r2, basepri											
 6495 0032 4FF05003 		mov r3, #80												
 6496 0036 83F31188 		msr basepri, r3											
 6497 003a BFF36F8F 		isb														
 6498 003e BFF34F8F 		dsb														
 6499              	
 6500              	@ 0 "" 2
 6501              		.thumb
 6502              		.syntax unified
 6503 0042 7A61     		str	r2, [r7, #20]
 6504 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6505              		.loc 2 223 9
 6506 0046 7B69     		ldr	r3, [r7, #20]
 6507              	.LBE215:
 6508              	.LBE214:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 208


5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6509              		.loc 1 5054 28
 6510 0048 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6511              		.loc 1 5056 26
 6512 004a 7B6A     		ldr	r3, [r7, #36]
 6513 004c 93F85030 		ldrb	r3, [r3, #80]
 6514 0050 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6515              		.loc 1 5057 25
 6516 0052 7B6A     		ldr	r3, [r7, #36]
 6517 0054 0222     		movs	r2, #2
 6518 0056 83F85020 		strb	r2, [r3, #80]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6519              		.loc 1 5061 11
 6520 005a 7B6A     		ldr	r3, [r7, #36]
 6521 005c DB6C     		ldr	r3, [r3, #76]
 6522              		.loc 1 5061 30
 6523 005e 5A1C     		adds	r2, r3, #1
 6524 0060 7B6A     		ldr	r3, [r7, #36]
 6525 0062 DA64     		str	r2, [r3, #76]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6526              		.loc 1 5067 6
 6527 0064 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6528 0066 012B     		cmp	r3, #1
 6529 0068 45D1     		bne	.L412
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6530              		.loc 1 5070 5
 6531 006a 7B6A     		ldr	r3, [r7, #36]
 6532 006c 9B6A     		ldr	r3, [r3, #40]
 6533 006e 002B     		cmp	r3, #0
 6534 0070 0AD0     		beq	.L413
 6535              	.LBB216:
 6536              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6537              		.loc 2 195 2
 6538              		.syntax unified
 6539              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6540 0072 4FF05003 			mov r3, #80												
 6541 0076 83F31188 		msr basepri, r3											
 6542 007a BFF36F8F 		isb														
 6543 007e BFF34F8F 		dsb														
 6544              	
 6545              	@ 0 "" 2
 6546              		.thumb
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 209


 6547              		.syntax unified
 6548 0082 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6549              		.loc 2 203 1
 6550 0084 00BF     		nop
 6551              	.L414:
 6552              	.LBE217:
 6553              	.LBE216:
 6554              		.loc 1 5070 5 discriminator 2
 6555 0086 FEE7     		b	.L414
 6556              	.L413:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6557              		.loc 1 5072 30
 6558 0088 204B     		ldr	r3, .L418
 6559 008a 1B68     		ldr	r3, [r3]
 6560              		.loc 1 5072 7
 6561 008c 002B     		cmp	r3, #0
 6562 008e 1CD1     		bne	.L415
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6563              		.loc 1 5074 15
 6564 0090 7B6A     		ldr	r3, [r7, #36]
 6565 0092 0433     		adds	r3, r3, #4
 6566 0094 1846     		mov	r0, r3
 6567 0096 FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6568              		.loc 1 5075 6
 6569 009a 7B6A     		ldr	r3, [r7, #36]
 6570 009c DB6A     		ldr	r3, [r3, #44]
 6571 009e 0122     		movs	r2, #1
 6572 00a0 9A40     		lsls	r2, r2, r3
 6573 00a2 1B4B     		ldr	r3, .L418+4
 6574 00a4 1B68     		ldr	r3, [r3]
 6575 00a6 1343     		orrs	r3, r3, r2
 6576 00a8 194A     		ldr	r2, .L418+4
 6577 00aa 1360     		str	r3, [r2]
 6578 00ac 7B6A     		ldr	r3, [r7, #36]
 6579 00ae DA6A     		ldr	r2, [r3, #44]
 6580 00b0 1346     		mov	r3, r2
 6581 00b2 9B00     		lsls	r3, r3, #2
 6582 00b4 1344     		add	r3, r3, r2
 6583 00b6 9B00     		lsls	r3, r3, #2
 6584 00b8 164A     		ldr	r2, .L418+8
 6585 00ba 1A44     		add	r2, r2, r3
 6586 00bc 7B6A     		ldr	r3, [r7, #36]
 6587 00be 0433     		adds	r3, r3, #4
 6588 00c0 1946     		mov	r1, r3
 6589 00c2 1046     		mov	r0, r2
 6590 00c4 FFF7FEFF 		bl	vListInsertEnd
 6591 00c8 05E0     		b	.L416
 6592              	.L415:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 210


5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6593              		.loc 1 5081 6
 6594 00ca 7B6A     		ldr	r3, [r7, #36]
 6595 00cc 1833     		adds	r3, r3, #24
 6596 00ce 1946     		mov	r1, r3
 6597 00d0 1148     		ldr	r0, .L418+12
 6598 00d2 FFF7FEFF 		bl	vListInsertEnd
 6599              	.L416:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6600              		.loc 1 5084 14
 6601 00d6 7B6A     		ldr	r3, [r7, #36]
 6602 00d8 DA6A     		ldr	r2, [r3, #44]
 6603              		.loc 1 5084 41
 6604 00da 104B     		ldr	r3, .L418+16
 6605 00dc 1B68     		ldr	r3, [r3]
 6606 00de DB6A     		ldr	r3, [r3, #44]
 6607              		.loc 1 5084 7
 6608 00e0 9A42     		cmp	r2, r3
 6609 00e2 08D9     		bls	.L412
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6610              		.loc 1 5088 8
 6611 00e4 3B68     		ldr	r3, [r7]
 6612 00e6 002B     		cmp	r3, #0
 6613 00e8 02D0     		beq	.L417
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6614              		.loc 1 5090 34
 6615 00ea 3B68     		ldr	r3, [r7]
 6616 00ec 0122     		movs	r2, #1
 6617 00ee 1A60     		str	r2, [r3]
 6618              	.L417:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 6619              		.loc 1 5096 20
 6620 00f0 0B4B     		ldr	r3, .L418+20
 6621 00f2 0122     		movs	r2, #1
 6622 00f4 1A60     		str	r2, [r3]
 6623              	.L412:
 6624 00f6 3B6A     		ldr	r3, [r7, #32]
 6625 00f8 BB60     		str	r3, [r7, #8]
 6626              	.LBB218:
 6627              	.LBB219:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6628              		.loc 2 229 2
 6629 00fa BB68     		ldr	r3, [r7, #8]
 6630              		.syntax unified
 6631              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6632 00fc 83F31188 			msr basepri, r3	
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 211


 6633              	@ 0 "" 2
 6634              		.loc 2 233 1
 6635              		.thumb
 6636              		.syntax unified
 6637 0100 00BF     		nop
 6638              	.LBE219:
 6639              	.LBE218:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6640              		.loc 1 5105 2
 6641 0102 00BF     		nop
 6642 0104 2837     		adds	r7, r7, #40
 6643              	.LCFI246:
 6644              		.cfi_def_cfa_offset 8
 6645 0106 BD46     		mov	sp, r7
 6646              	.LCFI247:
 6647              		.cfi_def_cfa_register 13
 6648              		@ sp needed
 6649 0108 80BD     		pop	{r7, pc}
 6650              	.L419:
 6651 010a 00BF     		.align	2
 6652              	.L418:
 6653 010c 00000000 		.word	uxSchedulerSuspended
 6654 0110 00000000 		.word	uxTopReadyPriority
 6655 0114 00000000 		.word	pxReadyTasksLists
 6656 0118 00000000 		.word	xPendingReadyList
 6657 011c 00000000 		.word	pxCurrentTCB
 6658 0120 00000000 		.word	xYieldPending
 6659              		.cfi_endproc
 6660              	.LFE53:
 6662              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6663              		.align	1
 6664              		.global	xTaskNotifyStateClear
 6665              		.syntax unified
 6666              		.thumb
 6667              		.thumb_func
 6669              	xTaskNotifyStateClear:
 6670              	.LFB54:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6671              		.loc 1 5113 2
 6672              		.cfi_startproc
 6673              		@ args = 0, pretend = 0, frame = 16
 6674              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 212


 6675 0000 80B5     		push	{r7, lr}
 6676              	.LCFI248:
 6677              		.cfi_def_cfa_offset 8
 6678              		.cfi_offset 7, -8
 6679              		.cfi_offset 14, -4
 6680 0002 84B0     		sub	sp, sp, #16
 6681              	.LCFI249:
 6682              		.cfi_def_cfa_offset 24
 6683 0004 00AF     		add	r7, sp, #0
 6684              	.LCFI250:
 6685              		.cfi_def_cfa_register 7
 6686 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6687              		.loc 1 5119 11
 6688 0008 7B68     		ldr	r3, [r7, #4]
 6689 000a 002B     		cmp	r3, #0
 6690 000c 02D1     		bne	.L421
 6691              		.loc 1 5119 11 is_stmt 0 discriminator 1
 6692 000e 0E4B     		ldr	r3, .L426
 6693 0010 1B68     		ldr	r3, [r3]
 6694 0012 00E0     		b	.L422
 6695              	.L421:
 6696              		.loc 1 5119 11 discriminator 2
 6697 0014 7B68     		ldr	r3, [r7, #4]
 6698              	.L422:
 6699              		.loc 1 5119 9 is_stmt 1 discriminator 4
 6700 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6701              		.loc 1 5121 3 discriminator 4
 6702 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 6703              		.loc 1 5123 13 discriminator 4
 6704 001c BB68     		ldr	r3, [r7, #8]
 6705 001e 93F85030 		ldrb	r3, [r3, #80]
 6706 0022 DBB2     		uxtb	r3, r3
 6707              		.loc 1 5123 6 discriminator 4
 6708 0024 022B     		cmp	r3, #2
 6709 0026 06D1     		bne	.L423
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6710              		.loc 1 5125 26
 6711 0028 BB68     		ldr	r3, [r7, #8]
 6712 002a 0022     		movs	r2, #0
 6713 002c 83F85020 		strb	r2, [r3, #80]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6714              		.loc 1 5126 13
 6715 0030 0123     		movs	r3, #1
 6716 0032 FB60     		str	r3, [r7, #12]
 6717 0034 01E0     		b	.L424
 6718              	.L423:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 213


5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 6719              		.loc 1 5130 13
 6720 0036 0023     		movs	r3, #0
 6721 0038 FB60     		str	r3, [r7, #12]
 6722              	.L424:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6723              		.loc 1 5133 3
 6724 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6725              		.loc 1 5135 10
 6726 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6727              		.loc 1 5136 2
 6728 0040 1846     		mov	r0, r3
 6729 0042 1037     		adds	r7, r7, #16
 6730              	.LCFI251:
 6731              		.cfi_def_cfa_offset 8
 6732 0044 BD46     		mov	sp, r7
 6733              	.LCFI252:
 6734              		.cfi_def_cfa_register 13
 6735              		@ sp needed
 6736 0046 80BD     		pop	{r7, pc}
 6737              	.L427:
 6738              		.align	2
 6739              	.L426:
 6740 0048 00000000 		.word	pxCurrentTCB
 6741              		.cfi_endproc
 6742              	.LFE54:
 6744              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 6745              		.align	1
 6746              		.global	ulTaskNotifyValueClear
 6747              		.syntax unified
 6748              		.thumb
 6749              		.thumb_func
 6751              	ulTaskNotifyValueClear:
 6752              	.LFB55:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6753              		.loc 1 5144 2
 6754              		.cfi_startproc
 6755              		@ args = 0, pretend = 0, frame = 16
 6756              		@ frame_needed = 1, uses_anonymous_args = 0
 6757 0000 80B5     		push	{r7, lr}
 6758              	.LCFI253:
 6759              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 214


 6760              		.cfi_offset 7, -8
 6761              		.cfi_offset 14, -4
 6762 0002 84B0     		sub	sp, sp, #16
 6763              	.LCFI254:
 6764              		.cfi_def_cfa_offset 24
 6765 0004 00AF     		add	r7, sp, #0
 6766              	.LCFI255:
 6767              		.cfi_def_cfa_register 7
 6768 0006 7860     		str	r0, [r7, #4]
 6769 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6770              		.loc 1 5150 11
 6771 000a 7B68     		ldr	r3, [r7, #4]
 6772 000c 002B     		cmp	r3, #0
 6773 000e 02D1     		bne	.L429
 6774              		.loc 1 5150 11 is_stmt 0 discriminator 1
 6775 0010 0C4B     		ldr	r3, .L432
 6776 0012 1B68     		ldr	r3, [r3]
 6777 0014 00E0     		b	.L430
 6778              	.L429:
 6779              		.loc 1 5150 11 discriminator 2
 6780 0016 7B68     		ldr	r3, [r7, #4]
 6781              	.L430:
 6782              		.loc 1 5150 9 is_stmt 1 discriminator 4
 6783 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6784              		.loc 1 5152 3 discriminator 4
 6785 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6786              		.loc 1 5156 27 discriminator 4
 6787 001e 094B     		ldr	r3, .L432
 6788 0020 1B68     		ldr	r3, [r3]
 6789              		.loc 1 5156 13 discriminator 4
 6790 0022 DB6C     		ldr	r3, [r3, #76]
 6791 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 6792              		.loc 1 5157 27 discriminator 4
 6793 0026 FB68     		ldr	r3, [r7, #12]
 6794 0028 DA6C     		ldr	r2, [r3, #76]
 6795              		.loc 1 5157 30 discriminator 4
 6796 002a 3B68     		ldr	r3, [r7]
 6797 002c DB43     		mvns	r3, r3
 6798              		.loc 1 5157 27 discriminator 4
 6799 002e 1A40     		ands	r2, r2, r3
 6800 0030 FB68     		ldr	r3, [r7, #12]
 6801 0032 DA64     		str	r2, [r3, #76]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 215


 6802              		.loc 1 5159 3 discriminator 4
 6803 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6804              		.loc 1 5161 10 discriminator 4
 6805 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6806              		.loc 1 5162 2 discriminator 4
 6807 003a 1846     		mov	r0, r3
 6808 003c 1037     		adds	r7, r7, #16
 6809              	.LCFI256:
 6810              		.cfi_def_cfa_offset 8
 6811 003e BD46     		mov	sp, r7
 6812              	.LCFI257:
 6813              		.cfi_def_cfa_register 13
 6814              		@ sp needed
 6815 0040 80BD     		pop	{r7, pc}
 6816              	.L433:
 6817 0042 00BF     		.align	2
 6818              	.L432:
 6819 0044 00000000 		.word	pxCurrentTCB
 6820              		.cfi_endproc
 6821              	.LFE55:
 6823              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 6824              		.align	1
 6825              		.syntax unified
 6826              		.thumb
 6827              		.thumb_func
 6829              	prvAddCurrentTaskToDelayedList:
 6830              	.LFB56:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6831              		.loc 1 5178 1
 6832              		.cfi_startproc
 6833              		@ args = 0, pretend = 0, frame = 16
 6834              		@ frame_needed = 1, uses_anonymous_args = 0
 6835 0000 80B5     		push	{r7, lr}
 6836              	.LCFI258:
 6837              		.cfi_def_cfa_offset 8
 6838              		.cfi_offset 7, -8
 6839              		.cfi_offset 14, -4
 6840 0002 84B0     		sub	sp, sp, #16
 6841              	.LCFI259:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 216


 6842              		.cfi_def_cfa_offset 24
 6843 0004 00AF     		add	r7, sp, #0
 6844              	.LCFI260:
 6845              		.cfi_def_cfa_register 7
 6846 0006 7860     		str	r0, [r7, #4]
 6847 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6848              		.loc 1 5180 18
 6849 000a 294B     		ldr	r3, .L440
 6850 000c 1B68     		ldr	r3, [r3]
 6851 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6852              		.loc 1 5193 35
 6853 0010 284B     		ldr	r3, .L440+4
 6854 0012 1B68     		ldr	r3, [r3]
 6855              		.loc 1 5193 6
 6856 0014 0433     		adds	r3, r3, #4
 6857 0016 1846     		mov	r0, r3
 6858 0018 FFF7FEFF 		bl	uxListRemove
 6859 001c 0346     		mov	r3, r0
 6860              		.loc 1 5193 4
 6861 001e 002B     		cmp	r3, #0
 6862 0020 0BD1     		bne	.L435
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 6863              		.loc 1 5197 3
 6864 0022 244B     		ldr	r3, .L440+4
 6865 0024 1B68     		ldr	r3, [r3]
 6866 0026 DB6A     		ldr	r3, [r3, #44]
 6867 0028 0122     		movs	r2, #1
 6868 002a 02FA03F3 		lsl	r3, r2, r3
 6869 002e DA43     		mvns	r2, r3
 6870 0030 214B     		ldr	r3, .L440+8
 6871 0032 1B68     		ldr	r3, [r3]
 6872 0034 1340     		ands	r3, r3, r2
 6873 0036 204A     		ldr	r2, .L440+8
 6874 0038 1360     		str	r3, [r2]
 6875              	.L435:
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 217


5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6876              		.loc 1 5206 5
 6877 003a 7B68     		ldr	r3, [r7, #4]
 6878 003c B3F1FF3F 		cmp	r3, #-1
 6879 0040 0AD1     		bne	.L436
 6880              		.loc 1 5206 41 discriminator 1
 6881 0042 3B68     		ldr	r3, [r7]
 6882 0044 002B     		cmp	r3, #0
 6883 0046 07D0     		beq	.L436
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6884              		.loc 1 5211 56
 6885 0048 1A4B     		ldr	r3, .L440+4
 6886 004a 1B68     		ldr	r3, [r3]
 6887              		.loc 1 5211 4
 6888 004c 0433     		adds	r3, r3, #4
 6889 004e 1946     		mov	r1, r3
 6890 0050 1A48     		ldr	r0, .L440+12
 6891 0052 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 218


5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6892              		.loc 1 5286 1
 6893 0056 26E0     		b	.L439
 6894              	.L436:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6895              		.loc 1 5218 16
 6896 0058 FA68     		ldr	r2, [r7, #12]
 6897 005a 7B68     		ldr	r3, [r7, #4]
 6898 005c 1344     		add	r3, r3, r2
 6899 005e BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6900              		.loc 1 5221 4
 6901 0060 144B     		ldr	r3, .L440+4
 6902 0062 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 219


 6903 0064 BA68     		ldr	r2, [r7, #8]
 6904 0066 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6905              		.loc 1 5223 6
 6906 0068 BA68     		ldr	r2, [r7, #8]
 6907 006a FB68     		ldr	r3, [r7, #12]
 6908 006c 9A42     		cmp	r2, r3
 6909 006e 09D2     		bcs	.L438
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6910              		.loc 1 5227 5
 6911 0070 134B     		ldr	r3, .L440+16
 6912 0072 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6913              		.loc 1 5227 60
 6914 0074 0F4B     		ldr	r3, .L440+4
 6915 0076 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6916              		.loc 1 5227 5
 6917 0078 0433     		adds	r3, r3, #4
 6918 007a 1946     		mov	r1, r3
 6919 007c 1046     		mov	r0, r2
 6920 007e FFF7FEFF 		bl	vListInsert
 6921              		.loc 1 5286 1
 6922 0082 10E0     		b	.L439
 6923              	.L438:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6924              		.loc 1 5233 5
 6925 0084 0F4B     		ldr	r3, .L440+20
 6926 0086 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6927              		.loc 1 5233 52
 6928 0088 0A4B     		ldr	r3, .L440+4
 6929 008a 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6930              		.loc 1 5233 5
 6931 008c 0433     		adds	r3, r3, #4
 6932 008e 1946     		mov	r1, r3
 6933 0090 1046     		mov	r0, r2
 6934 0092 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6935              		.loc 1 5238 21
 6936 0096 0C4B     		ldr	r3, .L440+24
 6937 0098 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6938              		.loc 1 5238 7
 6939 009a BA68     		ldr	r2, [r7, #8]
 6940 009c 9A42     		cmp	r2, r3
 6941 009e 02D2     		bcs	.L439
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6942              		.loc 1 5240 27
 6943 00a0 094A     		ldr	r2, .L440+24
 6944 00a2 BB68     		ldr	r3, [r7, #8]
 6945 00a4 1360     		str	r3, [r2]
 6946              	.L439:
 6947              		.loc 1 5286 1
 6948 00a6 00BF     		nop
 6949 00a8 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 220


 6950              	.LCFI261:
 6951              		.cfi_def_cfa_offset 8
 6952 00aa BD46     		mov	sp, r7
 6953              	.LCFI262:
 6954              		.cfi_def_cfa_register 13
 6955              		@ sp needed
 6956 00ac 80BD     		pop	{r7, pc}
 6957              	.L441:
 6958 00ae 00BF     		.align	2
 6959              	.L440:
 6960 00b0 00000000 		.word	xTickCount
 6961 00b4 00000000 		.word	pxCurrentTCB
 6962 00b8 00000000 		.word	uxTopReadyPriority
 6963 00bc 00000000 		.word	xSuspendedTaskList
 6964 00c0 00000000 		.word	pxOverflowDelayedTaskList
 6965 00c4 00000000 		.word	pxDelayedTaskList
 6966 00c8 00000000 		.word	xNextTaskUnblockTime
 6967              		.cfi_endproc
 6968              	.LFE56:
 6970              		.text
 6971              	.Letext0:
 6972              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 6973              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 6974              		.file 5 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 6975              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6976              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6977              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6978              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 221


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:21     .bss.pxCurrentTCB:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:27     .bss.pxReadyTasksLists:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:33     .bss.xDelayedTaskList1:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:39     .bss.xDelayedTaskList2:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:45     .bss.pxDelayedTaskList:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:51     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:57     .bss.xPendingReadyList:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:60     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:63     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:75     .bss.xSuspendedTaskList:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:81     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:87     .bss.xTickCount:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:90     .bss.xTickCount:00000000 xTickCount
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:93     .bss.uxTopReadyPriority:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:99     .bss.xSchedulerRunning:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:105    .bss.xPendedTicks:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:108    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:111    .bss.xYieldPending:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:114    .bss.xYieldPending:00000000 xYieldPending
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:117    .bss.xNumOfOverflows:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:123    .bss.uxTaskNumber:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:126    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:129    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:135    .bss.xIdleTaskHandle:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:141    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:144    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:147    .text.xTaskCreateStatic:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:153    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:438    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:646    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:319    .text.xTaskCreate:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:325    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:433    .text.prvInitialiseNewTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:641    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4361   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:787    .text.prvAddNewTaskToReadyList:000000b8 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:798    .text.vTaskDelete:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:804    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4541   .text.prvDeleteTCB:00000000 prvDeleteTCB
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 222


C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4635   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:991    .text.vTaskDelete:000000f8 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1005   .text.vTaskDelay:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1011   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2420   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6829   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2466   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1104   .text.vTaskDelay:00000060 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1110   .text.uxTaskPriorityGet:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1116   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1171   .text.uxTaskPriorityGet:00000030 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1176   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1182   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1273   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1278   .text.vTaskPrioritySet:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1284   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1525   .text.vTaskPrioritySet:00000144 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1533   .text.vTaskSuspend:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1539   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3284   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1739   .text.vTaskSuspend:00000104 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1751   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1756   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1849   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1855   .text.vTaskResume:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1861   .text.vTaskResume:00000000 vTaskResume
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:1996   .text.vTaskResume:000000ac $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2004   .text.xTaskResumeFromISR:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2010   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2179   .text.xTaskResumeFromISR:000000d0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2188   .rodata:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2192   .text.vTaskStartScheduler:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2198   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2339   .text.vTaskStartScheduler:000000a8 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4305   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2349   .text.vTaskEndScheduler:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2355   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2409   .text.vTaskEndScheduler:0000002c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2414   .text.vTaskSuspendAll:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2455   .text.vTaskSuspendAll:00000018 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2460   .text.xTaskResumeAll:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3021   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2681   .text.xTaskResumeAll:00000114 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2694   .text.xTaskGetTickCount:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2700   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2740   .text.xTaskGetTickCount:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2745   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2751   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2792   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2797   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2803   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2834   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2839   .text.pcTaskGetName:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2845   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2923   .text.pcTaskGetName:00000044 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2928   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:2934   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 223


C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3009   .text.xTaskCatchUpTicks:0000004c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3015   .text.xTaskIncrementTick:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3263   .text.xTaskIncrementTick:00000144 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3278   .text.vTaskSwitchContext:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3427   .text.vTaskSwitchContext:000000a4 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3436   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3442   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3512   .text.vTaskPlaceOnEventList:00000044 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3517   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3523   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3627   .text.vTaskPlaceOnUnorderedEventList:00000070 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3633   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3639   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3775   .text.xTaskRemoveFromEventList:000000ac $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3785   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3791   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3931   .text.vTaskRemoveFromUnorderedEventList:000000b0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3940   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:3946   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4017   .text.vTaskSetTimeOutState:00000044 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4023   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4029   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4074   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4080   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4086   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4251   .text.xTaskCheckForTimeOut:000000bc $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4257   .text.vTaskMissedYield:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4263   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4295   .text.vTaskMissedYield:00000014 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4300   .text.prvIdleTask:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4456   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4350   .text.prvIdleTask:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4356   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4439   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4451   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4529   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4536   .text.prvDeleteTCB:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4630   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4697   .text.prvResetNextTaskUnblockTime:00000038 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4703   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4709   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4749   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4754   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4760   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4822   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4828   .text.xTaskPriorityInherit:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4834   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:4995   .text.xTaskPriorityInherit:000000e0 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5002   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5008   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5200   .text.xTaskPriorityDisinherit:00000100 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5207   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5213   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5419   .text.vTaskPriorityDisinheritAfterTimeout:00000110 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5426   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5432   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5482   .text.uxTaskResetEventItemValue:0000002c $d
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s 			page 224


C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5487   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5493   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5538   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5543   .text.ulTaskNotifyTake:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5549   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5663   .text.ulTaskNotifyTake:00000088 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5669   .text.xTaskNotifyWait:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5675   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5810   .text.xTaskNotifyWait:000000ac $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5816   .text.xTaskGenericNotify:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5822   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5905   .text.xTaskGenericNotify:00000064 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:5910   .text.xTaskGenericNotify:00000078 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6090   .text.xTaskGenericNotify:0000015c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6098   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6104   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6209   .text.xTaskGenericNotifyFromISR:00000080 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6214   .text.xTaskGenericNotifyFromISR:00000094 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6423   .text.xTaskGenericNotifyFromISR:0000019c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6433   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6439   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6653   .text.vTaskNotifyGiveFromISR:0000010c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6663   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6669   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6740   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6745   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6751   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6819   .text.ulTaskNotifyValueClear:00000044 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6824   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccaeXL4Q.s:6960   .text.prvAddCurrentTaskToDelayedList:000000b0 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
