ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"usart_aspep_driver.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  20              		.align	2
  23              	OFFSET_TAB_CCMRx:
  24 0000 00000000 		.ascii	"\000\000\000\000\004\004\004<<"
  24      0404043C 
  24      3C
  25              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  26              		.align	2
  29              	SHIFT_TAB_OCxx:
  30 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\010"
  30      00000800 
  30      08
  31              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  32              		.align	2
  35              	SHIFT_TAB_ICxx:
  36 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000"
  36      00000800 
  36      00
  37              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  38              		.align	2
  41              	SHIFT_TAB_CCxP:
  42 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\020\024"
  42      080A0C10 
  42      14
  43              		.section	.rodata.SHIFT_TAB_OISx,"a"
  44              		.align	2
  47              	SHIFT_TAB_OISx:
  48 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\010\012"
  48      04050608 
  48      0A
  49              		.section	.text.LL_USART_ClearFlag_IDLE,"ax",%progbits
  50              		.align	1
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  55              	LL_USART_ClearFlag_IDLE:
  56              	.LFB775:
  57              		.file 1 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h"
   1:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 2


   2:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @file    stm32l4xx_ll_usart.h
   4:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @attention
   8:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *
   9:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * All rights reserved.
  11:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *
  12:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * in the root directory of this software component.
  14:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *
  16:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ******************************************************************************
  17:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  18:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  19:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #ifndef STM32L4xx_LL_USART_H
  21:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define STM32L4xx_LL_USART_H
  22:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  23:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #ifdef __cplusplus
  24:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** extern "C" {
  25:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif
  26:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  27:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #include "stm32l4xx.h"
  29:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  30:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @addtogroup STM32L4xx_LL_Driver
  31:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  32:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  33:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  34:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART1) || defined(USART2) || defined(USART3) || defined(UART4) || defined(UART5)
  35:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  36:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL USART
  37:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  38:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  39:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  40:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
  43:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Variables USART Private Variables
  44:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  45:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  46:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Array used to get the USART prescaler division decimal values versus @ref USART_LL_EC_PRESCALER 
  47:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** static const uint32_t USART_PRESCALER_TAB[] =
  48:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
  49:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   1UL,
  50:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   2UL,
  51:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   4UL,
  52:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   6UL,
  53:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   8UL,
  54:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   10UL,
  55:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   12UL,
  56:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   16UL,
  57:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   32UL,
  58:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   64UL,
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 3


  59:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   128UL,
  60:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   256UL
  61:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** };
  62:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  63:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
  64:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  65:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
  66:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  67:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  68:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  69:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  70:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  71:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  72:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
  73:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  74:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  75:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  76:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  77:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  78:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  79:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  80:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
  81:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  82:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  83:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  84:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  85:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  86:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  87:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  88:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  89:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  90:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  91:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  92:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  93:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** typedef struct
  94:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
  95:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
  96:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t PrescalerValue;            /*!< Specifies the Prescaler to compute the communication bau
  97:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PRESCA
  98:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  99:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetPrescaler().*/
 101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
 104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetBaudRate().*/
 107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
 109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
 110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetDataWidth().*/
 113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 4


 116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetStopBitsLength().*/
 119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetParity().*/
 125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetTransferDirection().*/
 131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetHWFlowCtrl().*/
 137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            function @ref LL_USART_SetOverSampling().*/
 143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** } LL_USART_InitTypeDef;
 145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** typedef struct
 150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPolarity().
 163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPhase().
 170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 5


 173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            functions @ref LL_USART_SetLastClkPulseOutput().
 178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error cle
 197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error cl
 198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_NECF                       USART_ICR_NECF                /*!< Noise error dete
 199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error cl
 200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_TXFECF                     USART_ICR_TXFECF              /*!< TX FIFO Empty cl
 203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_TCBGTCF                    USART_ICR_TCBGTCF             /*!< Transmission com
 207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS clear flag *
 210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block cle
 212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
 213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_UDRCF                      USART_ICR_UDRCF               /*!< SPI Slave Underr
 214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
 215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 6


 230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXNE_RXFNE                 USART_ISR_RXNE_RXFNE          /*!< Read data regist
 232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXNE                       USART_ISR_RXNE                /*!< Read data regist
 234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXE_TXFNF                  USART_ISR_TXE_TXFNF           /*!< Transmit data re
 238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXE                        USART_ISR_TXE                 /*!< Transmit data re
 240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
 247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_UDR                        USART_ISR_UDR                 /*!< SPI Slave underr
 248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
 249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXFE                       USART_ISR_TXFE                /*!< TX FIFO empty fl
 260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXFF                       USART_ISR_RXFF                /*!< RX FIFO full fla
 261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TCBGT                      USART_ISR_TCBGT               /*!< Transmission com
 264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXFT                       USART_ISR_RXFT                /*!< RX FIFO threshol
 267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXFT                       USART_ISR_TXFT                /*!< TX FIFO threshol
 268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE_RXFNEIE             USART_CR1_RXNEIE_RXFNEIE      /*!< Read data regist
 280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE_TXFNFIE              USART_CR1_TXEIE_TXFNFIE       /*!< Transmit data re
 286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 7


 287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TXFEIE                     USART_CR1_TXFEIE              /*!< TX FIFO empty in
 295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RXFFIE                     USART_CR1_RXFFIE              /*!< RX FIFO full int
 296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_TXFTIE                     USART_CR3_TXFTIE              /*!< TX FIFO threshol
 303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_TCBGTIE                    USART_CR3_TCBGTIE             /*!< Transmission com
 306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_RXFTIE                     USART_CR3_RXFTIE              /*!< RX FIFO threshol
 309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_FIFOTHRESHOLD FIFO Threshold
 316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_8              0x00000000U /*!< FIFO reaches 1/8 of its depth */
 319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_4              0x00000001U /*!< FIFO reaches 1/4 of its depth */
 320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_2              0x00000002U /*!< FIFO reaches 1/2 of its depth */
 321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_3_4              0x00000003U /*!< FIFO reaches 3/4 of its depth */
 322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_7_8              0x00000004U /*!< FIFO reaches 7/8 of its depth */
 323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_8_8              0x00000005U /*!< FIFO becomes empty for TX and full
 324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 8


 344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 9


 401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
 418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PRESCALER Clock Source Prescaler
 419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV1                 0x00000000U                                        
 422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV2                 (USART_PRESC_PRESCALER_0)                          
 423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV4                 (USART_PRESC_PRESCALER_1)                          
 424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV6                 (USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
 425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV8                 (USART_PRESC_PRESCALER_2)                          
 426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV10                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_0)
 427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV12                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1)
 428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV16                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1 
 429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV32                (USART_PRESC_PRESCALER_3)                          
 430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV64                (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_0)
 431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV128               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1)
 432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV256               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1 
 433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 10


 458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 11


 515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 12


 572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Write a value in USART register
 586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __REG__ Register to be written
 588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Read a value in USART register
 595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __REG__ Register to be read
 597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Register value
 598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
 613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
 627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 13


 629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
 631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) \
 632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   (((((__PERIPHCLK__)/(USART_PRESCALER_TAB[(__PRESCALER__)]))*2U)\
 633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
 634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2U)\
 636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                                                 + ((__BAUDRATE__)/2U))/(__BAUDRATE_
 637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
 644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
 658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
 662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) \
 663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ((((__PERIPHCLK__)/(USART_PRESCALER_TAB[(__PRESCALER__)]))\
 664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
 665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/
 667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 14


 686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART Enable
 689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
 719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  FIFO Mode Enable
 726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_EnableFIFO
 729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableFIFO(USART_TypeDef *USARTx)
 733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  FIFO Mode Disable
 739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
 742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 15


 743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
 746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if FIFO Mode is enabled
 752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_IsEnabledFIFO
 755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledFIFO(const USART_TypeDef *USARTx)
 759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_FIFOEN) == (USART_CR1_FIFOEN)) ? 1UL : 0UL);
 761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX FIFO Threshold
 765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_SetTXFIFOThreshold
 768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return TX FIFO Threshold Configuration
 785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_GetTXFIFOThreshold
 788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXFIFOThreshold(const USART_TypeDef *USARTx)
 798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 16


 800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure RX FIFO Threshold
 804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_SetRXFIFOThreshold
 807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return RX FIFO Threshold Configuration
 824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_GetRXFIFOThreshold
 827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXFIFOThreshold(const USART_TypeDef *USARTx)
 837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX and RX FIFOs Threshold
 843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_ConfigFIFOsThreshold\n
 846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          RXFTCFG       LL_USART_ConfigFIFOsThreshold
 847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  TXThreshold This parameter can be one of the following values:
 849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  RXThreshold This parameter can be one of the following values:
 856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 17


 857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigFIFOsThreshold(USART_TypeDef *USARTx, uint32_t TXThreshold, uin
 865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG | USART_CR3_RXFTCFG, (TXThreshold << USART_CR3_T
 867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                     (RXThreshold << USART_CR3_RXFTCFG_Pos));
 868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_UESM);
 884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(const USART_TypeDef *USARTx)
 909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM)) ? 1UL : 0UL);
 911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR3_UCESM)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 18


 914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART Clock enabled in STOP Mode
 916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is called, USART Clock is enabled while in STOP mode
 917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_EnableClockInStopMode
 918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableClockInStopMode(USART_TypeDef *USARTx)
 922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_UCESM);
 924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART clock disabled in STOP Mode
 928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is called, USART Clock is disabled while in STOP mode
 929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_DisableClockInStopMode
 930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableClockInStopMode(USART_TypeDef *USARTx)
 934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_UCESM);
 936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if USART clock is enabled in STOP Mode
 940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_IsClockEnabledInStopMode
 941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsClockEnabledInStopMode(const USART_TypeDef *USARTx)
 945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_UCESM) == (USART_CR3_UCESM));
 947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR3_UCESM */
 950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Receiver Disable
 963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 19


 971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Transmitter Enable
 974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Transmitter Disable
 985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         of Transmitter and Receiver
 997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
1001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
1002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
1003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
1004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
1005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
1008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
1010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
1014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
1015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
1016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
1019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
1020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
1021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
1022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(const USART_TypeDef *USARTx)
1024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
1026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 20


1028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
1030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
1031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
1032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
1033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
1034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
1035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
1043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
1045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
1049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
1050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
1051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(const USART_TypeDef *USARTx)
1058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
1060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
1064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
1065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
1067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
1068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
1069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
1072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
1074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
1078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
1079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
1082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
1083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(const USART_TypeDef *USARTx)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 21


1085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
1087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
1091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
1092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
1093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
1101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
1103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
1107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
1108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
1109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(const USART_TypeDef *USARTx)
1116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
1118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
1122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
1123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
1127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_MME);
1129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
1133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
1134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
1138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
1140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 22


1142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
1144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
1145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(const USART_TypeDef *USARTx)
1149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME)) ? 1UL : 0UL);
1151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
1155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
1156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
1163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
1165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Oversampling mode
1169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
1170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(const USART_TypeDef *USARTx)
1176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
1178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
1182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
1185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
1187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
1192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
1194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
1198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 23


1199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
1202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(const USART_TypeDef *USARTx)
1208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
1210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
1214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
1217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
1219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
1224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
1226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
1230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
1233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(const USART_TypeDef *USARTx)
1239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
1241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
1245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
1248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
1250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
1255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 24


1256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
1257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
1261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
1264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(const USART_TypeDef *USARTx)
1270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
1272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
1276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
1280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
1281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
1282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
1283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
1284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
1285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
1287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
1290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
1293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
1298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
1300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
1303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Clock source prescaler for baudrate generator and oversampling
1305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_SetPrescaler
1308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 25


1313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
1327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve the Clock source prescaler for baudrate generator and oversampling
1331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_GetPrescaler
1334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetPrescaler(const USART_TypeDef *USARTx)
1350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->PRESC, USART_PRESC_PRESCALER));
1352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
1355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
1357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
1360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
1364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 26


1370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
1373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(const USART_TypeDef *USARTx)
1390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN)) ? 1UL : 0UL);
1392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(const USART_TypeDef *USARTx)
1421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 27


1427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                               uint32_t StopBits)
1454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(const USART_TypeDef *USARTx)
1482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 28


1484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(const USART_TypeDef *USARTx)
1509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(const USART_TypeDef *USARTx)
1536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 29


1541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(const USART_TypeDef *USARTx)
1565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(const USART_TypeDef *USARTx)
1596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 30


1598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(const USART_TypeDef *USARTx)
1635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN)) ? 1UL : 0UL);
1637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 31


1655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(const USART_TypeDef *USARTx)
1670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(const USART_TypeDef *USARTx)
1703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN)) ? 1UL : 0UL);
1705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Address of the USART node.
1709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         for wake up with address mark detection.
1711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 32


1712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         value and CMF flag is set on match)
1721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(const USART_TypeDef *USARTx)
1747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(const USART_TypeDef *USARTx)
1760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 33


1769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 34


1826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(const USART_TypeDef *USARTx)
1849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(const USART_TypeDef *USARTx)
1882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 35


1883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT)) ? 1UL : 0UL);
1884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Overrun detection
1888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Overrun detection
1899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(const USART_TypeDef *USARTx)
1915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS) ? 1UL : 0UL);
1917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 36


1940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(const USART_TypeDef *USARTx)
1948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (Baud rate value != 0)
1958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
1963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
1977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
1984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Presc
1985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                           uint32_t OverSampling,
1986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                           uint32_t BaudRate)
1987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
1988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                           uint32_t BaudRate)
1990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
1991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t usartdiv;
1993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t brrtemp;
1994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
1996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   if (PrescalerValue > LL_USART_PRESCALER_DIV256)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 37


1997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
1998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     /* Do not overstep the size of USART_PRESCALER_TAB */
1999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else if (BaudRate == 0U)
2001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     /* Can Not divide per 0 */
2003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
2005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
2007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
2011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
2013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
2015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
2016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     USARTx->BRR = brrtemp;
2017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else
2019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate
2022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
2024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
2030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
2031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
2032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
2033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
2034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
2036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
2037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
2038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
2039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
2040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
2041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
2042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
2043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
2044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
2045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
2046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
2047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
2048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
2049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
2050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
2051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
2052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
2053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 38


2054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Baud Rate
2055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(const USART_TypeDef *USARTx, uint32_t PeriphClk, uint
2058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                               uint32_t OverSampling)
2059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(const USART_TypeDef *USARTx, uint32_t PeriphClk, uint
2061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t usartdiv;
2064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t brrresult = 0x0U;
2065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t periphclkpresc = (uint32_t)(PeriphClk / (USART_PRESCALER_TAB[(uint8_t)PrescalerValue]));
2067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   usartdiv = USARTx->BRR;
2070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   if (usartdiv == 0U)
2072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     /* Do not perform a division by 0 */
2074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
2076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
2078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     if (usartdiv != 0U)
2079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     {
2080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = (periphclkpresc * 2U) / usartdiv;
2082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
2084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     }
2086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else
2088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
2090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     {
2091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = periphclkpresc / usartdiv;
2093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
2095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     }
2097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (brrresult);
2099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
2103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
2104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
2106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
2109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 39


2111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
2115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
2116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
2118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(const USART_TypeDef *USARTx)
2120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
2122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Block Length value in reception
2126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
2127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
2129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
2132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
2134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Get Block Length value in reception
2138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
2139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(const USART_TypeDef *USARTx)
2143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
2145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
2152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable IrDA mode
2157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
2160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
2164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 40


2168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable IrDA mode
2170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
2173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
2177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
2179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
2183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
2186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(const USART_TypeDef *USARTx)
2190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN)) ? 1UL : 0UL);
2192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
2196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
2199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
2201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
2203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
2206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
2208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
2212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
2215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
2219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(const USART_TypeDef *USARTx)
2221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
2223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 41


2225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
2227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
2231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
2233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
2242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
2246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
2248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(const USART_TypeDef *USARTx)
2250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
2259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
2264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
2267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
2271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
2273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
2277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
2280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 42


2282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
2284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
2286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
2290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
2293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(const USART_TypeDef *USARTx)
2297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK)) ? 1UL : 0UL);
2299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Smartcard mode
2303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
2306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
2310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Smartcard mode
2316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
2319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
2323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
2325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
2329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
2332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(const USART_TypeDef *USARTx)
2336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN)) ? 1UL : 0UL);
2338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 43


2339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
2345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
2346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
2347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
2348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
2349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
2350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
2352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
2355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
2357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
2364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
2366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(const USART_TypeDef *USARTx)
2368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
2370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
2374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
2378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
2380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
2389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
2393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
2395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 44


2396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(const USART_TypeDef *USARTx)
2397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
2403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
2407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
2409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
2412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, (uint16_t)(GuardTime << USART_GTPR_GT_Pos));
2414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
2418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
2422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
2424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(const USART_TypeDef *USARTx)
2426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
2428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
2435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
2440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
2443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
2447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 45


2453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
2456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(const USART_TypeDef *USARTx)
2473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL)) ? 1UL : 0UL);
2475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
2482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_SPI_SLAVE Configuration functions related to SPI Slave feat
2483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable SPI Synchronous Slave mode
2487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_EnableSPISlave
2490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlave(USART_TypeDef *USARTx)
2494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_SLVEN);
2496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable SPI Synchronous Slave mode
2500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_DisableSPISlave
2503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlave(USART_TypeDef *USARTx)
2507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_SLVEN);
2509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 46


2510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if  SPI Synchronous Slave mode is enabled
2513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_IsEnabledSPISlave
2516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlave(const USART_TypeDef *USARTx)
2520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_SLVEN) == (USART_CR2_SLVEN)) ? 1UL : 0UL);
2522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable SPI Slave Selection using NSS input pin
2526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   SPI Slave Selection depends on NSS input pin
2529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (The slave is selected when NSS is low and deselected when NSS is high).
2530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_EnableSPISlaveSelect
2531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlaveSelect(USART_TypeDef *USARTx)
2535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable SPI Slave Selection using NSS input pin
2541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   SPI Slave will be always selected and NSS input pin will be ignored.
2544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_DisableSPISlaveSelect
2545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlaveSelect(USART_TypeDef *USARTx)
2549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if  SPI Slave Selection depends on NSS input pin
2555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_IsEnabledSPISlaveSelect
2558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlaveSelect(const USART_TypeDef *USARTx)
2562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_DIS_NSS) != (USART_CR2_DIS_NSS)) ? 1UL : 0UL);
2564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 47


2567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
2571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(const USART_TypeDef *USARTx)
2602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable LIN mode
2608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable LIN mode
2621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 48


2624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(const USART_TypeDef *USARTx)
2641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN)) ? 1UL : 0UL);
2643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(const USART_TypeDef *USARTx)
2676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 49


2681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(const USART_TypeDef *USARTx)
2703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 50


2738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(const USART_TypeDef *USARTx)
2742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
2744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(const USART_TypeDef *USARTx)
2773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 51


2795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.
2815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
2829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 52


2852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.
2893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 53


2909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.
2932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 54


2966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.
2973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* Synchronous mode is activated by default */
2978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
3000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
3001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
3002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
3003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
3004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
3005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
3006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
3007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
3008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
3009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
3013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
3015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
3016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.
3017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
3019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
3020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
3021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
3022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 55


3023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
3026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
3027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
3028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
3029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
3030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
3031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
3032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
3033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
3034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
3035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
3036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
3037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
3038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
3039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
3040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
3041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
3042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
3043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
3044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
3045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
3046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
3047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
3048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
3052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
3054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
3055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.
3056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
3063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
3066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
3067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
3071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
3072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(const USART_TypeDef *USARTx)
3076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
3078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 56


3080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
3082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
3083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
3087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
3089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
3093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
3094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
3098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
3100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
3104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
3105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
3109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
3111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
3115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
3116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
3120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
3122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IsActiveFlag_RXNE  LL_USART_IsActiveFlag_RXNE_RXFNE /* Redefinition for legacy pur
3126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register or USART RX FIFO Not Empty Flag is set or not
3129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
3132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
3136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 57


3137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
3138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
3143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
3144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
3148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
3150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
3155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
3156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
3160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
3162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IsActiveFlag_TXE  LL_USART_IsActiveFlag_TXE_TXFNF /* Redefinition for legacy purpo
3166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty or USART TX FIFO Not Full Flag is set o
3169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
3172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
3176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
3178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
3183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
3184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
3188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
3190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 58


3194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
3195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
3198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(const USART_TypeDef *USARTx)
3202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
3204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
3208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
3211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(const USART_TypeDef *USARTx)
3215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF)) ? 1UL : 0UL);
3217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
3221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
3224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(const USART_TypeDef *USARTx)
3228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
3230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
3234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
3235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(const USART_TypeDef *USARTx)
3239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1UL : 0UL);
3241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
3245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
3248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 59


3251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(const USART_TypeDef *USARTx)
3252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF)) ? 1UL : 0UL);
3254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
3257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the SPI Slave Underrun error flag is set or not
3259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          UDR           LL_USART_IsActiveFlag_UDR
3262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_UDR(const USART_TypeDef *USARTx)
3266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_UDR) == (USART_ISR_UDR)) ? 1UL : 0UL);
3268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
3271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
3273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
3274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
3276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(const USART_TypeDef *USARTx)
3280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE)) ? 1UL : 0UL);
3282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
3286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
3287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
3289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(const USART_TypeDef *USARTx)
3293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF)) ? 1UL : 0UL);
3295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
3299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
3300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(const USART_TypeDef *USARTx)
3304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
3306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 60


3308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
3310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
3311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(const USART_TypeDef *USARTx)
3315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF)) ? 1UL : 0UL);
3317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
3321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
3322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(const USART_TypeDef *USARTx)
3326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF)) ? 1UL : 0UL);
3328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
3332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
3333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(const USART_TypeDef *USARTx)
3337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU)) ? 1UL : 0UL);
3339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
3343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
3346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(const USART_TypeDef *USARTx)
3350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
3352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
3356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
3357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
3361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
3363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 61


3365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
3367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
3368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
3372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
3374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Flag is set or not
3379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXFE          LL_USART_IsActiveFlag_TXFE
3382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFE(const USART_TypeDef *USARTx)
3386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFE) == (USART_ISR_TXFE)) ? 1UL : 0UL);
3388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Flag is set or not
3392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXFF          LL_USART_IsActiveFlag_RXFF
3395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFF(const USART_TypeDef *USARTx)
3399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFF) == (USART_ISR_RXFF)) ? 1UL : 0UL);
3401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Flag is set or not
3408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TCBGT         LL_USART_IsActiveFlag_TCBGT
3409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TCBGT(const USART_TypeDef *USARTx)
3413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TCBGT) == (USART_ISR_TCBGT)) ? 1UL : 0UL);
3415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
3418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Threshold Flag is set or not
3421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 62


3422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXFT          LL_USART_IsActiveFlag_TXFT
3424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFT(const USART_TypeDef *USARTx)
3428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFT) == (USART_ISR_TXFT)) ? 1UL : 0UL);
3430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Threshold Flag is set or not
3434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXFT          LL_USART_IsActiveFlag_RXFT
3437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFT(const USART_TypeDef *USARTx)
3441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFT) == (USART_ISR_RXFT)) ? 1UL : 0UL);
3443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
3448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
3449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
3453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
3455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
3459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
3460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
3464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
3466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Noise Error detected Flag
3470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
3471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
3475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NECF);
3477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 63


3479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
3481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
3482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
3486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
3488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
3492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
3493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
3497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
  58              		.loc 1 3497 1
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 8
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 80B4     		push	{r7}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0002 83B0     		sub	sp, sp, #12
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 16
  70 0004 00AF     		add	r7, sp, #0
  71              	.LCFI2:
  72              		.cfi_def_cfa_register 7
  73 0006 7860     		str	r0, [r7, #4]
3498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
  74              		.loc 1 3498 3
  75 0008 7B68     		ldr	r3, [r7, #4]
  76 000a 1022     		movs	r2, #16
  77 000c 1A62     		str	r2, [r3, #32]
3499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
  78              		.loc 1 3499 1
  79 000e 00BF     		nop
  80 0010 0C37     		adds	r7, r7, #12
  81              	.LCFI3:
  82              		.cfi_def_cfa_offset 4
  83 0012 BD46     		mov	sp, r7
  84              	.LCFI4:
  85              		.cfi_def_cfa_register 13
  86              		@ sp needed
  87 0014 5DF8047B 		ldr	r7, [sp], #4
  88              	.LCFI5:
  89              		.cfi_restore 7
  90              		.cfi_def_cfa_offset 0
  91 0018 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE775:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 64


  95              		.section	.text.LL_USART_ClearFlag_TC,"ax",%progbits
  96              		.align	1
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 101              	LL_USART_ClearFlag_TC:
 102              	.LFB776:
3500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear TX FIFO Empty Flag
3504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          TXFECF        LL_USART_ClearFlag_TXFE
3507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
3511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TXFECF);
3513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
3518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
3519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
3523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 103              		.loc 1 3523 1
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 8
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108 0000 80B4     		push	{r7}
 109              	.LCFI6:
 110              		.cfi_def_cfa_offset 4
 111              		.cfi_offset 7, -4
 112 0002 83B0     		sub	sp, sp, #12
 113              	.LCFI7:
 114              		.cfi_def_cfa_offset 16
 115 0004 00AF     		add	r7, sp, #0
 116              	.LCFI8:
 117              		.cfi_def_cfa_register 7
 118 0006 7860     		str	r0, [r7, #4]
3524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 119              		.loc 1 3524 3
 120 0008 7B68     		ldr	r3, [r7, #4]
 121 000a 4022     		movs	r2, #64
 122 000c 1A62     		str	r2, [r3, #32]
3525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 123              		.loc 1 3525 1
 124 000e 00BF     		nop
 125 0010 0C37     		adds	r7, r7, #12
 126              	.LCFI9:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 65


 127              		.cfi_def_cfa_offset 4
 128 0012 BD46     		mov	sp, r7
 129              	.LCFI10:
 130              		.cfi_def_cfa_register 13
 131              		@ sp needed
 132 0014 5DF8047B 		ldr	r7, [sp], #4
 133              	.LCFI11:
 134              		.cfi_restore 7
 135              		.cfi_def_cfa_offset 0
 136 0018 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE776:
 140              		.section	.text.LL_USART_EnableIT_IDLE,"ax",%progbits
 141              		.align	1
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	LL_USART_EnableIT_IDLE:
 147              	.LFB783:
3526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Smartcard Transmission Complete Before Guard Time Flag
3531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          TCBGTCF       LL_USART_ClearFlag_TCBGT
3532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TCBGT(USART_TypeDef *USARTx)
3536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCBGTCF);
3538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
3540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
3543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
3546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
3550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
3552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
3556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
3559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
3563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 66


3564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
3565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
3569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
3570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
3574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
3576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear End Of Block Flag
3580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
3583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
3587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
3589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
3592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear SPI Slave Underrun Flag
3594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          UDRCF         LL_USART_ClearFlag_UDR
3597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_UDR(USART_TypeDef *USARTx)
3601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_UDRCF);
3603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
3606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Character Match Flag
3608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
3609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
3613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
3615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
3619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 67


3621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
3622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
3626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
3628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
3632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
3635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
3636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
3640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
3641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
3645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 148              		.loc 1 3645 1
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 32
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 80B4     		push	{r7}
 154              	.LCFI12:
 155              		.cfi_def_cfa_offset 4
 156              		.cfi_offset 7, -4
 157 0002 89B0     		sub	sp, sp, #36
 158              	.LCFI13:
 159              		.cfi_def_cfa_offset 40
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI14:
 162              		.cfi_def_cfa_register 7
 163 0006 7860     		str	r0, [r7, #4]
 164              	.L6:
 165              	.LBB27:
3646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 166              		.loc 1 3646 3 discriminator 1
 167 0008 7B68     		ldr	r3, [r7, #4]
 168 000a FB60     		str	r3, [r7, #12]
 169              	.LBB28:
 170              	.LBB29:
 171              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 68


   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 69


  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 70


 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 71


 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 72


 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 73


 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 74


 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 75


 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 76


 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 77


 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 78


 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 79


 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 80


 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 81


 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 82


 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 83


 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 84


 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 85


 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 86


1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 87


1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1095:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1096:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1097:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1101:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1105:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1107:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1109:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1113:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1119:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1127:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1131:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1132:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1133:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1134:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1135:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1136:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1137:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1138:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1139:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1140:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1141:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1143:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1145:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 88


1148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
1152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1153:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 172              		.loc 2 1155 4 discriminator 1
 173 000c FB68     		ldr	r3, [r7, #12]
 174              		.syntax unified
 175              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 176 000e 53E8003F 		ldrex r3, [r3]
 177              	@ 0 "" 2
 178              		.thumb
 179              		.syntax unified
 180 0012 BB60     		str	r3, [r7, #8]
1156:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 181              		.loc 2 1156 10 discriminator 1
 182 0014 BB68     		ldr	r3, [r7, #8]
 183              	.LBE29:
 184              	.LBE28:
 185              		.loc 1 3646 3 discriminator 1
 186 0016 43F01003 		orr	r3, r3, #16
 187 001a FB61     		str	r3, [r7, #28]
 188 001c 7B68     		ldr	r3, [r7, #4]
 189 001e FA69     		ldr	r2, [r7, #28]
 190 0020 BA61     		str	r2, [r7, #24]
 191 0022 7B61     		str	r3, [r7, #20]
 192              	.LBB30:
 193              	.LBB31:
1157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1160:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1161:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1165:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1166:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1167:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1168:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1169:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1170:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1171:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1172:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1173:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1174:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1177:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1180:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1181:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1182:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 89


1183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1184:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1185:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1186:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1187:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1188:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1189:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1190:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1200:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1201:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
1203:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1204:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1205:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 194              		.loc 2 1206 4 discriminator 1
 195 0024 7969     		ldr	r1, [r7, #20]
 196 0026 BA69     		ldr	r2, [r7, #24]
 197              		.syntax unified
 198              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 199 0028 41E80023 		strex r3, r2, [r1]
 200              	@ 0 "" 2
 201              		.thumb
 202              		.syntax unified
 203 002c 3B61     		str	r3, [r7, #16]
1207:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 204              		.loc 2 1207 10 discriminator 1
 205 002e 3B69     		ldr	r3, [r7, #16]
 206              	.LBE31:
 207              	.LBE30:
 208              		.loc 1 3646 3 discriminator 1
 209 0030 002B     		cmp	r3, #0
 210 0032 E9D1     		bne	.L6
 211              	.LBE27:
3647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 212              		.loc 1 3647 1
 213 0034 00BF     		nop
 214 0036 00BF     		nop
 215 0038 2437     		adds	r7, r7, #36
 216              	.LCFI15:
 217              		.cfi_def_cfa_offset 4
 218 003a BD46     		mov	sp, r7
 219              	.LCFI16:
 220              		.cfi_def_cfa_register 13
 221              		@ sp needed
 222 003c 5DF8047B 		ldr	r7, [sp], #4
 223              	.LCFI17:
 224              		.cfi_restore 7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 90


 225              		.cfi_def_cfa_offset 0
 226 0040 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE783:
 230              		.section	.text.LL_USART_EnableIT_TC,"ax",%progbits
 231              		.align	1
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 236              	LL_USART_EnableIT_TC:
 237              	.LFB785:
3648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_EnableIT_RXNE  LL_USART_EnableIT_RXNE_RXFNE /* Redefinition for legacy purpose */
3651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RX Not Empty and RX FIFO Not Empty Interrupt
3654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
3657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
3668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
3669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
3673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
3675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
3680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
3681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
3685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 238              		.loc 1 3685 1
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 32
 241              		@ frame_needed = 1, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 243 0000 80B4     		push	{r7}
 244              	.LCFI18:
 245              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 91


 246              		.cfi_offset 7, -4
 247 0002 89B0     		sub	sp, sp, #36
 248              	.LCFI19:
 249              		.cfi_def_cfa_offset 40
 250 0004 00AF     		add	r7, sp, #0
 251              	.LCFI20:
 252              		.cfi_def_cfa_register 7
 253 0006 7860     		str	r0, [r7, #4]
 254              	.L10:
 255              	.LBB32:
3686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 256              		.loc 1 3686 3 discriminator 1
 257 0008 7B68     		ldr	r3, [r7, #4]
 258 000a FB60     		str	r3, [r7, #12]
 259              	.LBB33:
 260              	.LBB34:
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 261              		.loc 2 1155 4 discriminator 1
 262 000c FB68     		ldr	r3, [r7, #12]
 263              		.syntax unified
 264              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 265 000e 53E8003F 		ldrex r3, [r3]
 266              	@ 0 "" 2
 267              		.thumb
 268              		.syntax unified
 269 0012 BB60     		str	r3, [r7, #8]
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 270              		.loc 2 1156 10 discriminator 1
 271 0014 BB68     		ldr	r3, [r7, #8]
 272              	.LBE34:
 273              	.LBE33:
 274              		.loc 1 3686 3 discriminator 1
 275 0016 43F04003 		orr	r3, r3, #64
 276 001a FB61     		str	r3, [r7, #28]
 277 001c 7B68     		ldr	r3, [r7, #4]
 278 001e FA69     		ldr	r2, [r7, #28]
 279 0020 BA61     		str	r2, [r7, #24]
 280 0022 7B61     		str	r3, [r7, #20]
 281              	.LBB35:
 282              	.LBB36:
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 283              		.loc 2 1206 4 discriminator 1
 284 0024 7969     		ldr	r1, [r7, #20]
 285 0026 BA69     		ldr	r2, [r7, #24]
 286              		.syntax unified
 287              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 288 0028 41E80023 		strex r3, r2, [r1]
 289              	@ 0 "" 2
 290              		.thumb
 291              		.syntax unified
 292 002c 3B61     		str	r3, [r7, #16]
 293              		.loc 2 1207 10 discriminator 1
 294 002e 3B69     		ldr	r3, [r7, #16]
 295              	.LBE36:
 296              	.LBE35:
 297              		.loc 1 3686 3 discriminator 1
 298 0030 002B     		cmp	r3, #0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 92


 299 0032 E9D1     		bne	.L10
 300              	.LBE32:
3687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 301              		.loc 1 3687 1
 302 0034 00BF     		nop
 303 0036 00BF     		nop
 304 0038 2437     		adds	r7, r7, #36
 305              	.LCFI21:
 306              		.cfi_def_cfa_offset 4
 307 003a BD46     		mov	sp, r7
 308              	.LCFI22:
 309              		.cfi_def_cfa_register 13
 310              		@ sp needed
 311 003c 5DF8047B 		ldr	r7, [sp], #4
 312              	.LCFI23:
 313              		.cfi_restore 7
 314              		.cfi_def_cfa_offset 0
 315 0040 7047     		bx	lr
 316              		.cfi_endproc
 317              	.LFE785:
 319              		.section	.text.LL_USART_EnableIT_ERROR,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	LL_USART_EnableIT_ERROR:
 326              	.LFB792:
3688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_EnableIT_TXE  LL_USART_EnableIT_TXE_TXFNF /* Redefinition for legacy purpose */
3691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable TX Empty and TX FIFO Not Full Interrupt
3694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
3697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
3708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
3709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
3713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
3715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 93


3718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
3720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
3721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
3725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
3727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Character Match Interrupt
3731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_EnableIT_CM
3732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
3736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_CMIE);
3738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Receiver Timeout Interrupt
3742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
3743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
3747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
3749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable End Of Block Interrupt
3753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_EnableIT_EOB
3756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
3760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_EOBIE);
3762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable TX FIFO Empty Interrupt
3767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_EnableIT_TXFE
3770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFE(USART_TypeDef *USARTx)
3774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 94


3775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXFEIE);
3776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RX FIFO Full Interrupt
3780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_EnableIT_RXFF
3781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFF(USART_TypeDef *USARTx)
3785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXFFIE);
3787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
3792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
3795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
3799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
3801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Error Interrupt
3805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           0: Interrupt is inhibited
3808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
3810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
3814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 327              		.loc 1 3814 1
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 32
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0000 80B4     		push	{r7}
 333              	.LCFI24:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 7, -4
 336 0002 89B0     		sub	sp, sp, #36
 337              	.LCFI25:
 338              		.cfi_def_cfa_offset 40
 339 0004 00AF     		add	r7, sp, #0
 340              	.LCFI26:
 341              		.cfi_def_cfa_register 7
 342 0006 7860     		str	r0, [r7, #4]
 343              	.L14:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 95


 344              	.LBB37:
3815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 345              		.loc 1 3815 3 discriminator 1
 346 0008 7B68     		ldr	r3, [r7, #4]
 347 000a 0833     		adds	r3, r3, #8
 348 000c FB60     		str	r3, [r7, #12]
 349              	.LBB38:
 350              	.LBB39:
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 351              		.loc 2 1155 4 discriminator 1
 352 000e FB68     		ldr	r3, [r7, #12]
 353              		.syntax unified
 354              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 355 0010 53E8003F 		ldrex r3, [r3]
 356              	@ 0 "" 2
 357              		.thumb
 358              		.syntax unified
 359 0014 BB60     		str	r3, [r7, #8]
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360              		.loc 2 1156 10 discriminator 1
 361 0016 BB68     		ldr	r3, [r7, #8]
 362              	.LBE39:
 363              	.LBE38:
 364              		.loc 1 3815 3 discriminator 1
 365 0018 43F00103 		orr	r3, r3, #1
 366 001c FB61     		str	r3, [r7, #28]
 367 001e 7B68     		ldr	r3, [r7, #4]
 368 0020 0833     		adds	r3, r3, #8
 369 0022 FA69     		ldr	r2, [r7, #28]
 370 0024 BA61     		str	r2, [r7, #24]
 371 0026 7B61     		str	r3, [r7, #20]
 372              	.LBB40:
 373              	.LBB41:
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 374              		.loc 2 1206 4 discriminator 1
 375 0028 7969     		ldr	r1, [r7, #20]
 376 002a BA69     		ldr	r2, [r7, #24]
 377              		.syntax unified
 378              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 379 002c 41E80023 		strex r3, r2, [r1]
 380              	@ 0 "" 2
 381              		.thumb
 382              		.syntax unified
 383 0030 3B61     		str	r3, [r7, #16]
 384              		.loc 2 1207 10 discriminator 1
 385 0032 3B69     		ldr	r3, [r7, #16]
 386              	.LBE41:
 387              	.LBE40:
 388              		.loc 1 3815 3 discriminator 1
 389 0034 002B     		cmp	r3, #0
 390 0036 E7D1     		bne	.L14
 391              	.LBE37:
3816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 392              		.loc 1 3816 1
 393 0038 00BF     		nop
 394 003a 00BF     		nop
 395 003c 2437     		adds	r7, r7, #36
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 96


 396              	.LCFI27:
 397              		.cfi_def_cfa_offset 4
 398 003e BD46     		mov	sp, r7
 399              	.LCFI28:
 400              		.cfi_def_cfa_register 13
 401              		@ sp needed
 402 0040 5DF8047B 		ldr	r7, [sp], #4
 403              	.LCFI29:
 404              		.cfi_restore 7
 405              		.cfi_def_cfa_offset 0
 406 0044 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE792:
 410              		.section	.text.LL_USART_EnableDMAReq_RX,"ax",%progbits
 411              		.align	1
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 416              	LL_USART_EnableDMAReq_RX:
 417              	.LFB819:
3817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
3820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
3823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
3827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
3829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Wake Up from Stop Mode Interrupt
3833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_EnableIT_WKUP
3836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
3840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_WUFIE);
3842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable TX FIFO Threshold Interrupt
3847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_EnableIT_TXFT
3850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFT(USART_TypeDef *USARTx)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 97


3854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TXFTIE);
3856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Smartcard Transmission Complete Before Guard Time Interrupt
3863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_EnableIT_TCBGT
3866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TCBGT(USART_TypeDef *USARTx)
3870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
3874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RX FIFO Threshold Interrupt
3878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_EnableIT_RXFT
3881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFT(USART_TypeDef *USARTx)
3885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_RXFTIE);
3887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
3892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
3893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
3897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DisableIT_RXNE  LL_USART_DisableIT_RXNE_RXFNE /* Redefinition for legacy purpose *
3903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable RX Not Empty and RX FIFO Not Empty Interrupt
3906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_DisableIT_RXNE_RXFNE
3909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 98


3911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
3920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
3921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
3925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
3927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
3932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
3933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
3937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
3939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DisableIT_TXE  LL_USART_DisableIT_TXE_TXFNF /* Redefinition for legacy purpose */
3943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable TX Empty and TX FIFO Not Full Interrupt
3946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
3949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
3960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
3961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
3965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
3967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 99


3968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
3972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
3973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
3977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
3979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Character Match Interrupt
3983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_DisableIT_CM
3984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
3988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_CMIE);
3990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Receiver Timeout Interrupt
3994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_DisableIT_RTO
3995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
3999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RTOIE);
4001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable End Of Block Interrupt
4005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
4006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
4007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_DisableIT_EOB
4008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
4012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_EOBIE);
4014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
4017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable TX FIFO Empty Interrupt
4019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_DisableIT_TXFE
4022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 100


4025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFE(USART_TypeDef *USARTx)
4026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXFEIE);
4028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable RX FIFO Full Interrupt
4032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_DisableIT_RXFF
4035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFF(USART_TypeDef *USARTx)
4039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXFFIE);
4041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
4046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
4047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
4048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
4049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
4053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
4055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Error Interrupt
4059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
4060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
4061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           0: Interrupt is inhibited
4062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
4063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
4064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
4068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
4070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
4074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
4075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
4076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
4077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
4081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 101


4082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
4083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Wake Up from Stop Mode Interrupt
4087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
4088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
4089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_DisableIT_WKUP
4090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_WKUP(USART_TypeDef *USARTx)
4094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_WUFIE);
4096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
4099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable TX FIFO Threshold Interrupt
4101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_DisableIT_TXFT
4104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFT(USART_TypeDef *USARTx)
4108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TXFTIE);
4110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
4114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
4115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Smartcard Transmission Complete Before Guard Time Interrupt
4117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
4118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
4119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_DisableIT_TCBGT
4120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TCBGT(USART_TypeDef *USARTx)
4124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
4126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
4128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
4130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable RX FIFO Threshold Interrupt
4132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_DisableIT_RXFT
4135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFT(USART_TypeDef *USARTx)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 102


4139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_RXFTIE);
4141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
4146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
4147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
4151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
4153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
4156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IsEnabledIT_RXNE  LL_USART_IsEnabledIT_RXNE_RXFNE /* Redefinition for legacy purpo
4157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty and USART RX FIFO Not Empty Interrupt is enabled or dis
4160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
4163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
4167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0
4169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
4172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
4174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
4175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
4179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
4181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
4186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
4187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
4191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
4193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 103


4196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IsEnabledIT_TXE  LL_USART_IsEnabledIT_TXE_TXFNF /* Redefinition for legacy purpose
4197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART TX Empty and USART TX FIFO Not Full Interrupt is enabled or disabled
4200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
4203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
4207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL
4209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
4212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
4214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
4215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
4219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
4221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
4226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
4227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(const USART_TypeDef *USARTx)
4231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
4233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Character Match Interrupt is enabled or disabled.
4237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_IsEnabledIT_CM
4238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CM(const USART_TypeDef *USARTx)
4242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_CMIE) == (USART_CR1_CMIE)) ? 1UL : 0UL);
4244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Receiver Timeout Interrupt is enabled or disabled.
4248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_IsEnabledIT_RTO
4249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RTO(const USART_TypeDef *USARTx)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 104


4253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RTOIE) == (USART_CR1_RTOIE)) ? 1UL : 0UL);
4255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Interrupt is enabled or disabled.
4259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
4260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
4261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_IsEnabledIT_EOB
4262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_EOB(const USART_TypeDef *USARTx)
4266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_EOBIE) == (USART_CR1_EOBIE)) ? 1UL : 0UL);
4268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
4271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Interrupt is enabled or disabled
4273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_IsEnabledIT_TXFE
4276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXFE(const USART_TypeDef *USARTx)
4280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXFEIE) == (USART_CR1_TXFEIE)) ? 1UL : 0UL);
4282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Interrupt is enabled or disabled
4286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_IsEnabledIT_RXFF
4289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXFF(const USART_TypeDef *USARTx)
4293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXFFIE) == (USART_CR1_RXFFIE)) ? 1UL : 0UL);
4295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
4300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
4301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
4302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
4303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(const USART_TypeDef *USARTx)
4307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE)) ? 1UL : 0UL);
4309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 105


4310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
4313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
4314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
4318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
4320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
4324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
4325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
4326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
4327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(const USART_TypeDef *USARTx)
4331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE)) ? 1UL : 0UL);
4333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from Stop Mode Interrupt is enabled or disabled.
4337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
4338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
4339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_IsEnabledIT_WKUP
4340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_WKUP(const USART_TypeDef *USARTx)
4344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1UL : 0UL);
4346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
4349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if USART TX FIFO Threshold Interrupt is enabled or disabled
4351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_IsEnabledIT_TXFT
4354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXFT(const USART_TypeDef *USARTx)
4358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_TXFTIE) == (USART_CR3_TXFTIE)) ? 1UL : 0UL);
4360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
4364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
4365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Interrupt is enabled or 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 106


4367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
4368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
4369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_IsEnabledIT_TCBGT
4370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TCBGT(const USART_TypeDef *USARTx)
4374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_TCBGTIE) == (USART_CR3_TCBGTIE)) ? 1UL : 0UL);
4376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
4378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
4380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if USART RX FIFO Threshold Interrupt is enabled or disabled
4382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_IsEnabledIT_RXFT
4385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXFT(const USART_TypeDef *USARTx)
4389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_RXFTIE) == (USART_CR3_RXFTIE)) ? 1UL : 0UL);
4391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
4394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
4396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
4399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
4400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
4404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
4405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
4409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 418              		.loc 1 4409 1
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 32
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 423 0000 80B4     		push	{r7}
 424              	.LCFI30:
 425              		.cfi_def_cfa_offset 4
 426              		.cfi_offset 7, -4
 427 0002 89B0     		sub	sp, sp, #36
 428              	.LCFI31:
 429              		.cfi_def_cfa_offset 40
 430 0004 00AF     		add	r7, sp, #0
 431              	.LCFI32:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 107


 432              		.cfi_def_cfa_register 7
 433 0006 7860     		str	r0, [r7, #4]
 434              	.L18:
 435              	.LBB42:
4410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 436              		.loc 1 4410 3 discriminator 1
 437 0008 7B68     		ldr	r3, [r7, #4]
 438 000a 0833     		adds	r3, r3, #8
 439 000c FB60     		str	r3, [r7, #12]
 440              	.LBB43:
 441              	.LBB44:
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 442              		.loc 2 1155 4 discriminator 1
 443 000e FB68     		ldr	r3, [r7, #12]
 444              		.syntax unified
 445              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 446 0010 53E8003F 		ldrex r3, [r3]
 447              	@ 0 "" 2
 448              		.thumb
 449              		.syntax unified
 450 0014 BB60     		str	r3, [r7, #8]
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 451              		.loc 2 1156 10 discriminator 1
 452 0016 BB68     		ldr	r3, [r7, #8]
 453              	.LBE44:
 454              	.LBE43:
 455              		.loc 1 4410 3 discriminator 1
 456 0018 43F04003 		orr	r3, r3, #64
 457 001c FB61     		str	r3, [r7, #28]
 458 001e 7B68     		ldr	r3, [r7, #4]
 459 0020 0833     		adds	r3, r3, #8
 460 0022 FA69     		ldr	r2, [r7, #28]
 461 0024 BA61     		str	r2, [r7, #24]
 462 0026 7B61     		str	r3, [r7, #20]
 463              	.LBB45:
 464              	.LBB46:
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 465              		.loc 2 1206 4 discriminator 1
 466 0028 7969     		ldr	r1, [r7, #20]
 467 002a BA69     		ldr	r2, [r7, #24]
 468              		.syntax unified
 469              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 470 002c 41E80023 		strex r3, r2, [r1]
 471              	@ 0 "" 2
 472              		.thumb
 473              		.syntax unified
 474 0030 3B61     		str	r3, [r7, #16]
 475              		.loc 2 1207 10 discriminator 1
 476 0032 3B69     		ldr	r3, [r7, #16]
 477              	.LBE46:
 478              	.LBE45:
 479              		.loc 1 4410 3 discriminator 1
 480 0034 002B     		cmp	r3, #0
 481 0036 E7D1     		bne	.L18
 482              	.LBE42:
4411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 483              		.loc 1 4411 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 108


 484 0038 00BF     		nop
 485 003a 00BF     		nop
 486 003c 2437     		adds	r7, r7, #36
 487              	.LCFI33:
 488              		.cfi_def_cfa_offset 4
 489 003e BD46     		mov	sp, r7
 490              	.LCFI34:
 491              		.cfi_def_cfa_register 13
 492              		@ sp needed
 493 0040 5DF8047B 		ldr	r7, [sp], #4
 494              	.LCFI35:
 495              		.cfi_restore 7
 496              		.cfi_def_cfa_offset 0
 497 0044 7047     		bx	lr
 498              		.cfi_endproc
 499              	.LFE819:
 501              		.section	.text.LL_USART_EnableDMAReq_TX,"ax",%progbits
 502              		.align	1
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 507              	LL_USART_EnableDMAReq_TX:
 508              	.LFB822:
4412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
4415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
4416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
4420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
4422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
4426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
4427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(const USART_TypeDef *USARTx)
4431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
4432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR)) ? 1UL : 0UL);
4433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
4434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
4435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
4436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
4437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
4438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
4439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
4440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
4441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
4442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 509              		.loc 1 4442 1
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 32
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 109


 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514 0000 80B4     		push	{r7}
 515              	.LCFI36:
 516              		.cfi_def_cfa_offset 4
 517              		.cfi_offset 7, -4
 518 0002 89B0     		sub	sp, sp, #36
 519              	.LCFI37:
 520              		.cfi_def_cfa_offset 40
 521 0004 00AF     		add	r7, sp, #0
 522              	.LCFI38:
 523              		.cfi_def_cfa_register 7
 524 0006 7860     		str	r0, [r7, #4]
 525              	.L22:
 526              	.LBB47:
4443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 527              		.loc 1 4443 3 discriminator 1
 528 0008 7B68     		ldr	r3, [r7, #4]
 529 000a 0833     		adds	r3, r3, #8
 530 000c FB60     		str	r3, [r7, #12]
 531              	.LBB48:
 532              	.LBB49:
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533              		.loc 2 1155 4 discriminator 1
 534 000e FB68     		ldr	r3, [r7, #12]
 535              		.syntax unified
 536              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 537 0010 53E8003F 		ldrex r3, [r3]
 538              	@ 0 "" 2
 539              		.thumb
 540              		.syntax unified
 541 0014 BB60     		str	r3, [r7, #8]
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 542              		.loc 2 1156 10 discriminator 1
 543 0016 BB68     		ldr	r3, [r7, #8]
 544              	.LBE49:
 545              	.LBE48:
 546              		.loc 1 4443 3 discriminator 1
 547 0018 43F08003 		orr	r3, r3, #128
 548 001c FB61     		str	r3, [r7, #28]
 549 001e 7B68     		ldr	r3, [r7, #4]
 550 0020 0833     		adds	r3, r3, #8
 551 0022 FA69     		ldr	r2, [r7, #28]
 552 0024 BA61     		str	r2, [r7, #24]
 553 0026 7B61     		str	r3, [r7, #20]
 554              	.LBB50:
 555              	.LBB51:
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 556              		.loc 2 1206 4 discriminator 1
 557 0028 7969     		ldr	r1, [r7, #20]
 558 002a BA69     		ldr	r2, [r7, #24]
 559              		.syntax unified
 560              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 561 002c 41E80023 		strex r3, r2, [r1]
 562              	@ 0 "" 2
 563              		.thumb
 564              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 110


 565 0030 3B61     		str	r3, [r7, #16]
 566              		.loc 2 1207 10 discriminator 1
 567 0032 3B69     		ldr	r3, [r7, #16]
 568              	.LBE51:
 569              	.LBE50:
 570              		.loc 1 4443 3 discriminator 1
 571 0034 002B     		cmp	r3, #0
 572 0036 E7D1     		bne	.L22
 573              	.LBE47:
4444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 574              		.loc 1 4444 1
 575 0038 00BF     		nop
 576 003a 00BF     		nop
 577 003c 2437     		adds	r7, r7, #36
 578              	.LCFI39:
 579              		.cfi_def_cfa_offset 4
 580 003e BD46     		mov	sp, r7
 581              	.LCFI40:
 582              		.cfi_def_cfa_register 13
 583              		@ sp needed
 584 0040 5DF8047B 		ldr	r7, [sp], #4
 585              	.LCFI41:
 586              		.cfi_restore 7
 587              		.cfi_def_cfa_offset 0
 588 0044 7047     		bx	lr
 589              		.cfi_endproc
 590              	.LFE822:
 592              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
 593              		.align	2
 596              	CHANNEL_OFFSET_TAB:
 597 0000 081C3044 		.ascii	"\010\0340DXl\200"
 597      586C80
 598              		.section	.text.LL_DMA_EnableChannel,"ax",%progbits
 599              		.align	1
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 604              	LL_DMA_EnableChannel:
 605              	.LFB895:
 606              		.file 3 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
   1:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
   2:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @file    stm32l4xx_ll_dma.h
   4:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @attention
   8:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *
   9:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * All rights reserved.
  11:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *
  12:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * in the root directory of this software component.
  14:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *
  16:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   ******************************************************************************
  17:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 111


  18:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  19:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #ifndef STM32L4xx_LL_DMA_H
  21:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define STM32L4xx_LL_DMA_H
  22:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  23:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #ifdef __cplusplus
  24:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** extern "C" {
  25:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif
  26:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  27:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #include "stm32l4xx.h"
  29:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(DMAMUX1)
  30:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #include "stm32l4xx_ll_dmamux.h"
  31:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /* DMAMUX1 */
  32:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  33:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @addtogroup STM32L4xx_LL_Driver
  34:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
  35:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  36:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  37:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  38:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  39:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  40:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
  41:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  42:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  43:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  44:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  45:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  46:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
  47:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  48:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Array used to get the DMA channel register offset versus channel index LL_DMA_CHANNEL_x */
  49:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** static const uint8_t CHANNEL_OFFSET_TAB[] =
  50:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
  51:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel1_BASE - DMA1_BASE),
  52:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel2_BASE - DMA1_BASE),
  53:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel3_BASE - DMA1_BASE),
  54:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel4_BASE - DMA1_BASE),
  55:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel5_BASE - DMA1_BASE),
  56:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel6_BASE - DMA1_BASE),
  57:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel7_BASE - DMA1_BASE)
  58:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** };
  59:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
  60:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
  61:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  62:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  63:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  64:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(DMAMUX1)
  65:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
  66:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Constants DMA Private Constants
  67:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
  68:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  69:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Define used to get CSELR register offset */
  70:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define DMA_CSELR_OFFSET                  (uint32_t)(DMA1_CSELR_BASE - DMA1_BASE)
  71:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  72:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Defines used for the bit position in the register and perform offsets */
  73:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define DMA_POSITION_CSELR_CXS            POSITION_VAL(DMA_CSELR_C1S << (Channel*4U))
  74:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 112


  75:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
  76:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  77:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /* DMAMUX1 */
  78:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  79:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(DMAMUX1)
  80:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  81:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
  82:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
  83:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  84:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
  85:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Helper macro to convert DMA Instance DMAx into DMAMUX channel
  86:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   DMAMUX channel 0 to 6 are mapped to DMA1 channel 1 to 7.
  87:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         DMAMUX channel 7 to 13 are mapped to DMA2 channel 1 to 7.
  88:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
  89:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Channel_Offset (LL_DMA_CHANNEL_7 or 0).
  90:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  91:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(__DMA_INSTANCE__)   \
  92:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** (((__DMA_INSTANCE__) == DMA1) ? 0x00000000U : LL_DMA_CHANNEL_7)
  93:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
  94:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
  95:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
  96:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
  97:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
  98:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  99:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
 100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /* DMAMUX1 */
 107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
 108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
 110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** typedef struct
 113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
 115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
 116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
 120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
 121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
 125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
 126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
 127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
 131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 113


 132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         @note: The circular buffer mode cannot be used if the memor
 133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                                data transfer direction is configured on the selecte
 134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         is incremented or not.
 139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         is incremented or not.
 145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(DMAMUX1)
 169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t PeriphRequest;          /*!< Specifies the peripheral request.
 170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMAMUX_LL_EC_REQUEST
 171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
 174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t PeriphRequest;          /*!< Specifies the peripheral request.
 175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_REQUEST
 176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /* DMAMUX1 */
 179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 114


 189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CLEAR_FLAG Clear Flags Defines
 196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_WriteReg function
 197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF1                 DMA_IFCR_CGIF1        /*!< Channel 1 global flag         
 200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF1                DMA_IFCR_CTCIF1       /*!< Channel 1 transfer complete fl
 201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF1                DMA_IFCR_CHTIF1       /*!< Channel 1 half transfer flag  
 202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF1                DMA_IFCR_CTEIF1       /*!< Channel 1 transfer error flag 
 203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF2                 DMA_IFCR_CGIF2        /*!< Channel 2 global flag         
 204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF2                DMA_IFCR_CTCIF2       /*!< Channel 2 transfer complete fl
 205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF2                DMA_IFCR_CHTIF2       /*!< Channel 2 half transfer flag  
 206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF2                DMA_IFCR_CTEIF2       /*!< Channel 2 transfer error flag 
 207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF3                 DMA_IFCR_CGIF3        /*!< Channel 3 global flag         
 208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF3                DMA_IFCR_CTCIF3       /*!< Channel 3 transfer complete fl
 209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF3                DMA_IFCR_CHTIF3       /*!< Channel 3 half transfer flag  
 210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF3                DMA_IFCR_CTEIF3       /*!< Channel 3 transfer error flag 
 211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF4                 DMA_IFCR_CGIF4        /*!< Channel 4 global flag         
 212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF4                DMA_IFCR_CTCIF4       /*!< Channel 4 transfer complete fl
 213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF4                DMA_IFCR_CHTIF4       /*!< Channel 4 half transfer flag  
 214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF4                DMA_IFCR_CTEIF4       /*!< Channel 4 transfer error flag 
 215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF5                 DMA_IFCR_CGIF5        /*!< Channel 5 global flag         
 216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF5                DMA_IFCR_CTCIF5       /*!< Channel 5 transfer complete fl
 217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF5                DMA_IFCR_CHTIF5       /*!< Channel 5 half transfer flag  
 218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF5                DMA_IFCR_CTEIF5       /*!< Channel 5 transfer error flag 
 219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF6                 DMA_IFCR_CGIF6        /*!< Channel 6 global flag         
 220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF6                DMA_IFCR_CTCIF6       /*!< Channel 6 transfer complete fl
 221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF6                DMA_IFCR_CHTIF6       /*!< Channel 6 half transfer flag  
 222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF6                DMA_IFCR_CTEIF6       /*!< Channel 6 transfer error flag 
 223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF7                 DMA_IFCR_CGIF7        /*!< Channel 7 global flag         
 224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF7                DMA_IFCR_CTCIF7       /*!< Channel 7 transfer complete fl
 225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF7                DMA_IFCR_CHTIF7       /*!< Channel 7 half transfer flag  
 226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF7                DMA_IFCR_CTEIF7       /*!< Channel 7 transfer error flag 
 227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_GET_FLAG Get Flags Defines
 232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_ReadReg function
 233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_GIF1                   DMA_ISR_GIF1          /*!< Channel 1 global flag         
 236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF1                  DMA_ISR_TCIF1         /*!< Channel 1 transfer complete fl
 237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF1                  DMA_ISR_HTIF1         /*!< Channel 1 half transfer flag  
 238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF1                  DMA_ISR_TEIF1         /*!< Channel 1 transfer error flag 
 239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_GIF2                   DMA_ISR_GIF2          /*!< Channel 2 global flag         
 240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF2                  DMA_ISR_TCIF2         /*!< Channel 2 transfer complete fl
 241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF2                  DMA_ISR_HTIF2         /*!< Channel 2 half transfer flag  
 242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF2                  DMA_ISR_TEIF2         /*!< Channel 2 transfer error flag 
 243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_GIF3                   DMA_ISR_GIF3          /*!< Channel 3 global flag         
 244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF3                  DMA_ISR_TCIF3         /*!< Channel 3 transfer complete fl
 245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF3                  DMA_ISR_HTIF3         /*!< Channel 3 half transfer flag  
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 115


 246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF3                  DMA_ISR_TEIF3         /*!< Channel 3 transfer error flag 
 247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_GIF4                   DMA_ISR_GIF4          /*!< Channel 4 global flag         
 248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF4                  DMA_ISR_TCIF4         /*!< Channel 4 transfer complete fl
 249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF4                  DMA_ISR_HTIF4         /*!< Channel 4 half transfer flag  
 250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF4                  DMA_ISR_TEIF4         /*!< Channel 4 transfer error flag 
 251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_GIF5                   DMA_ISR_GIF5          /*!< Channel 5 global flag         
 252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF5                  DMA_ISR_TCIF5         /*!< Channel 5 transfer complete fl
 253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF5                  DMA_ISR_HTIF5         /*!< Channel 5 half transfer flag  
 254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF5                  DMA_ISR_TEIF5         /*!< Channel 5 transfer error flag 
 255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_GIF6                   DMA_ISR_GIF6          /*!< Channel 6 global flag         
 256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF6                  DMA_ISR_TCIF6         /*!< Channel 6 transfer complete fl
 257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF6                  DMA_ISR_HTIF6         /*!< Channel 6 half transfer flag  
 258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF6                  DMA_ISR_TEIF6         /*!< Channel 6 transfer error flag 
 259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_GIF7                   DMA_ISR_GIF7          /*!< Channel 7 global flag         
 260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF7                  DMA_ISR_TCIF7         /*!< Channel 7 transfer complete fl
 261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF7                  DMA_ISR_HTIF7         /*!< Channel 7 half transfer flag  
 262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF7                  DMA_ISR_TEIF7         /*!< Channel 7 transfer error flag 
 263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_IT IT Defines
 268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief    IT defines which can be used with LL_DMA_ReadReg and  LL_DMA_WriteReg functions
 269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CCR_TCIE                   DMA_CCR_TCIE          /*!< Transfer complete interrupt */
 272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CCR_HTIE                   DMA_CCR_HTIE          /*!< Half Transfer interrupt     */
 273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CCR_TEIE                   DMA_CCR_TEIE          /*!< Transfer error interrupt    */
 274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  0x00000000U /*!< DMA Channel 1 */
 282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  0x00000001U /*!< DMA Channel 2 */
 283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  0x00000002U /*!< DMA Channel 3 */
 284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  0x00000003U /*!< DMA Channel 4 */
 285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  0x00000004U /*!< DMA Channel 5 */
 286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  0x00000005U /*!< DMA Channel 6 */
 287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  0x00000006U /*!< DMA Channel 7 */
 288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_CHANNEL_ALL                0xFFFF0000U /*!< DMA Channel all (used only for function 
 290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION Transfer Direction
 296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U             /*!< Peripheral to memory directi
 299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR             /*!< Memory to peripheral directi
 300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM         /*!< Memory to memory direction  
 301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 116


 303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE Transfer mode
 306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U             /*!< Normal Mode                 
 309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_CCR_CIRC            /*!< Circular Mode               
 310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH Peripheral increment mode
 315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_CCR_PINC            /*!< Peripheral increment mode En
 318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U             /*!< Peripheral increment mode Di
 319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY Memory increment mode
 324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_CCR_MINC            /*!< Memory increment mode Enable
 327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U             /*!< Memory increment mode Disabl
 328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN Peripheral data alignment
 333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U             /*!< Peripheral data alignment : 
 336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_CCR_PSIZE_0         /*!< Peripheral data alignment : 
 337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_CCR_PSIZE_1         /*!< Peripheral data alignment : 
 338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN Memory data alignment
 343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U             /*!< Memory data alignment : Byte
 346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_CCR_MSIZE_0         /*!< Memory data alignment : Half
 347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_CCR_MSIZE_1         /*!< Memory data alignment : Word
 348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY Transfer Priority level
 353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U             /*!< Priority level : Low       *
 356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_CCR_PL_0            /*!< Priority level : Medium    *
 357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_CCR_PL_1            /*!< Priority level : High      *
 358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_CCR_PL              /*!< Priority level : Very_High *
 359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 117


 360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if !defined  (DMAMUX1)
 364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_REQUEST Transfer peripheral request
 365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_0                  0x00000000U /*!< DMA peripheral request 0  */
 368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_1                  0x00000001U /*!< DMA peripheral request 1  */
 369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_2                  0x00000002U /*!< DMA peripheral request 2  */
 370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_3                  0x00000003U /*!< DMA peripheral request 3  */
 371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_4                  0x00000004U /*!< DMA peripheral request 4  */
 372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_5                  0x00000005U /*!< DMA peripheral request 5  */
 373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_6                  0x00000006U /*!< DMA peripheral request 6  */
 374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_REQUEST_7                  0x00000007U /*!< DMA peripheral request 7  */
 375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /* !defined DMAMUX1 */
 379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Write a value in DMA register
 393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __REG__ Register to be written
 395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Read a value in DMA register
 402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __REG__ Register to be read
 404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Register value
 405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxChannely
 412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into DMAx
 416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 118


 417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval DMAx
 418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(DMA2)
 420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)   \
 421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel7)) ?  DMA2 : DMA1)
 422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
 423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)  (DMA1)
 424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif
 425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into LL_DMA_CHANNEL_y
 428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined (DMA2)
 432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel6)) ? LL_DMA_CHANNEL_6 : \
 446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
 448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif
 462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
 463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif
 472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 119


 474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_CHANNEL_y into DMAx_Channely
 475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  __CHANNEL__ LL_DMA_CHANNEL_y
 477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval DMAx_Channely
 478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined (DMA2)
 480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  DMA2_Channel7)
 496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
 497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  DMA1_Channel7)
 510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif
 511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
 512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  DMA1_Channel7)
 520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif
 521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
 528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 120


 531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  * @{
 533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****  */
 534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
 537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Enable DMA channel.
 540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_EnableChannel
 541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 607              		.loc 3 553 1
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 16
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 612 0000 80B4     		push	{r7}
 613              	.LCFI42:
 614              		.cfi_def_cfa_offset 4
 615              		.cfi_offset 7, -4
 616 0002 85B0     		sub	sp, sp, #20
 617              	.LCFI43:
 618              		.cfi_def_cfa_offset 24
 619 0004 00AF     		add	r7, sp, #0
 620              	.LCFI44:
 621              		.cfi_def_cfa_register 7
 622 0006 7860     		str	r0, [r7, #4]
 623 0008 3960     		str	r1, [r7]
 554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 624              		.loc 3 554 12
 625 000a 7B68     		ldr	r3, [r7, #4]
 626 000c FB60     		str	r3, [r7, #12]
 555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 627              		.loc 3 555 3
 628 000e 0C4A     		ldr	r2, .L24
 629 0010 3B68     		ldr	r3, [r7]
 630 0012 1344     		add	r3, r3, r2
 631 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 632 0016 1A46     		mov	r2, r3
 633 0018 FB68     		ldr	r3, [r7, #12]
 634 001a 1344     		add	r3, r3, r2
 635 001c 1B68     		ldr	r3, [r3]
 636 001e 0849     		ldr	r1, .L24
 637 0020 3A68     		ldr	r2, [r7]
 638 0022 0A44     		add	r2, r2, r1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 121


 639 0024 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 640 0026 1146     		mov	r1, r2
 641 0028 FA68     		ldr	r2, [r7, #12]
 642 002a 0A44     		add	r2, r2, r1
 643 002c 43F00103 		orr	r3, r3, #1
 644 0030 1360     		str	r3, [r2]
 556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 645              		.loc 3 556 1
 646 0032 00BF     		nop
 647 0034 1437     		adds	r7, r7, #20
 648              	.LCFI45:
 649              		.cfi_def_cfa_offset 4
 650 0036 BD46     		mov	sp, r7
 651              	.LCFI46:
 652              		.cfi_def_cfa_register 13
 653              		@ sp needed
 654 0038 5DF8047B 		ldr	r7, [sp], #4
 655              	.LCFI47:
 656              		.cfi_restore 7
 657              		.cfi_def_cfa_offset 0
 658 003c 7047     		bx	lr
 659              	.L25:
 660 003e 00BF     		.align	2
 661              	.L24:
 662 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 663              		.cfi_endproc
 664              	.LFE895:
 666              		.section	.text.LL_DMA_DisableChannel,"ax",%progbits
 667              		.align	1
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 672              	LL_DMA_DisableChannel:
 673              	.LFB896:
 557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Disable DMA channel.
 560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_DisableChannel
 561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 674              		.loc 3 573 1
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 16
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 679 0000 80B4     		push	{r7}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 122


 680              	.LCFI48:
 681              		.cfi_def_cfa_offset 4
 682              		.cfi_offset 7, -4
 683 0002 85B0     		sub	sp, sp, #20
 684              	.LCFI49:
 685              		.cfi_def_cfa_offset 24
 686 0004 00AF     		add	r7, sp, #0
 687              	.LCFI50:
 688              		.cfi_def_cfa_register 7
 689 0006 7860     		str	r0, [r7, #4]
 690 0008 3960     		str	r1, [r7]
 574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 691              		.loc 3 574 12
 692 000a 7B68     		ldr	r3, [r7, #4]
 693 000c FB60     		str	r3, [r7, #12]
 575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN
 694              		.loc 3 575 3
 695 000e 0C4A     		ldr	r2, .L27
 696 0010 3B68     		ldr	r3, [r7]
 697 0012 1344     		add	r3, r3, r2
 698 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 699 0016 1A46     		mov	r2, r3
 700 0018 FB68     		ldr	r3, [r7, #12]
 701 001a 1344     		add	r3, r3, r2
 702 001c 1B68     		ldr	r3, [r3]
 703 001e 0849     		ldr	r1, .L27
 704 0020 3A68     		ldr	r2, [r7]
 705 0022 0A44     		add	r2, r2, r1
 706 0024 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 707 0026 1146     		mov	r1, r2
 708 0028 FA68     		ldr	r2, [r7, #12]
 709 002a 0A44     		add	r2, r2, r1
 710 002c 23F00103 		bic	r3, r3, #1
 711 0030 1360     		str	r3, [r2]
 576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 712              		.loc 3 576 1
 713 0032 00BF     		nop
 714 0034 1437     		adds	r7, r7, #20
 715              	.LCFI51:
 716              		.cfi_def_cfa_offset 4
 717 0036 BD46     		mov	sp, r7
 718              	.LCFI52:
 719              		.cfi_def_cfa_register 13
 720              		@ sp needed
 721 0038 5DF8047B 		ldr	r7, [sp], #4
 722              	.LCFI53:
 723              		.cfi_restore 7
 724              		.cfi_def_cfa_offset 0
 725 003c 7047     		bx	lr
 726              	.L28:
 727 003e 00BF     		.align	2
 728              	.L27:
 729 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 730              		.cfi_endproc
 731              	.LFE896:
 733              		.section	.text.LL_DMA_IsEnabledChannel,"ax",%progbits
 734              		.align	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 123


 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 739              	LL_DMA_IsEnabledChannel:
 740              	.LFB897:
 577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Check if DMA channel is enabled or disabled.
 580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
 581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 741              		.loc 3 593 1
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 16
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745              		@ link register save eliminated.
 746 0000 80B4     		push	{r7}
 747              	.LCFI54:
 748              		.cfi_def_cfa_offset 4
 749              		.cfi_offset 7, -4
 750 0002 85B0     		sub	sp, sp, #20
 751              	.LCFI55:
 752              		.cfi_def_cfa_offset 24
 753 0004 00AF     		add	r7, sp, #0
 754              	.LCFI56:
 755              		.cfi_def_cfa_register 7
 756 0006 7860     		str	r0, [r7, #4]
 757 0008 3960     		str	r1, [r7]
 594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 758              		.loc 3 594 12
 759 000a 7B68     		ldr	r3, [r7, #4]
 760 000c FB60     		str	r3, [r7, #12]
 595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 761              		.loc 3 595 12
 762 000e 0A4A     		ldr	r2, .L33
 763 0010 3B68     		ldr	r3, [r7]
 764 0012 1344     		add	r3, r3, r2
 765 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 766 0016 1A46     		mov	r2, r3
 767 0018 FB68     		ldr	r3, [r7, #12]
 768 001a 1344     		add	r3, r3, r2
 769 001c 1B68     		ldr	r3, [r3]
 770 001e 03F00103 		and	r3, r3, #1
 596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                     DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 771              		.loc 3 596 56
 772 0022 012B     		cmp	r3, #1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 124


 773 0024 01D1     		bne	.L30
 774              		.loc 3 596 56 is_stmt 0 discriminator 1
 775 0026 0123     		movs	r3, #1
 776 0028 00E0     		b	.L32
 777              	.L30:
 778              		.loc 3 596 56 discriminator 2
 779 002a 0023     		movs	r3, #0
 780              	.L32:
 597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 781              		.loc 3 597 1 is_stmt 1 discriminator 5
 782 002c 1846     		mov	r0, r3
 783 002e 1437     		adds	r7, r7, #20
 784              	.LCFI57:
 785              		.cfi_def_cfa_offset 4
 786 0030 BD46     		mov	sp, r7
 787              	.LCFI58:
 788              		.cfi_def_cfa_register 13
 789              		@ sp needed
 790 0032 5DF8047B 		ldr	r7, [sp], #4
 791              	.LCFI59:
 792              		.cfi_restore 7
 793              		.cfi_def_cfa_offset 0
 794 0036 7047     		bx	lr
 795              	.L34:
 796              		.align	2
 797              	.L33:
 798 0038 00000000 		.word	CHANNEL_OFFSET_TAB
 799              		.cfi_endproc
 800              	.LFE897:
 802              		.section	.text.LL_DMA_SetDataLength,"ax",%progbits
 803              		.align	1
 804              		.syntax unified
 805              		.thumb
 806              		.thumb_func
 808              	LL_DMA_SetDataLength:
 809              	.LFB913:
 598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Configure all parameters link to DMA transfer.
 601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
 602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
 603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          CIRC          LL_DMA_ConfigTransfer\n
 604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          PINC          LL_DMA_ConfigTransfer\n
 605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          MINC          LL_DMA_ConfigTransfer\n
 606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
 607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
 608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          PL            LL_DMA_ConfigTransfer
 609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 125


 619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
 621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configurat
 629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_P
 633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              Configuration);
 634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set Data transfer direction (read from peripheral or from memory).
 638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
 639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
 640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t 
 656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Data transfer direction (read from peripheral or from memory).
 664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
 665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
 666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 126


 676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
 681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set DMA mode circular or normal.
 689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note The circular buffer mode cannot be used if the memory-to-memory
 690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * data transfer is configured on the selected Channel.
 691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_SetMode
 692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
 707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_C
 710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              Mode);
 711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get DMA mode circular or normal.
 715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_GetMode
 716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
 730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 127


 733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CCR_CIRC));
 734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set Peripheral increment mode.
 738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
 739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
 749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOr
 754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_P
 757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Peripheral increment mode.
 762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
 763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CCR_PINC));
 781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set Memory increment mode.
 785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
 786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 128


 790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
 796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOr
 801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_M
 804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Memory increment mode.
 809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
 810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CCR_MINC));
 828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set Peripheral size.
 832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
 833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
 843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 129


 847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2M
 849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_P
 852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Peripheral size.
 857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
 858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
 873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CCR_PSIZE));
 877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set Memory size.
 881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
 882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
 892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2M
 898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_M
 901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 130


 904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Memory size.
 906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
 907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
 922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CCR_MSIZE));
 926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set Channel priority level.
 930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
 931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t P
 948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_P
 951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              Priority);
 952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel priority level.
 956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_GetChannelPriorityLevel
 957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 131


 961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
 973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CCR_PL));
 977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
 979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
 980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set Number of data to transfer.
 981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   This action has no effect if
 982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         channel is enabled.
 983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_SetDataLength
 984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
 994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
 995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
 996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
 997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 810              		.loc 3 997 1
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 24
 813              		@ frame_needed = 1, uses_anonymous_args = 0
 814              		@ link register save eliminated.
 815 0000 80B4     		push	{r7}
 816              	.LCFI60:
 817              		.cfi_def_cfa_offset 4
 818              		.cfi_offset 7, -4
 819 0002 87B0     		sub	sp, sp, #28
 820              	.LCFI61:
 821              		.cfi_def_cfa_offset 32
 822 0004 00AF     		add	r7, sp, #0
 823              	.LCFI62:
 824              		.cfi_def_cfa_register 7
 825 0006 F860     		str	r0, [r7, #12]
 826 0008 B960     		str	r1, [r7, #8]
 827 000a 7A60     		str	r2, [r7, #4]
 998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 828              		.loc 3 998 12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 132


 829 000c FB68     		ldr	r3, [r7, #12]
 830 000e 7B61     		str	r3, [r7, #20]
 999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 831              		.loc 3 999 3
 832 0010 0D4A     		ldr	r2, .L36
 833 0012 BB68     		ldr	r3, [r7, #8]
 834 0014 1344     		add	r3, r3, r2
 835 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 836 0018 1A46     		mov	r2, r3
 837 001a 7B69     		ldr	r3, [r7, #20]
 838 001c 1344     		add	r3, r3, r2
 839 001e 5B68     		ldr	r3, [r3, #4]
 840 0020 1B0C     		lsrs	r3, r3, #16
 841 0022 1B04     		lsls	r3, r3, #16
 842 0024 0849     		ldr	r1, .L36
 843 0026 BA68     		ldr	r2, [r7, #8]
 844 0028 0A44     		add	r2, r2, r1
 845 002a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 846 002c 1146     		mov	r1, r2
 847 002e 7A69     		ldr	r2, [r7, #20]
 848 0030 0A44     		add	r2, r2, r1
 849 0032 1146     		mov	r1, r2
 850 0034 7A68     		ldr	r2, [r7, #4]
 851 0036 1343     		orrs	r3, r3, r2
 852 0038 4B60     		str	r3, [r1, #4]
1000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
1001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 853              		.loc 3 1001 1
 854 003a 00BF     		nop
 855 003c 1C37     		adds	r7, r7, #28
 856              	.LCFI63:
 857              		.cfi_def_cfa_offset 4
 858 003e BD46     		mov	sp, r7
 859              	.LCFI64:
 860              		.cfi_def_cfa_register 13
 861              		@ sp needed
 862 0040 5DF8047B 		ldr	r7, [sp], #4
 863              	.LCFI65:
 864              		.cfi_restore 7
 865              		.cfi_def_cfa_offset 0
 866 0044 7047     		bx	lr
 867              	.L37:
 868 0046 00BF     		.align	2
 869              	.L36:
 870 0048 00000000 		.word	CHANNEL_OFFSET_TAB
 871              		.cfi_endproc
 872              	.LFE913:
 874              		.section	.text.LL_DMA_SetMemoryAddress,"ax",%progbits
 875              		.align	1
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 880              	LL_DMA_SetMemoryAddress:
 881              	.LFB916:
1002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Number of data to transfer.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 133


1005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Once the channel is enabled, the return value indicate the
1006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         remaining bytes to be transmitted.
1007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_GetDataLength
1008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
1020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
1023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
1024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Configure the Source and Destination addresses.
1028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Each peripheral using DMA provides an API to get directly the register address (LL_PPP_
1030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_ConfigAddresses\n
1031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CMAR         MA            LL_DMA_ConfigAddresses
1032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  SrcAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DstAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
1044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
1045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
1046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
1047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddres
1050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                                             uint32_t DstAddress, uint32_t Direction)
1051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   /* Direction Memory to Periph */
1054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
1055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   {
1056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddr
1057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddr
1058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   }
1059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   /* Direction Periph to Memory and Memory to Memory */
1060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   else
1061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 134


1062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddr
1063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddr
1064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   }
1065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set the Memory address.
1069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetMemoryAddress
1072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 882              		.loc 3 1085 1
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 24
 885              		@ frame_needed = 1, uses_anonymous_args = 0
 886              		@ link register save eliminated.
 887 0000 80B4     		push	{r7}
 888              	.LCFI66:
 889              		.cfi_def_cfa_offset 4
 890              		.cfi_offset 7, -4
 891 0002 87B0     		sub	sp, sp, #28
 892              	.LCFI67:
 893              		.cfi_def_cfa_offset 32
 894 0004 00AF     		add	r7, sp, #0
 895              	.LCFI68:
 896              		.cfi_def_cfa_register 7
 897 0006 F860     		str	r0, [r7, #12]
 898 0008 B960     		str	r1, [r7, #8]
 899 000a 7A60     		str	r2, [r7, #4]
1086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 900              		.loc 3 1086 12
 901 000c FB68     		ldr	r3, [r7, #12]
 902 000e 7B61     		str	r3, [r7, #20]
1087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAdd
 903              		.loc 3 1087 3
 904 0010 074A     		ldr	r2, .L39
 905 0012 BB68     		ldr	r3, [r7, #8]
 906 0014 1344     		add	r3, r3, r2
 907 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 908 0018 1A46     		mov	r2, r3
 909 001a 7B69     		ldr	r3, [r7, #20]
 910 001c 1344     		add	r3, r3, r2
 911 001e 1A46     		mov	r2, r3
 912 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 135


 913 0022 D360     		str	r3, [r2, #12]
1088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 914              		.loc 3 1088 1
 915 0024 00BF     		nop
 916 0026 1C37     		adds	r7, r7, #28
 917              	.LCFI69:
 918              		.cfi_def_cfa_offset 4
 919 0028 BD46     		mov	sp, r7
 920              	.LCFI70:
 921              		.cfi_def_cfa_register 13
 922              		@ sp needed
 923 002a 5DF8047B 		ldr	r7, [sp], #4
 924              	.LCFI71:
 925              		.cfi_restore 7
 926              		.cfi_def_cfa_offset 0
 927 002e 7047     		bx	lr
 928              	.L40:
 929              		.align	2
 930              	.L39:
 931 0030 00000000 		.word	CHANNEL_OFFSET_TAB
 932              		.cfi_endproc
 933              	.LFE916:
 935              		.section	.text.LL_DMA_SetPeriphAddress,"ax",%progbits
 936              		.align	1
 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 941              	LL_DMA_SetPeriphAddress:
 942              	.LFB917:
1089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set the Peripheral address.
1092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetPeriphAddress
1095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAd
1108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 943              		.loc 3 1108 1
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 24
 946              		@ frame_needed = 1, uses_anonymous_args = 0
 947              		@ link register save eliminated.
 948 0000 80B4     		push	{r7}
 949              	.LCFI72:
 950              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 136


 951              		.cfi_offset 7, -4
 952 0002 87B0     		sub	sp, sp, #28
 953              	.LCFI73:
 954              		.cfi_def_cfa_offset 32
 955 0004 00AF     		add	r7, sp, #0
 956              	.LCFI74:
 957              		.cfi_def_cfa_register 7
 958 0006 F860     		str	r0, [r7, #12]
 959 0008 B960     		str	r1, [r7, #8]
 960 000a 7A60     		str	r2, [r7, #4]
1109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 961              		.loc 3 1109 12
 962 000c FB68     		ldr	r3, [r7, #12]
 963 000e 7B61     		str	r3, [r7, #20]
1110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAdd
 964              		.loc 3 1110 3
 965 0010 074A     		ldr	r2, .L42
 966 0012 BB68     		ldr	r3, [r7, #8]
 967 0014 1344     		add	r3, r3, r2
 968 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 0018 1A46     		mov	r2, r3
 970 001a 7B69     		ldr	r3, [r7, #20]
 971 001c 1344     		add	r3, r3, r2
 972 001e 1A46     		mov	r2, r3
 973 0020 7B68     		ldr	r3, [r7, #4]
 974 0022 9360     		str	r3, [r2, #8]
1111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 975              		.loc 3 1111 1
 976 0024 00BF     		nop
 977 0026 1C37     		adds	r7, r7, #28
 978              	.LCFI75:
 979              		.cfi_def_cfa_offset 4
 980 0028 BD46     		mov	sp, r7
 981              	.LCFI76:
 982              		.cfi_def_cfa_register 13
 983              		@ sp needed
 984 002a 5DF8047B 		ldr	r7, [sp], #4
 985              	.LCFI77:
 986              		.cfi_restore 7
 987              		.cfi_def_cfa_offset 0
 988 002e 7047     		bx	lr
 989              	.L43:
 990              		.align	2
 991              	.L42:
 992 0030 00000000 		.word	CHANNEL_OFFSET_TAB
 993              		.cfi_endproc
 994              	.LFE917:
 996              		.section	.text.LL_DMA_EnableIT_TC,"ax",%progbits
 997              		.align	1
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
 1002              	LL_DMA_EnableIT_TC:
 1003              	.LFB982:
1112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Memory address.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 137


1115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetMemoryAddress
1117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR));
1132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Peripheral address.
1136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetPeriphAddress
1138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR));
1153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Source address.
1157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetM2MSrcAddress
1160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 138


1172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, MemoryAdd
1176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Destination address.
1180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetM2MDstAddress
1183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAdd
1199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Source address.
1203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetM2MSrcAddress
1205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR));
1220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Destination address.
1224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetM2MDstAddress
1226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 139


1229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR));
1241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #if defined(DMAMUX1)
1244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set DMA request for DMA Channels on DMAMUX Channel x.
1246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   DMAMUX channel 0 to 6 are mapped to DMA1 channel 1 to 7.
1247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         DMAMUX channel 7 to 13 are mapped to DMA2 channel 1 to 7.
1248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CxCR         DMAREQ_ID     LL_DMA_SetPeriphRequest
1249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Request This parameter can be one of the following values:
1259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_MEM2MEM
1260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR0
1261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR1
1262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR2
1263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR3
1264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC1
1265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC2
1266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH1
1267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH2
1268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM6_UP
1269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM7_UP
1270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_RX
1271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_TX
1272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_RX
1273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_TX
1274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_RX
1275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_TX
1276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_RX
1277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_TX
1278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_RX
1279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_TX
1280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_RX
1281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_TX
1282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_RX
1283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_TX
1284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_RX
1285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_TX
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 140


1286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_RX
1287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_TX
1288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_RX
1289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_TX
1290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_RX
1291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_TX
1292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_RX
1293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_TX
1294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_RX
1295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_TX
1296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_A
1297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_B
1298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI2_A
1299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI2_B
1300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_OSPI1
1301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_OSPI2
1302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH1
1303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH2
1304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH3
1305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH4
1306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_UP
1307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_TRIG
1308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_COM
1309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH1
1310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH2
1311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH3
1312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH4
1313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_UP
1314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_TRIG
1315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_COM
1316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH1
1317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH2
1318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH3
1319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH4
1320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_UP
1321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH1
1322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH2
1323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH3
1324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH4
1325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_UP
1326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_TRIG
1327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH1
1328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH2
1329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH3
1330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH4
1331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_UP
1332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH1
1333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH2
1334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH3
1335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH4
1336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_UP
1337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_TRIG
1338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_CH1
1339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_UP
1340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_TRIG
1341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_COM
1342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_CH1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 141


1343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_UP
1344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_CH1
1345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_UP
1346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT0
1347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT1
1348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT2
1349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT3
1350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DCMI
1351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DCMI_PSSI
1352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_IN
1353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_OUT
1354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HASH_IN
1355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
1358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
1360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request)
1361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get DMA request for DMA Channels on DMAMUX Channel x.
1365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   DMAMUX channel 0 to 6 are mapped to DMA1 channel 1 to 7.
1366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         DMAMUX channel 7 to 13 are mapped to DMA2 channel 1 to 7.
1367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CxCR         DMAREQ_ID     LL_DMA_GetPeriphRequest
1368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_MEM2MEM
1379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR0
1380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR1
1381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR2
1382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR3
1383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC1
1384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC2
1385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH1
1386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH2
1387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM6_UP
1388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM7_UP
1389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_RX
1390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_TX
1391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_RX
1392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_TX
1393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_RX
1394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_TX
1395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_RX
1396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_TX
1397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_RX
1398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_TX
1399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_RX
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 142


1400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_TX
1401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_RX
1402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_TX
1403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_RX
1404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_TX
1405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_RX
1406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_TX
1407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_RX
1408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_TX
1409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_RX
1410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_TX
1411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_RX
1412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_TX
1413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_RX
1414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_TX
1415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_A
1416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_B
1417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI2_A
1418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI2_B
1419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_OSPI1
1420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_OSPI2
1421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH1
1422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH2
1423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH3
1424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH4
1425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_UP
1426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_TRIG
1427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_COM
1428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH1
1429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH2
1430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH3
1431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH4
1432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_UP
1433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_TRIG
1434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_COM
1435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH1
1436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH2
1437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH3
1438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH4
1439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_UP
1440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH1
1441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH2
1442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH3
1443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH4
1444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_UP
1445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_TRIG
1446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH1
1447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH2
1448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH3
1449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH4
1450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_UP
1451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH1
1452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH2
1453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH3
1454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH4
1455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_UP
1456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_TRIG
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 143


1457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_CH1
1458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_UP
1459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_TRIG
1460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_COM
1461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_CH1
1462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_UP
1463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_CH1
1464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_UP
1465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT0
1466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT1
1467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT2
1468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DFSDM1_FLT3
1469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DCMI
1470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DCMI_PSSI
1471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_IN
1472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_OUT
1473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HASH_IN
1474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel)
1476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
1478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID));
1479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #else
1482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Set DMA request for DMA instance on Channel x.
1484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note   Please refer to Reference Manual to get the available mapping of Request value link to 
1485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CSELR        C1S           LL_DMA_SetPeriphRequest\n
1486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C2S           LL_DMA_SetPeriphRequest\n
1487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C3S           LL_DMA_SetPeriphRequest\n
1488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C4S           LL_DMA_SetPeriphRequest\n
1489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C5S           LL_DMA_SetPeriphRequest\n
1490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C6S           LL_DMA_SetPeriphRequest\n
1491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C7S           LL_DMA_SetPeriphRequest
1492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  PeriphRequest This parameter can be one of the following values:
1502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_0
1503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_1
1504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_2
1505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_3
1506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_4
1507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_5
1508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_6
1509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_7
1510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRe
1513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 144


1514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
1515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****              DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
1516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get DMA request for DMA instance on Channel x.
1520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CSELR        C1S           LL_DMA_GetPeriphRequest\n
1521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C2S           LL_DMA_GetPeriphRequest\n
1522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C3S           LL_DMA_GetPeriphRequest\n
1523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C4S           LL_DMA_GetPeriphRequest\n
1524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C5S           LL_DMA_GetPeriphRequest\n
1525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C6S           LL_DMA_GetPeriphRequest\n
1526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         CSELR        C7S           LL_DMA_GetPeriphRequest
1527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_0
1538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_1
1539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_2
1540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_3
1541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_4
1542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_5
1543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_6
1544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_7
1545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel)
1547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return (READ_BIT(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
1549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****                    DMA_CSELR_C1S << ((Channel) * 4U)) >> DMA_POSITION_CSELR_CXS);
1550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** #endif /* DMAMUX1 */
1553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
1555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_FLAG_Management FLAG_Management
1558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
1559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 1 global interrupt flag.
1563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          GIF1          LL_DMA_IsActiveFlag_GI1
1564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI1(DMA_TypeDef *DMAx)
1568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1)) ? 1UL : 0UL);
1570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 145


1571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 2 global interrupt flag.
1574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          GIF2          LL_DMA_IsActiveFlag_GI2
1575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI2(DMA_TypeDef *DMAx)
1579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2)) ? 1UL : 0UL);
1581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 3 global interrupt flag.
1585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          GIF3          LL_DMA_IsActiveFlag_GI3
1586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI3(DMA_TypeDef *DMAx)
1590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3)) ? 1UL : 0UL);
1592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 4 global interrupt flag.
1596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          GIF4          LL_DMA_IsActiveFlag_GI4
1597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI4(DMA_TypeDef *DMAx)
1601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4)) ? 1UL : 0UL);
1603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 5 global interrupt flag.
1607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          GIF5          LL_DMA_IsActiveFlag_GI5
1608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI5(DMA_TypeDef *DMAx)
1612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5)) ? 1UL : 0UL);
1614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 6 global interrupt flag.
1618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          GIF6          LL_DMA_IsActiveFlag_GI6
1619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI6(DMA_TypeDef *DMAx)
1623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6)) ? 1UL : 0UL);
1625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 146


1628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 7 global interrupt flag.
1629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          GIF7          LL_DMA_IsActiveFlag_GI7
1630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI7(DMA_TypeDef *DMAx)
1634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7)) ? 1UL : 0UL);
1636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 1 transfer complete flag.
1640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
1641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
1645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
1647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 2 transfer complete flag.
1651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
1652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
1656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
1658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 3 transfer complete flag.
1662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
1663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
1667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
1669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 4 transfer complete flag.
1673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
1674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
1678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
1680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 5 transfer complete flag.
1684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 147


1685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
1689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
1691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 6 transfer complete flag.
1695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
1696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
1700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
1702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 7 transfer complete flag.
1706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
1707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
1711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
1713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 1 half transfer flag.
1717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
1718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
1722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
1724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 2 half transfer flag.
1728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          HTIF2         LL_DMA_IsActiveFlag_HT2
1729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
1733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
1735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 3 half transfer flag.
1739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          HTIF3         LL_DMA_IsActiveFlag_HT3
1740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 148


1742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
1744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
1746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 4 half transfer flag.
1750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          HTIF4         LL_DMA_IsActiveFlag_HT4
1751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
1755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
1757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 5 half transfer flag.
1761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
1762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
1766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
1768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 6 half transfer flag.
1772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
1773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
1777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
1779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 7 half transfer flag.
1783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          HTIF7         LL_DMA_IsActiveFlag_HT7
1784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
1788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
1790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 1 transfer error flag.
1794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
1795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 149


1799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
1801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 2 transfer error flag.
1805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
1806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
1810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
1812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 3 transfer error flag.
1816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
1817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
1821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
1823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 4 transfer error flag.
1827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TEIF4         LL_DMA_IsActiveFlag_TE4
1828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
1832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4)) ? 1UL : 0UL);
1834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 5 transfer error flag.
1838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
1839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
1843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5)) ? 1UL : 0UL);
1845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 6 transfer error flag.
1849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
1850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
1854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 150


1856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Get Channel 7 transfer error flag.
1860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll ISR          TEIF7         LL_DMA_IsActiveFlag_TE7
1861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
1865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7)) ? 1UL : 0UL);
1867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 1 global interrupt flag.
1871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note Do not Clear Channel 1 global interrupt flag when the channel in ON.
1872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC1, LL_DMA_ClearFlag_HT1,
1874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE1. bug 2.4.1/2.5.1 in Product Errata Sheet.
1875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF1         LL_DMA_ClearFlag_GI1
1876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx)
1880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
1882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 2 global interrupt flag.
1886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note Do not Clear Channel 2 global interrupt flag when the channel in ON.
1887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC2, LL_DMA_ClearFlag_HT2,
1889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE2. bug id 2.4.1/2.5.1 in Product Errata Sheet.
1890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
1891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
1895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
1897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 3 global interrupt flag.
1901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note Do not Clear Channel 3 global interrupt flag when the channel in ON.
1902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC3, LL_DMA_ClearFlag_HT3,
1904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE3. bug id 2.4.1/2.5.1 in Product Errata Sheet.
1905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
1906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
1910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
1912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 151


1913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 4 global interrupt flag.
1916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note Do not Clear Channel 4 global interrupt flag when the channel in ON.
1917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC4, LL_DMA_ClearFlag_HT4,
1919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE4. bug id 2.4.1/2.5.1 in Product Errata Sheet.
1920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
1921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
1925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
1927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 5 global interrupt flag.
1931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note Do not Clear Channel 5 global interrupt flag when the channel in ON.
1932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC5, LL_DMA_ClearFlag_HT5,
1934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE5. bug id 2.4.1/2.5.1 in Product Errata Sheet.
1935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
1936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
1940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
1942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 6 global interrupt flag.
1946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note Do not Clear Channel 6 global interrupt flag when the channel in ON.
1947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC6, LL_DMA_ClearFlag_HT6,
1949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE6. bug id 2.4.1/2.5.1 in Product Errata Sheet.
1950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF6         LL_DMA_ClearFlag_GI6
1951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx)
1955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
1957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 7 global interrupt flag.
1961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @note Do not Clear Channel 7 global interrupt flag when the channel in ON.
1962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC7, LL_DMA_ClearFlag_HT7,
1964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE7. bug id 2.4.1/2.5.1 in Product Errata Sheet.
1965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF7         LL_DMA_ClearFlag_GI7
1966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 152


1970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
1972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 1  transfer complete flag.
1976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
1977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
1981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
1983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 2  transfer complete flag.
1987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
1988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
1990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
1991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
1992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
1993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
1994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
1995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
1996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
1997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 3  transfer complete flag.
1998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
1999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
2003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
2005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 4  transfer complete flag.
2009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
2010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
2014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
2016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 5  transfer complete flag.
2020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
2021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
2025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 153


2027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 6  transfer complete flag.
2031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
2032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
2036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
2038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 7  transfer complete flag.
2042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
2043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
2047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
2049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 1  half transfer flag.
2053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
2054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
2058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
2060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 2  half transfer flag.
2064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF2        LL_DMA_ClearFlag_HT2
2065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
2069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
2071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 3  half transfer flag.
2075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF3        LL_DMA_ClearFlag_HT3
2076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
2080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
2082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 154


2084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 4  half transfer flag.
2086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF4        LL_DMA_ClearFlag_HT4
2087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
2091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
2093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 5  half transfer flag.
2097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF5        LL_DMA_ClearFlag_HT5
2098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
2102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
2104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 6  half transfer flag.
2108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
2109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
2113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
2115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 7  half transfer flag.
2119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF7        LL_DMA_ClearFlag_HT7
2120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
2124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
2126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 1 transfer error flag.
2130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
2131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
2135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
2137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 2 transfer error flag.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 155


2141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
2142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
2146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
2148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 3 transfer error flag.
2152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF3        LL_DMA_ClearFlag_TE3
2153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
2157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
2159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 4 transfer error flag.
2163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF4        LL_DMA_ClearFlag_TE4
2164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
2168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
2170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 5 transfer error flag.
2174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF5        LL_DMA_ClearFlag_TE5
2175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
2179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
2181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 6 transfer error flag.
2185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF6        LL_DMA_ClearFlag_TE6
2186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
2190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
2192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Clear Channel 7 transfer error flag.
2196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF7        LL_DMA_ClearFlag_TE7
2197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 156


2198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
2201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
2202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
2203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
2204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @}
2207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** 
2209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_IT_Management IT_Management
2210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @{
2211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** /**
2213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @brief  Enable Transfer complete interrupt.
2214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @rmtoll CCR          TCIE          LL_DMA_EnableIT_TC
2215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
2217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
2218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
2219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
2220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
2221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
2222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
2223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
2224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   * @retval None
2225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   */
2226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
2227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** {
 1004              		.loc 3 2227 1
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 16
 1007              		@ frame_needed = 1, uses_anonymous_args = 0
 1008              		@ link register save eliminated.
 1009 0000 80B4     		push	{r7}
 1010              	.LCFI78:
 1011              		.cfi_def_cfa_offset 4
 1012              		.cfi_offset 7, -4
 1013 0002 85B0     		sub	sp, sp, #20
 1014              	.LCFI79:
 1015              		.cfi_def_cfa_offset 24
 1016 0004 00AF     		add	r7, sp, #0
 1017              	.LCFI80:
 1018              		.cfi_def_cfa_register 7
 1019 0006 7860     		str	r0, [r7, #4]
 1020 0008 3960     		str	r1, [r7]
2228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 1021              		.loc 3 2228 12
 1022 000a 7B68     		ldr	r3, [r7, #4]
 1023 000c FB60     		str	r3, [r7, #12]
2229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE
 1024              		.loc 3 2229 3
 1025 000e 0C4A     		ldr	r2, .L45
 1026 0010 3B68     		ldr	r3, [r7]
 1027 0012 1344     		add	r3, r3, r2
 1028 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 157


 1029 0016 1A46     		mov	r2, r3
 1030 0018 FB68     		ldr	r3, [r7, #12]
 1031 001a 1344     		add	r3, r3, r2
 1032 001c 1B68     		ldr	r3, [r3]
 1033 001e 0849     		ldr	r1, .L45
 1034 0020 3A68     		ldr	r2, [r7]
 1035 0022 0A44     		add	r2, r2, r1
 1036 0024 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1037 0026 1146     		mov	r1, r2
 1038 0028 FA68     		ldr	r2, [r7, #12]
 1039 002a 0A44     		add	r2, r2, r1
 1040 002c 43F00203 		orr	r3, r3, #2
 1041 0030 1360     		str	r3, [r2]
2230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h **** }
 1042              		.loc 3 2230 1
 1043 0032 00BF     		nop
 1044 0034 1437     		adds	r7, r7, #20
 1045              	.LCFI81:
 1046              		.cfi_def_cfa_offset 4
 1047 0036 BD46     		mov	sp, r7
 1048              	.LCFI82:
 1049              		.cfi_def_cfa_register 13
 1050              		@ sp needed
 1051 0038 5DF8047B 		ldr	r7, [sp], #4
 1052              	.LCFI83:
 1053              		.cfi_restore 7
 1054              		.cfi_def_cfa_offset 0
 1055 003c 7047     		bx	lr
 1056              	.L46:
 1057 003e 00BF     		.align	2
 1058              	.L45:
 1059 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 1060              		.cfi_endproc
 1061              	.LFE982:
 1063              		.section	.text.UASPEP_INIT,"ax",%progbits
 1064              		.align	1
 1065              		.global	UASPEP_INIT
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1070              	UASPEP_INIT:
 1071              	.LFB1088:
 1072              		.file 4 "Src/usart_aspep_driver.c"
   1:Src/usart_aspep_driver.c **** 
   2:Src/usart_aspep_driver.c **** /**
   3:Src/usart_aspep_driver.c ****   ******************************************************************************
   4:Src/usart_aspep_driver.c ****   * @file    usart_aspep_driver.c
   5:Src/usart_aspep_driver.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/usart_aspep_driver.c ****   * @brief   This file provides firmware functions that implement the uart driver for the aspep pro
   7:Src/usart_aspep_driver.c ****   *
   8:Src/usart_aspep_driver.c ****   *
   9:Src/usart_aspep_driver.c ****   ******************************************************************************
  10:Src/usart_aspep_driver.c ****   * @attention
  11:Src/usart_aspep_driver.c ****   *
  12:Src/usart_aspep_driver.c ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  13:Src/usart_aspep_driver.c ****   * All rights reserved.</center></h2>
  14:Src/usart_aspep_driver.c ****   *
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 158


  15:Src/usart_aspep_driver.c ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/usart_aspep_driver.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/usart_aspep_driver.c ****   * the License. You may obtain a copy of the License at:
  18:Src/usart_aspep_driver.c ****   *                             www.st.com/SLA0044
  19:Src/usart_aspep_driver.c ****   *
  20:Src/usart_aspep_driver.c ****   ******************************************************************************
  21:Src/usart_aspep_driver.c ****   */
  22:Src/usart_aspep_driver.c **** 
  23:Src/usart_aspep_driver.c **** #include <stdint.h>
  24:Src/usart_aspep_driver.c **** #include "mc_stm_types.h"
  25:Src/usart_aspep_driver.c **** #include "usart_aspep_driver.h"
  26:Src/usart_aspep_driver.c **** 
  27:Src/usart_aspep_driver.c **** void UASPEP_DAMCONFIG_TX(UASPEP_Handle_t *pHandle);
  28:Src/usart_aspep_driver.c **** void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle);
  29:Src/usart_aspep_driver.c **** 
  30:Src/usart_aspep_driver.c **** /** @addtogroup MCSDK
  31:Src/usart_aspep_driver.c ****   * @{
  32:Src/usart_aspep_driver.c ****   */
  33:Src/usart_aspep_driver.c **** 
  34:Src/usart_aspep_driver.c **** /** @addtogroup MCP
  35:Src/usart_aspep_driver.c ****   * @{
  36:Src/usart_aspep_driver.c ****   */
  37:Src/usart_aspep_driver.c **** 
  38:Src/usart_aspep_driver.c **** /**
  39:Src/usart_aspep_driver.c ****   * @brief  Initialization of the DMAs used for data transmission and reception.
  40:Src/usart_aspep_driver.c ****   *
  41:Src/usart_aspep_driver.c ****   * @param  pHandle Handler of the current instance of the UASPEP component
  42:Src/usart_aspep_driver.c ****   */
  43:Src/usart_aspep_driver.c **** void UASPEP_INIT(void *pHWHandle)
  44:Src/usart_aspep_driver.c **** {
 1073              		.loc 4 44 1
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 16
 1076              		@ frame_needed = 1, uses_anonymous_args = 0
 1077 0000 80B5     		push	{r7, lr}
 1078              	.LCFI84:
 1079              		.cfi_def_cfa_offset 8
 1080              		.cfi_offset 7, -8
 1081              		.cfi_offset 14, -4
 1082 0002 84B0     		sub	sp, sp, #16
 1083              	.LCFI85:
 1084              		.cfi_def_cfa_offset 24
 1085 0004 00AF     		add	r7, sp, #0
 1086              	.LCFI86:
 1087              		.cfi_def_cfa_register 7
 1088 0006 7860     		str	r0, [r7, #4]
  45:Src/usart_aspep_driver.c ****   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 1089              		.loc 4 45 20
 1090 0008 7B68     		ldr	r3, [r7, #4]
 1091 000a FB60     		str	r3, [r7, #12]
  46:Src/usart_aspep_driver.c ****   UASPEP_DAMCONFIG_TX(pHandle);
 1092              		.loc 4 46 3
 1093 000c F868     		ldr	r0, [r7, #12]
 1094 000e FFF7FEFF 		bl	UASPEP_DAMCONFIG_TX
  47:Src/usart_aspep_driver.c ****   UASPEP_DAMCONFIG_RX(pHandle);
 1095              		.loc 4 47 3
 1096 0012 F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 159


 1097 0014 FFF7FEFF 		bl	UASPEP_DAMCONFIG_RX
  48:Src/usart_aspep_driver.c **** }
 1098              		.loc 4 48 1
 1099 0018 00BF     		nop
 1100 001a 1037     		adds	r7, r7, #16
 1101              	.LCFI87:
 1102              		.cfi_def_cfa_offset 8
 1103 001c BD46     		mov	sp, r7
 1104              	.LCFI88:
 1105              		.cfi_def_cfa_register 13
 1106              		@ sp needed
 1107 001e 80BD     		pop	{r7, pc}
 1108              		.cfi_endproc
 1109              	.LFE1088:
 1111              		.section	.text.UASPEP_DAMCONFIG_TX,"ax",%progbits
 1112              		.align	1
 1113              		.global	UASPEP_DAMCONFIG_TX
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1118              	UASPEP_DAMCONFIG_TX:
 1119              	.LFB1089:
  49:Src/usart_aspep_driver.c **** 
  50:Src/usart_aspep_driver.c **** /**
  51:Src/usart_aspep_driver.c ****   * @brief  Configures the DMA used for data transmission to controller.
  52:Src/usart_aspep_driver.c ****   *
  53:Src/usart_aspep_driver.c ****   * @param  pHandle Handler of the current instance of the UASPEP component
  54:Src/usart_aspep_driver.c ****   */
  55:Src/usart_aspep_driver.c **** void UASPEP_DAMCONFIG_TX(UASPEP_Handle_t *pHandle)
  56:Src/usart_aspep_driver.c **** {
 1120              		.loc 4 56 1
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 8
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
 1124 0000 80B5     		push	{r7, lr}
 1125              	.LCFI89:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 7, -8
 1128              		.cfi_offset 14, -4
 1129 0002 82B0     		sub	sp, sp, #8
 1130              	.LCFI90:
 1131              		.cfi_def_cfa_offset 16
 1132 0004 00AF     		add	r7, sp, #0
 1133              	.LCFI91:
 1134              		.cfi_def_cfa_register 7
 1135 0006 7860     		str	r0, [r7, #4]
  57:Src/usart_aspep_driver.c **** #ifdef NULL_PTR_CHECK_USA_ASP_DRV
  58:Src/usart_aspep_driver.c ****   if (NULL == pHandle)
  59:Src/usart_aspep_driver.c ****   {
  60:Src/usart_aspep_driver.c ****     /* Nothing to do */
  61:Src/usart_aspep_driver.c ****   }
  62:Src/usart_aspep_driver.c ****   else
  63:Src/usart_aspep_driver.c ****   {
  64:Src/usart_aspep_driver.c **** #endif
  65:Src/usart_aspep_driver.c ****     /* Enable DMA UART */
  66:Src/usart_aspep_driver.c ****     LL_USART_ClearFlag_TC(pHandle->USARTx);
 1136              		.loc 4 66 5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 160


 1137 0008 7B68     		ldr	r3, [r7, #4]
 1138 000a 1B68     		ldr	r3, [r3]
 1139 000c 1846     		mov	r0, r3
 1140 000e FFF7FEFF 		bl	LL_USART_ClearFlag_TC
  67:Src/usart_aspep_driver.c ****     LL_USART_EnableIT_TC(pHandle->USARTx);
 1141              		.loc 4 67 5
 1142 0012 7B68     		ldr	r3, [r7, #4]
 1143 0014 1B68     		ldr	r3, [r3]
 1144 0016 1846     		mov	r0, r3
 1145 0018 FFF7FEFF 		bl	LL_USART_EnableIT_TC
  68:Src/usart_aspep_driver.c **** 
  69:Src/usart_aspep_driver.c ****     /* Enable DMA UART to start the TX request */
  70:Src/usart_aspep_driver.c ****     LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 1146              		.loc 4 70 5
 1147 001c 7B68     		ldr	r3, [r7, #4]
 1148 001e 1B68     		ldr	r3, [r3]
 1149 0020 1846     		mov	r0, r3
 1150 0022 FFF7FEFF 		bl	LL_USART_EnableDMAReq_TX
  71:Src/usart_aspep_driver.c **** 
  72:Src/usart_aspep_driver.c ****     /* Write the USART_TDR register address in the DMA control register to configure it as
  73:Src/usart_aspep_driver.c ****      * the destination of the transfer */
  74:Src/usart_aspep_driver.c ****     //cstat !MISRAC2012-Rule-11.4
  75:Src/usart_aspep_driver.c ****     LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 1151              		.loc 4 75 5
 1152 0026 7B68     		ldr	r3, [r7, #4]
 1153 0028 9868     		ldr	r0, [r3, #8]
 1154 002a 7B68     		ldr	r3, [r7, #4]
 1155 002c 1969     		ldr	r1, [r3, #16]
 1156              		.loc 4 75 83
 1157 002e 7B68     		ldr	r3, [r7, #4]
 1158 0030 1B68     		ldr	r3, [r3]
 1159              		.loc 4 75 75
 1160 0032 2833     		adds	r3, r3, #40
 1161              		.loc 4 75 5
 1162 0034 1A46     		mov	r2, r3
 1163 0036 FFF7FEFF 		bl	LL_DMA_SetPeriphAddress
  76:Src/usart_aspep_driver.c ****     /* Clear UART ISR */
  77:Src/usart_aspep_driver.c ****     LL_USART_ClearFlag_TC(pHandle->USARTx);
 1164              		.loc 4 77 5
 1165 003a 7B68     		ldr	r3, [r7, #4]
 1166 003c 1B68     		ldr	r3, [r3]
 1167 003e 1846     		mov	r0, r3
 1168 0040 FFF7FEFF 		bl	LL_USART_ClearFlag_TC
  78:Src/usart_aspep_driver.c **** 
  79:Src/usart_aspep_driver.c ****     /* DMA end of transfer on UART TX channel completion is not activated */
  80:Src/usart_aspep_driver.c ****     /* We prefer to activate UART TC itself to avoid to trig IT while queued data are still to be t
  81:Src/usart_aspep_driver.c **** #ifdef NULL_PTR_CHECK_USA_ASP_DRV
  82:Src/usart_aspep_driver.c ****   }
  83:Src/usart_aspep_driver.c **** #endif
  84:Src/usart_aspep_driver.c **** }
 1169              		.loc 4 84 1
 1170 0044 00BF     		nop
 1171 0046 0837     		adds	r7, r7, #8
 1172              	.LCFI92:
 1173              		.cfi_def_cfa_offset 8
 1174 0048 BD46     		mov	sp, r7
 1175              	.LCFI93:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 161


 1176              		.cfi_def_cfa_register 13
 1177              		@ sp needed
 1178 004a 80BD     		pop	{r7, pc}
 1179              		.cfi_endproc
 1180              	.LFE1089:
 1182              		.section	.text.UASPEP_DAMCONFIG_RX,"ax",%progbits
 1183              		.align	1
 1184              		.global	UASPEP_DAMCONFIG_RX
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1189              	UASPEP_DAMCONFIG_RX:
 1190              	.LFB1090:
  85:Src/usart_aspep_driver.c **** 
  86:Src/usart_aspep_driver.c **** /**
  87:Src/usart_aspep_driver.c ****   * @brief  Configures the DMA used for data reception from controller.
  88:Src/usart_aspep_driver.c ****   *
  89:Src/usart_aspep_driver.c ****   * @param  pHandle Handler of the current instance of the UASPEP component
  90:Src/usart_aspep_driver.c ****   */
  91:Src/usart_aspep_driver.c **** void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle)
  92:Src/usart_aspep_driver.c **** {
 1191              		.loc 4 92 1
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 8
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0000 80B5     		push	{r7, lr}
 1196              	.LCFI94:
 1197              		.cfi_def_cfa_offset 8
 1198              		.cfi_offset 7, -8
 1199              		.cfi_offset 14, -4
 1200 0002 82B0     		sub	sp, sp, #8
 1201              	.LCFI95:
 1202              		.cfi_def_cfa_offset 16
 1203 0004 00AF     		add	r7, sp, #0
 1204              	.LCFI96:
 1205              		.cfi_def_cfa_register 7
 1206 0006 7860     		str	r0, [r7, #4]
  93:Src/usart_aspep_driver.c **** #ifdef NULL_PTR_CHECK_USA_ASP_DRV
  94:Src/usart_aspep_driver.c ****   if (NULL == pHandle)
  95:Src/usart_aspep_driver.c ****   {
  96:Src/usart_aspep_driver.c ****     /* Nothing to do */
  97:Src/usart_aspep_driver.c ****   }
  98:Src/usart_aspep_driver.c ****   else
  99:Src/usart_aspep_driver.c ****   {
 100:Src/usart_aspep_driver.c **** #endif
 101:Src/usart_aspep_driver.c ****     /* Enable DMA end of transfer on UART RX channel completion */
 102:Src/usart_aspep_driver.c ****     LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel);
 1207              		.loc 4 102 5
 1208 0008 7B68     		ldr	r3, [r7, #4]
 1209 000a 5A68     		ldr	r2, [r3, #4]
 1210 000c 7B68     		ldr	r3, [r7, #4]
 1211 000e DB68     		ldr	r3, [r3, #12]
 1212 0010 1946     		mov	r1, r3
 1213 0012 1046     		mov	r0, r2
 1214 0014 FFF7FEFF 		bl	LL_DMA_EnableIT_TC
 103:Src/usart_aspep_driver.c ****     /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
 104:Src/usart_aspep_driver.c ****     LL_USART_EnableIT_ERROR(pHandle->USARTx);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 162


 1215              		.loc 4 104 5
 1216 0018 7B68     		ldr	r3, [r7, #4]
 1217 001a 1B68     		ldr	r3, [r3]
 1218 001c 1846     		mov	r0, r3
 1219 001e FFF7FEFF 		bl	LL_USART_EnableIT_ERROR
 105:Src/usart_aspep_driver.c **** 
 106:Src/usart_aspep_driver.c ****     /* Write the USART_RDR register address in the DMA control register to configure it as
 107:Src/usart_aspep_driver.c ****      * the source of the transfer */
 108:Src/usart_aspep_driver.c ****     //cstat !MISRAC2012-Rule-11.4
 109:Src/usart_aspep_driver.c ****     LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 1220              		.loc 4 109 5
 1221 0022 7B68     		ldr	r3, [r7, #4]
 1222 0024 5868     		ldr	r0, [r3, #4]
 1223 0026 7B68     		ldr	r3, [r7, #4]
 1224 0028 D968     		ldr	r1, [r3, #12]
 1225              		.loc 4 109 83
 1226 002a 7B68     		ldr	r3, [r7, #4]
 1227 002c 1B68     		ldr	r3, [r3]
 1228              		.loc 4 109 75
 1229 002e 2433     		adds	r3, r3, #36
 1230              		.loc 4 109 5
 1231 0030 1A46     		mov	r2, r3
 1232 0032 FFF7FEFF 		bl	LL_DMA_SetPeriphAddress
 110:Src/usart_aspep_driver.c **** 
 111:Src/usart_aspep_driver.c ****     /* Clear UART ISR */
 112:Src/usart_aspep_driver.c ****     LL_USART_ClearFlag_TC(pHandle->USARTx);
 1233              		.loc 4 112 5
 1234 0036 7B68     		ldr	r3, [r7, #4]
 1235 0038 1B68     		ldr	r3, [r3]
 1236 003a 1846     		mov	r0, r3
 1237 003c FFF7FEFF 		bl	LL_USART_ClearFlag_TC
 113:Src/usart_aspep_driver.c **** 
 114:Src/usart_aspep_driver.c ****     LL_USART_EnableDMAReq_RX(pHandle->USARTx);
 1238              		.loc 4 114 5
 1239 0040 7B68     		ldr	r3, [r7, #4]
 1240 0042 1B68     		ldr	r3, [r3]
 1241 0044 1846     		mov	r0, r3
 1242 0046 FFF7FEFF 		bl	LL_USART_EnableDMAReq_RX
 115:Src/usart_aspep_driver.c **** #ifdef NULL_PTR_CHECK_USA_ASP_DRV
 116:Src/usart_aspep_driver.c ****   }
 117:Src/usart_aspep_driver.c **** #endif
 118:Src/usart_aspep_driver.c **** }
 1243              		.loc 4 118 1
 1244 004a 00BF     		nop
 1245 004c 0837     		adds	r7, r7, #8
 1246              	.LCFI97:
 1247              		.cfi_def_cfa_offset 8
 1248 004e BD46     		mov	sp, r7
 1249              	.LCFI98:
 1250              		.cfi_def_cfa_register 13
 1251              		@ sp needed
 1252 0050 80BD     		pop	{r7, pc}
 1253              		.cfi_endproc
 1254              	.LFE1090:
 1256              		.section	.text.UASPEP_SEND_PACKET,"ax",%progbits
 1257              		.align	1
 1258              		.global	UASPEP_SEND_PACKET
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 163


 1259              		.syntax unified
 1260              		.thumb
 1261              		.thumb_func
 1263              	UASPEP_SEND_PACKET:
 1264              	.LFB1091:
 119:Src/usart_aspep_driver.c **** 
 120:Src/usart_aspep_driver.c **** /**
 121:Src/usart_aspep_driver.c ****   * @brief  Enables the configured DMA to send packet.
 122:Src/usart_aspep_driver.c ****   *
 123:Src/usart_aspep_driver.c ****   * @param  pHWHandle Hardware components chosen for communication
 124:Src/usart_aspep_driver.c ****   * @param  data Data to be transmitted to controller
 125:Src/usart_aspep_driver.c ****   * @param  length Length of the data to be transmitted
 126:Src/usart_aspep_driver.c ****   */
 127:Src/usart_aspep_driver.c **** bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
 128:Src/usart_aspep_driver.c **** {
 1265              		.loc 4 128 1
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 24
 1268              		@ frame_needed = 1, uses_anonymous_args = 0
 1269 0000 80B5     		push	{r7, lr}
 1270              	.LCFI99:
 1271              		.cfi_def_cfa_offset 8
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 86B0     		sub	sp, sp, #24
 1275              	.LCFI100:
 1276              		.cfi_def_cfa_offset 32
 1277 0004 00AF     		add	r7, sp, #0
 1278              	.LCFI101:
 1279              		.cfi_def_cfa_register 7
 1280 0006 F860     		str	r0, [r7, #12]
 1281 0008 B960     		str	r1, [r7, #8]
 1282 000a 1346     		mov	r3, r2
 1283 000c FB80     		strh	r3, [r7, #6]	@ movhi
 129:Src/usart_aspep_driver.c ****   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 1284              		.loc 4 129 20
 1285 000e FB68     		ldr	r3, [r7, #12]
 1286 0010 3B61     		str	r3, [r7, #16]
 130:Src/usart_aspep_driver.c ****   bool result;
 131:Src/usart_aspep_driver.c ****   if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 1287              		.loc 4 131 13
 1288 0012 3B69     		ldr	r3, [r7, #16]
 1289 0014 9A68     		ldr	r2, [r3, #8]
 1290 0016 3B69     		ldr	r3, [r7, #16]
 1291 0018 1B69     		ldr	r3, [r3, #16]
 1292 001a 1946     		mov	r1, r3
 1293 001c 1046     		mov	r0, r2
 1294 001e FFF7FEFF 		bl	LL_DMA_IsEnabledChannel
 1295 0022 0346     		mov	r3, r0
 1296              		.loc 4 131 6
 1297 0024 002B     		cmp	r3, #0
 1298 0026 1AD1     		bne	.L51
 132:Src/usart_aspep_driver.c ****   {
 133:Src/usart_aspep_driver.c ****     //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
 134:Src/usart_aspep_driver.c ****     LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
 1299              		.loc 4 134 5
 1300 0028 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 164


 1301 002a 9868     		ldr	r0, [r3, #8]
 1302 002c 3B69     		ldr	r3, [r7, #16]
 1303 002e 1B69     		ldr	r3, [r3, #16]
 1304 0030 BA68     		ldr	r2, [r7, #8]
 1305 0032 1946     		mov	r1, r3
 1306 0034 FFF7FEFF 		bl	LL_DMA_SetMemoryAddress
 135:Src/usart_aspep_driver.c ****     LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
 1307              		.loc 4 135 5
 1308 0038 3B69     		ldr	r3, [r7, #16]
 1309 003a 9868     		ldr	r0, [r3, #8]
 1310 003c 3B69     		ldr	r3, [r7, #16]
 1311 003e 1B69     		ldr	r3, [r3, #16]
 1312 0040 FA88     		ldrh	r2, [r7, #6]
 1313 0042 1946     		mov	r1, r3
 1314 0044 FFF7FEFF 		bl	LL_DMA_SetDataLength
 136:Src/usart_aspep_driver.c ****     LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
 1315              		.loc 4 136 5
 1316 0048 3B69     		ldr	r3, [r7, #16]
 1317 004a 9A68     		ldr	r2, [r3, #8]
 1318 004c 3B69     		ldr	r3, [r7, #16]
 1319 004e 1B69     		ldr	r3, [r3, #16]
 1320 0050 1946     		mov	r1, r3
 1321 0052 1046     		mov	r0, r2
 1322 0054 FFF7FEFF 		bl	LL_DMA_EnableChannel
 137:Src/usart_aspep_driver.c ****     result = true;
 1323              		.loc 4 137 12
 1324 0058 0123     		movs	r3, #1
 1325 005a FB75     		strb	r3, [r7, #23]
 1326 005c 01E0     		b	.L52
 1327              	.L51:
 138:Src/usart_aspep_driver.c ****   }
 139:Src/usart_aspep_driver.c ****   else
 140:Src/usart_aspep_driver.c ****   {
 141:Src/usart_aspep_driver.c ****     result = false;
 1328              		.loc 4 141 12
 1329 005e 0023     		movs	r3, #0
 1330 0060 FB75     		strb	r3, [r7, #23]
 1331              	.L52:
 142:Src/usart_aspep_driver.c ****   }
 143:Src/usart_aspep_driver.c ****   return (result);
 1332              		.loc 4 143 10
 1333 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 144:Src/usart_aspep_driver.c **** }
 1334              		.loc 4 144 1
 1335 0064 1846     		mov	r0, r3
 1336 0066 1837     		adds	r7, r7, #24
 1337              	.LCFI102:
 1338              		.cfi_def_cfa_offset 8
 1339 0068 BD46     		mov	sp, r7
 1340              	.LCFI103:
 1341              		.cfi_def_cfa_register 13
 1342              		@ sp needed
 1343 006a 80BD     		pop	{r7, pc}
 1344              		.cfi_endproc
 1345              	.LFE1091:
 1347              		.section	.text.UASPEP_RECEIVE_BUFFER,"ax",%progbits
 1348              		.align	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 165


 1349              		.global	UASPEP_RECEIVE_BUFFER
 1350              		.syntax unified
 1351              		.thumb
 1352              		.thumb_func
 1354              	UASPEP_RECEIVE_BUFFER:
 1355              	.LFB1092:
 145:Src/usart_aspep_driver.c **** 
 146:Src/usart_aspep_driver.c **** /**
 147:Src/usart_aspep_driver.c ****   * @brief  Enables the configured DMA to receive packet.
 148:Src/usart_aspep_driver.c ****   *
 149:Src/usart_aspep_driver.c ****   * @param  pHWHandle Hardware components chosen for communication
 150:Src/usart_aspep_driver.c ****   * @param  buffer Buffer which will receive the communicated data
 151:Src/usart_aspep_driver.c ****   * @param  length Length of the received data
 152:Src/usart_aspep_driver.c ****   */
 153:Src/usart_aspep_driver.c **** void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
 154:Src/usart_aspep_driver.c **** {
 1356              		.loc 4 154 1
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 24
 1359              		@ frame_needed = 1, uses_anonymous_args = 0
 1360 0000 80B5     		push	{r7, lr}
 1361              	.LCFI104:
 1362              		.cfi_def_cfa_offset 8
 1363              		.cfi_offset 7, -8
 1364              		.cfi_offset 14, -4
 1365 0002 86B0     		sub	sp, sp, #24
 1366              	.LCFI105:
 1367              		.cfi_def_cfa_offset 32
 1368 0004 00AF     		add	r7, sp, #0
 1369              	.LCFI106:
 1370              		.cfi_def_cfa_register 7
 1371 0006 F860     		str	r0, [r7, #12]
 1372 0008 B960     		str	r1, [r7, #8]
 1373 000a 1346     		mov	r3, r2
 1374 000c FB80     		strh	r3, [r7, #6]	@ movhi
 155:Src/usart_aspep_driver.c ****   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 1375              		.loc 4 155 20
 1376 000e FB68     		ldr	r3, [r7, #12]
 1377 0010 7B61     		str	r3, [r7, #20]
 156:Src/usart_aspep_driver.c ****   LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
 1378              		.loc 4 156 3
 1379 0012 7B69     		ldr	r3, [r7, #20]
 1380 0014 5A68     		ldr	r2, [r3, #4]
 1381 0016 7B69     		ldr	r3, [r7, #20]
 1382 0018 DB68     		ldr	r3, [r3, #12]
 1383 001a 1946     		mov	r1, r3
 1384 001c 1046     		mov	r0, r2
 1385 001e FFF7FEFF 		bl	LL_DMA_DisableChannel
 157:Src/usart_aspep_driver.c ****   //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
 158:Src/usart_aspep_driver.c ****   LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
 1386              		.loc 4 158 3
 1387 0022 7B69     		ldr	r3, [r7, #20]
 1388 0024 5868     		ldr	r0, [r3, #4]
 1389 0026 7B69     		ldr	r3, [r7, #20]
 1390 0028 DB68     		ldr	r3, [r3, #12]
 1391 002a BA68     		ldr	r2, [r7, #8]
 1392 002c 1946     		mov	r1, r3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 166


 1393 002e FFF7FEFF 		bl	LL_DMA_SetMemoryAddress
 159:Src/usart_aspep_driver.c ****   LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
 1394              		.loc 4 159 3
 1395 0032 7B69     		ldr	r3, [r7, #20]
 1396 0034 5868     		ldr	r0, [r3, #4]
 1397 0036 7B69     		ldr	r3, [r7, #20]
 1398 0038 DB68     		ldr	r3, [r3, #12]
 1399 003a FA88     		ldrh	r2, [r7, #6]
 1400 003c 1946     		mov	r1, r3
 1401 003e FFF7FEFF 		bl	LL_DMA_SetDataLength
 160:Src/usart_aspep_driver.c **** 
 161:Src/usart_aspep_driver.c ****   LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
 1402              		.loc 4 161 3
 1403 0042 7B69     		ldr	r3, [r7, #20]
 1404 0044 5A68     		ldr	r2, [r3, #4]
 1405 0046 7B69     		ldr	r3, [r7, #20]
 1406 0048 DB68     		ldr	r3, [r3, #12]
 1407 004a 1946     		mov	r1, r3
 1408 004c 1046     		mov	r0, r2
 1409 004e FFF7FEFF 		bl	LL_DMA_EnableChannel
 162:Src/usart_aspep_driver.c **** }
 1410              		.loc 4 162 1
 1411 0052 00BF     		nop
 1412 0054 1837     		adds	r7, r7, #24
 1413              	.LCFI107:
 1414              		.cfi_def_cfa_offset 8
 1415 0056 BD46     		mov	sp, r7
 1416              	.LCFI108:
 1417              		.cfi_def_cfa_register 13
 1418              		@ sp needed
 1419 0058 80BD     		pop	{r7, pc}
 1420              		.cfi_endproc
 1421              	.LFE1092:
 1423              		.section	.text.UASPEP_IDLE_ENABLE,"ax",%progbits
 1424              		.align	1
 1425              		.global	UASPEP_IDLE_ENABLE
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1430              	UASPEP_IDLE_ENABLE:
 1431              	.LFB1093:
 163:Src/usart_aspep_driver.c **** 
 164:Src/usart_aspep_driver.c **** /**
 165:Src/usart_aspep_driver.c ****   * @brief  Sets IDLE state : no transmission on going.
 166:Src/usart_aspep_driver.c ****   *
 167:Src/usart_aspep_driver.c ****   * @param  pHandle Handler of the current instance of the UASPEP component
 168:Src/usart_aspep_driver.c ****   */
 169:Src/usart_aspep_driver.c **** void UASPEP_IDLE_ENABLE(void *pHWHandle)
 170:Src/usart_aspep_driver.c **** {
 1432              		.loc 4 170 1
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 16
 1435              		@ frame_needed = 1, uses_anonymous_args = 0
 1436 0000 80B5     		push	{r7, lr}
 1437              	.LCFI109:
 1438              		.cfi_def_cfa_offset 8
 1439              		.cfi_offset 7, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 167


 1440              		.cfi_offset 14, -4
 1441 0002 84B0     		sub	sp, sp, #16
 1442              	.LCFI110:
 1443              		.cfi_def_cfa_offset 24
 1444 0004 00AF     		add	r7, sp, #0
 1445              	.LCFI111:
 1446              		.cfi_def_cfa_register 7
 1447 0006 7860     		str	r0, [r7, #4]
 171:Src/usart_aspep_driver.c ****   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 1448              		.loc 4 171 20
 1449 0008 7B68     		ldr	r3, [r7, #4]
 1450 000a FB60     		str	r3, [r7, #12]
 172:Src/usart_aspep_driver.c ****   LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 1451              		.loc 4 172 3
 1452 000c FB68     		ldr	r3, [r7, #12]
 1453 000e 1B68     		ldr	r3, [r3]
 1454 0010 1846     		mov	r0, r3
 1455 0012 FFF7FEFF 		bl	LL_USART_ClearFlag_IDLE
 173:Src/usart_aspep_driver.c ****   LL_USART_EnableIT_IDLE(pHandle->USARTx);
 1456              		.loc 4 173 3
 1457 0016 FB68     		ldr	r3, [r7, #12]
 1458 0018 1B68     		ldr	r3, [r3]
 1459 001a 1846     		mov	r0, r3
 1460 001c FFF7FEFF 		bl	LL_USART_EnableIT_IDLE
 174:Src/usart_aspep_driver.c **** }
 1461              		.loc 4 174 1
 1462 0020 00BF     		nop
 1463 0022 1037     		adds	r7, r7, #16
 1464              	.LCFI112:
 1465              		.cfi_def_cfa_offset 8
 1466 0024 BD46     		mov	sp, r7
 1467              	.LCFI113:
 1468              		.cfi_def_cfa_register 13
 1469              		@ sp needed
 1470 0026 80BD     		pop	{r7, pc}
 1471              		.cfi_endproc
 1472              	.LFE1093:
 1474              		.text
 1475              	.Letext0:
 1476              		.file 5 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 1477              		.file 6 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 1478              		.file 7 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 1479              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 1480              		.file 9 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/usart_aspep_driver.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 168


DEFINED SYMBOLS
                            *ABS*:00000000 usart_aspep_driver.c
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:20     .rodata.OFFSET_TAB_CCMRx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:23     .rodata.OFFSET_TAB_CCMRx:00000000 OFFSET_TAB_CCMRx
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:26     .rodata.SHIFT_TAB_OCxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:29     .rodata.SHIFT_TAB_OCxx:00000000 SHIFT_TAB_OCxx
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:32     .rodata.SHIFT_TAB_ICxx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:35     .rodata.SHIFT_TAB_ICxx:00000000 SHIFT_TAB_ICxx
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:38     .rodata.SHIFT_TAB_CCxP:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:41     .rodata.SHIFT_TAB_CCxP:00000000 SHIFT_TAB_CCxP
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:44     .rodata.SHIFT_TAB_OISx:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:47     .rodata.SHIFT_TAB_OISx:00000000 SHIFT_TAB_OISx
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:50     .text.LL_USART_ClearFlag_IDLE:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:55     .text.LL_USART_ClearFlag_IDLE:00000000 LL_USART_ClearFlag_IDLE
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:96     .text.LL_USART_ClearFlag_TC:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:101    .text.LL_USART_ClearFlag_TC:00000000 LL_USART_ClearFlag_TC
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:141    .text.LL_USART_EnableIT_IDLE:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:146    .text.LL_USART_EnableIT_IDLE:00000000 LL_USART_EnableIT_IDLE
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:231    .text.LL_USART_EnableIT_TC:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:236    .text.LL_USART_EnableIT_TC:00000000 LL_USART_EnableIT_TC
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:320    .text.LL_USART_EnableIT_ERROR:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:325    .text.LL_USART_EnableIT_ERROR:00000000 LL_USART_EnableIT_ERROR
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:411    .text.LL_USART_EnableDMAReq_RX:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:416    .text.LL_USART_EnableDMAReq_RX:00000000 LL_USART_EnableDMAReq_RX
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:502    .text.LL_USART_EnableDMAReq_TX:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:507    .text.LL_USART_EnableDMAReq_TX:00000000 LL_USART_EnableDMAReq_TX
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:593    .rodata.CHANNEL_OFFSET_TAB:00000000 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:596    .rodata.CHANNEL_OFFSET_TAB:00000000 CHANNEL_OFFSET_TAB
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:599    .text.LL_DMA_EnableChannel:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:604    .text.LL_DMA_EnableChannel:00000000 LL_DMA_EnableChannel
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:662    .text.LL_DMA_EnableChannel:00000040 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:667    .text.LL_DMA_DisableChannel:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:672    .text.LL_DMA_DisableChannel:00000000 LL_DMA_DisableChannel
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:729    .text.LL_DMA_DisableChannel:00000040 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:734    .text.LL_DMA_IsEnabledChannel:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:739    .text.LL_DMA_IsEnabledChannel:00000000 LL_DMA_IsEnabledChannel
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:798    .text.LL_DMA_IsEnabledChannel:00000038 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:803    .text.LL_DMA_SetDataLength:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:808    .text.LL_DMA_SetDataLength:00000000 LL_DMA_SetDataLength
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:870    .text.LL_DMA_SetDataLength:00000048 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:875    .text.LL_DMA_SetMemoryAddress:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:880    .text.LL_DMA_SetMemoryAddress:00000000 LL_DMA_SetMemoryAddress
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:931    .text.LL_DMA_SetMemoryAddress:00000030 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:936    .text.LL_DMA_SetPeriphAddress:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:941    .text.LL_DMA_SetPeriphAddress:00000000 LL_DMA_SetPeriphAddress
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:992    .text.LL_DMA_SetPeriphAddress:00000030 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:997    .text.LL_DMA_EnableIT_TC:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1002   .text.LL_DMA_EnableIT_TC:00000000 LL_DMA_EnableIT_TC
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1059   .text.LL_DMA_EnableIT_TC:00000040 $d
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1064   .text.UASPEP_INIT:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1070   .text.UASPEP_INIT:00000000 UASPEP_INIT
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1118   .text.UASPEP_DAMCONFIG_TX:00000000 UASPEP_DAMCONFIG_TX
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1189   .text.UASPEP_DAMCONFIG_RX:00000000 UASPEP_DAMCONFIG_RX
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1112   .text.UASPEP_DAMCONFIG_TX:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1183   .text.UASPEP_DAMCONFIG_RX:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1257   .text.UASPEP_SEND_PACKET:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1263   .text.UASPEP_SEND_PACKET:00000000 UASPEP_SEND_PACKET
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s 			page 169


C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1348   .text.UASPEP_RECEIVE_BUFFER:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1354   .text.UASPEP_RECEIVE_BUFFER:00000000 UASPEP_RECEIVE_BUFFER
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1424   .text.UASPEP_IDLE_ENABLE:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cccYs9oZ.s:1430   .text.UASPEP_IDLE_ENABLE:00000000 UASPEP_IDLE_ENABLE

NO UNDEFINED SYMBOLS
